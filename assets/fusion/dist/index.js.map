{"version":3,"file":"index.js","sources":["../src/utilities/arr.ts","../src/processors/css.ts","../src/processors/js.ts","../src/processors/move.ts","../src/processors/copy.ts","../src/processors/link.ts","../src/params.ts","../src/utilities/env.ts","../src/utilities/crypto.ts","../src/utilities/fs.ts","../src/builder/BuildTask.ts","../src/utilities/utilities.ts","../src/builder/ConfigBuilder.ts","../src/runner/app.ts","../src/runner/config.ts","../src/runner/describe.ts","../src/runner/tasks.ts","../src/index.ts"],"sourcesContent":["import { MaybeArray } from 'rollup';\r\n\r\nexport function forceArray<T>(item: T | T[]): T[] {\r\n  if (Array.isArray(item)) {\r\n    return item;\r\n  } else {\r\n    return [item];\r\n  }\r\n}\r\n\r\n\r\nexport function handleMaybeArray<T, R>(\r\n  items: T | T[],\r\n  callback: (item: T) => R\r\n): T extends any[] ? R[] : R {\r\n  if (Array.isArray(items)) {\r\n    return items.map(callback) as any;\r\n  } else {\r\n    return callback(items as T) as any;\r\n  }\r\n}\r\n\r\nexport function appendToMaybeArray<T>(items: MaybeArray<T>, value: T): T[] {\r\n  if (Array.isArray(items)) {\r\n    items.push(value);\r\n\r\n    return items;\r\n  } else {\r\n    return [items, value];\r\n  }\r\n}\r\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\r\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface';\r\nimport { CssOptions, TaskInput, TaskOutput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr';\r\nimport { basename, parse } from 'node:path';\r\nimport { MaybePromise } from 'rollup';\r\n\r\nexport function css(\r\n  input: TaskInput,\r\n  output?: TaskOutput,\r\n  options: CssOptions = {}\r\n): CssProcessor {\r\n  return new CssProcessor(input, output, options);\r\n}\r\n\r\nexport class CssProcessor implements ProcessorInterface {\r\n  constructor(protected input: TaskInput, protected output?: TaskOutput, protected options: CssOptions = {}) {\r\n  }\r\n\r\n  async config(taskName: string, builder: ConfigBuilder) {\r\n    handleMaybeArray(this.input, (input) => {\r\n      const task = builder.addTask(input, taskName);\r\n\r\n      builder.assetFileNamesCallbacks.push((assetInfo) => {\r\n        const name = assetInfo.names[0];\r\n\r\n        if (!name) {\r\n          return undefined;\r\n        }\r\n\r\n        // Rename only if the asset name matches the task id with .css extension\r\n        if (basename(name, '.css') === task.id) {\r\n          if (!this.output) {\r\n            return parse(input).name + '.css';\r\n          }\r\n\r\n          return task.normalizeOutput(this.output, '.css');\r\n\r\n          // if (!isAbsolute(name)) {\r\n          //   return name;\r\n          // } else {\r\n          //   builder.moveFilesMap[task.id + '.css'] = name;\r\n          // }\r\n        }\r\n      });\r\n    });\r\n\r\n    // show(builder)\r\n  }\r\n\r\n  preview(): MaybePromise<ProcessorPreview[]> {\r\n    return forceArray(this.input).map((input) => {\r\n      return {\r\n        input,\r\n        output: this.output || basename(input),\r\n        extra: {}\r\n      };\r\n    });\r\n  }\r\n}\r\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\r\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { TaskInput, TaskOutput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr';\r\nimport { basename, parse } from 'node:path';\r\nimport { MaybePromise } from 'rollup';\r\n\r\nexport function js(input: TaskInput, output?: TaskOutput): ProcessorInterface {\r\n  return new JsProcessor(input, output);\r\n}\r\n\r\nexport class JsProcessor implements ProcessorInterface {\r\n\r\n  constructor(public input: TaskInput, public output?: TaskOutput) {\r\n  }\r\n\r\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\r\n    handleMaybeArray(this.input, (input) => {\r\n      const task = builder.addTask(input, taskName);\r\n\r\n      builder.entryFileNamesCallbacks.push((chunkInfo) => {\r\n        const name = chunkInfo.name;\r\n\r\n        if (!name) {\r\n          return;\r\n        }\r\n\r\n        // Rename only if the asset name matches the task id with .css extension\r\n        if (name === task.id) {\r\n          if (!this.output) {\r\n            return parse(input).name + '.js';\r\n          }\r\n\r\n          return task.normalizeOutput(this.output);\r\n\r\n          // if (!isAbsolute(name)) {\r\n          //   return name;\r\n          // } else {\r\n          //   builder.moveFilesMap[task.id + '.css'] = name;\r\n          // }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  preview(): MaybePromise<ProcessorPreview[]> {\r\n    return forceArray(this.input).map((input) => {\r\n      return {\r\n        input,\r\n        output: this.output || basename(input),\r\n        extra: {}\r\n      };\r\n    });\r\n  }\r\n}\r\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\r\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { TaskInput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr.ts';\r\nimport { MaybePromise } from 'rollup';\r\nimport { types } from 'sass';\r\n\r\nexport function move(input: TaskInput, dest: string) {\r\n  return new MoveProcessor(input, dest);\r\n}\r\n\r\nexport class MoveProcessor implements ProcessorInterface {\r\n  constructor(public input: TaskInput, public dest: string) {\r\n  }\r\n\r\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\r\n    handleMaybeArray(this.input, (input) => {\r\n      builder.moveTasks.push({ src: input, dest: this.dest, options: {} });\r\n    });\r\n  }\r\n\r\n  preview(): MaybePromise<ProcessorPreview[]> {\r\n    return forceArray(this.input).map((input) => {\r\n      return {\r\n        input,\r\n        output: this.dest,\r\n        extra: {}\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\r\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { TaskInput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr.ts';\r\nimport { MaybePromise } from 'rollup';\r\n\r\nexport function copy(input: TaskInput, dest: string) {\r\n  return new CopyProcessor(input, dest);\r\n}\r\n\r\nexport class CopyProcessor implements ProcessorInterface {\r\n  constructor(public input: TaskInput, public dest: string) {\r\n  }\r\n\r\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\r\n    handleMaybeArray(this.input, (input) => {\r\n      builder.copyTasks.push({ src: input, dest: this.dest, options: {} })\r\n    });\r\n  }\r\n\r\n  preview(): MaybePromise<ProcessorPreview[]> {\r\n    return forceArray(this.input).map((input) => {\r\n      return {\r\n        input,\r\n        output: this.dest,\r\n        extra: {}\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\r\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { LinkOptions, TaskInput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr.ts';\r\nimport { MaybePromise } from 'rollup';\r\n\r\nexport function link(input: TaskInput, dest: string, options: LinkOptions = {}) {\r\n  return new LinkProcessor(input, dest, options);\r\n}\r\n\r\nexport class LinkProcessor implements ProcessorInterface {\r\n  constructor(public input: TaskInput, public dest: string, public options: LinkOptions = {}) {\r\n  }\r\n\r\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\r\n    handleMaybeArray(this.input, (input) => {\r\n      builder.linkTasks.push({ src: input, dest: this.dest, options: this.options });\r\n    });\r\n  }\r\n\r\n  preview(): MaybePromise<ProcessorPreview[]> {\r\n    return forceArray(this.input).map((input) => {\r\n      return {\r\n        input,\r\n        output: this.dest,\r\n        extra: {}\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\n","import { RunnerCliParams } from '@/types';\r\n\r\nlet params: RunnerCliParams | undefined = undefined;\r\n\r\nexport function prepareParams(p: RunnerCliParams): RunnerCliParams {\r\n  params = p;\r\n\r\n  isVerbose = params?.verbose ? params?.verbose > 0 : false;\r\n\r\n  return p;\r\n}\r\n\r\nlet isVerbose = false;\r\nconst isProd = process.env.NODE_ENV === 'production';\r\nconst isDev = !isProd;\r\n\r\nexport { isVerbose, isDev, isProd, params };\r\n","export function isWindows() {\r\n  return process.platform === 'win32';\r\n}\r\n","import Crypto from 'crypto';\r\n\r\nexport function shortHash(bufferOrString: Crypto.BinaryLike, short: number | null = 8): string {\r\n  let hash = Crypto.createHash('sha1')\r\n    .update(bufferOrString)\r\n    .digest('hex');\r\n\r\n  if (short && short > 0) {\r\n    hash = hash.substring(0, short);\r\n  }\r\n\r\n  return hash;\r\n}\r\n\r\n\r\n","import { FileTasks } from '@/types';\r\nimport { isWindows } from '@/utilities/env.ts';\r\nimport fg from 'fast-glob';\r\nimport fs from 'fs-extra';\r\nimport { dirname, isAbsolute, relative, resolve } from 'node:path';\r\nimport { Logger } from 'vite';\r\n\r\nfunction handleFilesOperation(\r\n  src: string,\r\n  dest: string,\r\n  options: {\r\n    outDir: string;\r\n    handler: (src: string, dest: string) => Promise<any>;\r\n    globOptions?: fg.Options;\r\n  }\r\n) {\r\n  const promises = [];\r\n  src = normalizeFilePath(src, options.outDir);\r\n  dest = normalizeFilePath(dest, options.outDir);\r\n\r\n  const base = getBaseFromPattern(src);\r\n  const sources = isGlob(src)\r\n    ? fg.globSync(fg.convertPathToPattern(src), options.globOptions)\r\n    : [src];\r\n\r\n  for (let source of sources) {\r\n    let dir;\r\n    let resolvedDest = dest;\r\n\r\n    if (endsWithSlash(dest)) {\r\n      dir = resolvedDest;\r\n      resolvedDest = resolvedDest + relative(base, source);\r\n    } else {\r\n      dir = dirname(resolvedDest);\r\n    }\r\n\r\n    fs.ensureDirSync(dir);\r\n\r\n    promises.push(options.handler(source, resolvedDest));\r\n  }\r\n\r\n  return promises;\r\n}\r\n\r\nexport function moveFilesAndLog(tasks: FileTasks, outDir: string, logger: Logger) {\r\n  const promises = [];\r\n\r\n  for (const { src, dest, options } of tasks) {\r\n    const ps = handleFilesOperation(\r\n      src,\r\n      dest,\r\n      {\r\n        outDir,\r\n        handler: async (src, dest) => {\r\n          logger.info(`Moving file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\r\n          return fs.move(src, dest, { overwrite: true });\r\n        },\r\n        globOptions: { onlyFiles: true }\r\n      }\r\n    );\r\n\r\n    promises.push(...ps);\r\n  }\r\n\r\n  return Promise.all(promises);\r\n}\r\n\r\nexport function copyFilesAndLog(tasks: FileTasks, outDir: string, logger: Logger) {\r\n  const promises = [];\r\n\r\n  for (const { src, dest, options } of tasks) {\r\n    const ps = handleFilesOperation(\r\n      src,\r\n      dest, {\r\n        outDir,\r\n        handler: async (src, dest) => {\r\n          logger.info(`Copy file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\r\n          return fs.copy(src, dest, { overwrite: true });\r\n        },\r\n        globOptions: { onlyFiles: true }\r\n      }\r\n    );\r\n\r\n    promises.push(...ps);\r\n  }\r\n\r\n  return Promise.all(promises);\r\n}\r\n\r\nexport function linkFilesAndLog(tasks: FileTasks<'link'>, outDir: string, logger: Logger) {\r\n  const promises = [];\r\n\r\n  for (const { src, dest, options } of tasks) {\r\n    const ps = handleFilesOperation(\r\n      src,\r\n      dest, {\r\n        outDir,\r\n        handler: async (src, dest) => {\r\n          logger.info(`Link file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\r\n          return symlink(src, dest, options?.force ?? false);\r\n        },\r\n        globOptions: { onlyFiles: false }\r\n      }\r\n    );\r\n\r\n    promises.push(...ps);\r\n  }\r\n\r\n  return Promise.all(promises);\r\n}\r\n\r\nexport async function symlink(target: string, link: string, force = false) {\r\n  if (isWindows() && fs.lstatSync(target).isDirectory()) {\r\n    return fs.ensureSymlink(target, link, 'junction');\r\n  }\r\n\r\n  if (isWindows() && fs.lstatSync(target).isFile() && force) {\r\n    return fs.ensureLink(target, link);\r\n  }\r\n\r\n  return fs.ensureSymlink(target, link);\r\n}\r\n\r\nexport function endsWithSlash(path: string): boolean {\r\n  return path.endsWith('/') || path.endsWith('\\\\');\r\n}\r\n\r\nfunction getBaseFromPattern(pattern: string) {\r\n  const specialChars = [\"*\", \"?\", \"[\", \"]\"];\r\n  const idx = [...pattern].findIndex(c => specialChars.includes(c));\r\n\r\n  if (idx === -1) {\r\n    return dirname(pattern);\r\n  }\r\n\r\n  return dirname(pattern.slice(0, idx + 1));\r\n}\r\n\r\nfunction isGlob(pattern: string): boolean {\r\n  const specialChars = [\"*\", \"?\", \"[\", \"]\"];\r\n  return specialChars.some(c => pattern.includes(c));\r\n}\r\n\r\nfunction normalizeFilePath(path: string, outDir: string) {\r\n  if (path.startsWith('.')) {\r\n    path = resolve(path);\r\n  } else if (!isAbsolute(path)) {\r\n    path = outDir + '/' + path;\r\n  }\r\n\r\n  return path;\r\n}\r\n","import { shortHash } from '@/utilities/crypto.ts';\r\nimport { uniqueId } from 'lodash-es';\r\nimport { normalize, basename, resolve, isAbsolute, parse } from 'node:path';\r\nimport { PreRenderedChunk } from 'rollup';\r\n\r\nexport default class BuildTask {\r\n  id: string;\r\n  output?: string | ((chunkInfo: PreRenderedChunk) => any);\r\n  postCallbacks: (() => void)[] = [];\r\n\r\n  constructor(public input: string, public group?: string) {\r\n    this.id = BuildTask.toFileId(input, group);\r\n\r\n    this.input = normalize(input);\r\n  }\r\n\r\n  dest(output?: string | ((chunkInfo: PreRenderedChunk) => any)) {\r\n    if (typeof output === 'string') {\r\n      output = this.normalizeOutput(output);\r\n    }\r\n\r\n    this.output = output;\r\n\r\n    return this;\r\n  }\r\n\r\n  addPostCallback(callback: () => void) {\r\n    this.postCallbacks.push(callback);\r\n    return this;\r\n  }\r\n\r\n  normalizeOutput(output: string, ext = '.js') {\r\n    if (output.endsWith('/') || output.endsWith('\\\\')) {\r\n      output += parse(this.input).name + ext;\r\n    }\r\n\r\n    // if (output.startsWith('.')) {\r\n    //   output = resolve(output);\r\n    // }\r\n\r\n    return output;\r\n  }\r\n\r\n  static toFileId(input: string, group?: string) {\r\n    input = normalize(input);\r\n\r\n    group ||= uniqueId();\r\n\r\n    return group + '-' + shortHash(input);\r\n  }\r\n}\r\n\r\n","import { OverrideOptions } from '@/types';\r\nimport { cloneDeep, merge } from 'lodash-es';\r\nimport { inspect } from 'node:util';\r\nimport { OutputOptions } from 'rollup';\r\nimport { mergeConfig, UserConfig } from 'vite';\r\n\r\nexport function mergeOptions<T extends Record<string, any> = Record<string, any>>(\r\n  base: T,\r\n  ...overrides: (OverrideOptions<T> | undefined)[]\r\n): T {\r\n  if (!overrides.length) {\r\n    return base;\r\n  }\r\n\r\n  for (const override of overrides) {\r\n    if (!override) {\r\n      continue;\r\n    }\r\n\r\n    if (typeof override === 'function') {\r\n      base = override(base) ?? base;\r\n    } else {\r\n      // @ts-ignore\r\n      base = mergeConfig(base, override);\r\n    }\r\n  }\r\n\r\n  return base;\r\n}\r\n\r\nexport function appendMinFileName(output: OutputOptions): OutputOptions {\r\n  output = cloneDeep(output);\r\n\r\n  if (output.file) {\r\n    const parts = output.file.split('.');\r\n    const ext = parts.pop();\r\n    output.file = `${parts.join('.')}.min.${ext}`;\r\n  } else if (output.dir && typeof output.entryFileNames === 'string') {\r\n    const parts = output.entryFileNames.split('.');\r\n    const ext = parts.pop();\r\n    output.entryFileNames = `${parts.join('.')}.min.${ext}`;\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nexport function show(data: any, depth = 10) {\r\n  console.log(inspect(data, { depth, colors: true }));\r\n}\r\n","import BuildTask from '@/builder/BuildTask.ts';\r\nimport { FileTasks, LinkOptions, RunnerCliParams } from '@/types';\r\nimport { show } from '@/utilities/utilities.ts';\r\nimport { get, set } from 'lodash-es';\r\nimport { isAbsolute, relative } from 'node:path';\r\nimport { MaybePromise, PreRenderedAsset, PreRenderedChunk, RollupOptions } from 'rollup';\r\nimport { ConfigEnv, mergeConfig, PluginOption, UserConfig } from 'vite';\r\n\r\nexport default class ConfigBuilder {\r\n  static globalOverrideConfig: UserConfig = {};\r\n  overrideConfig: UserConfig = {};\r\n\r\n  entryFileNamesCallbacks: ((chunkInfo: PreRenderedChunk) => string | undefined | void)[] = [];\r\n  chunkFileNamesCallbacks: ((chunkInfo: PreRenderedChunk) => string | undefined | void)[] = [];\r\n  assetFileNamesCallbacks: ((chunkInfo: PreRenderedAsset) => string | undefined | void)[] = [];\r\n\r\n  moveTasks: FileTasks = [];\r\n  copyTasks: FileTasks = [];\r\n  linkTasks: FileTasks<'link'> = [];\r\n  postBuildCallbacks: (() => MaybePromise<void>)[] = [];\r\n  // fileNameMap: Record<string, string> = {};\r\n\r\n  // externals: ((source: string, importer: string | undefined, isResolved: boolean) => boolean | string | NullValue)[] = [];\r\n  cleans: string[] = [];\r\n\r\n  tasks: Map<string, BuildTask> = new Map();\r\n\r\n  constructor(public config: UserConfig, public env: ConfigEnv, public params: RunnerCliParams) {\r\n    // this.ensurePath('build', {});\r\n    // this.ensurePath('build.rollupOptions', {\r\n    //   input: {},\r\n    //   output: this.getDefaultOutput(),\r\n    // });\r\n    // this.ensurePath('plugins', []);\r\n\r\n    this.config = mergeConfig<UserConfig, UserConfig>(this.config, {\r\n      build: {\r\n        rollupOptions: {\r\n          preserveEntrySignatures: 'strict',\r\n          input: {},\r\n          output: this.getDefaultOutput(),\r\n          // external: (source: string, importer: string | undefined, isResolved: boolean) => {\r\n          //   for (const external of this.externals) {\r\n          //     const result = external(source, importer, isResolved);\r\n          //\r\n          //     if (result) {\r\n          //       return true;\r\n          //     }\r\n          //   }\r\n          // },\r\n        },\r\n        emptyOutDir: false,\r\n        sourcemap: env.mode !== 'production' ? 'inline' : false,\r\n      },\r\n      plugins: [],\r\n      css: {\r\n        devSourcemap: true,\r\n      },\r\n      esbuild: {\r\n        // Todo: Remove if esbuild supports decorators by default\r\n        target: 'es2022',\r\n      }\r\n    });\r\n  }\r\n\r\n  merge(override: UserConfig | ((config: UserConfig) => UserConfig)) {\r\n    if (typeof override === 'function') {\r\n      this.config = override(this.config) ?? this.config;\r\n\r\n      return this;\r\n    }\r\n\r\n    this.config = mergeConfig(this.config, override);\r\n\r\n    return this;\r\n  }\r\n\r\n  private getDefaultOutput(): RollupOptions['output'] {\r\n    return {\r\n      entryFileNames: (chunkInfo) => {\r\n        const name = this.getChunkNameFromTask(chunkInfo);\r\n\r\n        if (name) {\r\n          return name;\r\n        }\r\n\r\n        for (const entryFileNamesCallback of this.entryFileNamesCallbacks) {\r\n          const name = entryFileNamesCallback(chunkInfo);\r\n\r\n          if (name) {\r\n            return name;\r\n          }\r\n        }\r\n\r\n        // console.log(chunkInfo, this.relativePath(chunkInfo.facadeModuleId));\r\n\r\n        return '[name].js';\r\n      },\r\n      chunkFileNames: (chunkInfo) => {\r\n        const name = this.getChunkNameFromTask(chunkInfo);\r\n\r\n        if (name) {\r\n          return name;\r\n        }\r\n\r\n        for (const chunkFileNamesCallback of this.chunkFileNamesCallbacks) {\r\n          const name = chunkFileNamesCallback(chunkInfo);\r\n\r\n          if (name) {\r\n            return name;\r\n          }\r\n        }\r\n\r\n        return 'chunks/[name]-[hash].js';\r\n      },\r\n      assetFileNames: (assetInfo) => {\r\n        // if (this.fileNameMap[assetInfo.name]) {\r\n        //   assetInfo.name = this.fileNameMap[assetInfo.name];\r\n        //   return assetInfo.name;\r\n        // }\r\n\r\n        for (const assetFileNamesCallback of this.assetFileNamesCallbacks) {\r\n          const name = assetFileNamesCallback(assetInfo);\r\n\r\n          if (name) {\r\n            return name;\r\n          }\r\n        }\r\n\r\n        return '[name].[ext]';\r\n      }\r\n    };\r\n  }\r\n\r\n  private getChunkNameFromTask(chunkInfo: PreRenderedChunk) {\r\n    if (this.tasks.has(chunkInfo.name)) {\r\n      const output = this.tasks.get(chunkInfo.name)?.output;\r\n\r\n      if (output) {\r\n        const name = typeof output === 'function' ? output(chunkInfo) : output;\r\n\r\n        if (!isAbsolute(name)) {\r\n          return name;\r\n        }\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  ensurePath(path: string, def: any = {}) {\r\n    if (get(this.config, path) == null) {\r\n      set(this.config, path, def);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  get(path: string) {\r\n    return get(this.config, path);\r\n  }\r\n\r\n  set(path: string, value: any) {\r\n    set(this.config, path, value);\r\n    return this;\r\n  }\r\n\r\n  addTask(input: string, group?: string) {\r\n    const task = new BuildTask(input, group);\r\n\r\n    this.tasks.set(task.id, task);\r\n\r\n    const inputOptions = this.config.build!.rollupOptions!.input! as Record<string, string>;\r\n    inputOptions[task.id] = task.input;\r\n\r\n    return task;\r\n  }\r\n\r\n  // addExternals(externals: Externalize) {\r\n  //   if (Array.isArray(externals)) {\r\n  //     this.externals.push((rollupOptions) => {\r\n  //       rollupOptions.external\r\n  //     })\r\n  //   } else if (typeof externals === 'object') {\r\n  //\r\n  //   } else {\r\n  //\r\n  //   }\r\n  // }\r\n\r\n  addPlugin(plugin: PluginOption) {\r\n    this.config.plugins?.push(plugin);\r\n  }\r\n\r\n  removePlugin(plugin: string | PluginOption) {\r\n    this.config.plugins = this.config.plugins?.filter((p) => {\r\n      if (!p) {\r\n        return true;\r\n      }\r\n\r\n      if (typeof plugin === 'string' && typeof p === 'object' && 'name' in p) {\r\n        return p.name !== plugin;\r\n      } else if (typeof plugin === 'object' && typeof p === 'object') {\r\n        return p !== plugin;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  relativePath(to: string) {\r\n    return relative(process.cwd(), to);\r\n  }\r\n\r\n  debug() {\r\n    show(this.config);\r\n  }\r\n}\r\n","import { RunnerCliParams } from '@/types/runner';\r\nimport yargs from 'yargs';\r\n\r\nexport function getArgsAfterDoubleDashes(argv?: string[]): string[] {\r\n  argv ??= process.argv;\r\n\r\n  return argv.slice(2).join(' ')\r\n    // Split by -- and remove the first part\r\n    .split(' -- ').slice(1)\r\n    // Join back and split by space\r\n    .join(' -- ').trim()\r\n    // Split back to array and remove empty values\r\n    .split(' ').filter(v => v !== '');\r\n}\r\n\r\nexport function parseArgv(argv: string[]): RunnerCliParams {\r\n  const app = yargs();\r\n\r\n  // app.option('watch', {\r\n  //   alias: 'w',\r\n  //   type: 'boolean',\r\n  //   description: 'Watch files for changes and re-run the tasks',\r\n  // });\r\n\r\n  app.option('cwd', {\r\n    type: 'string',\r\n    description: 'Current working directory',\r\n  });\r\n\r\n  app.option('list', {\r\n    alias: 'l',\r\n    type: 'boolean',\r\n    description: 'List all available tasks',\r\n  });\r\n\r\n  app.option('config', {\r\n    alias: 'c',\r\n    type: 'string',\r\n    description: 'Path to config file',\r\n  });\r\n\r\n  // app.option('series', {\r\n  //   alias: 's',\r\n  //   type: 'boolean',\r\n  //   description: 'Run tasks in series instead of parallel',\r\n  // });\r\n\r\n  app.option('verbose', {\r\n    alias: 'v',\r\n    type: 'count',\r\n    description: 'Increase verbosity of output. Use multiple times for more verbosity.',\r\n  });\r\n\r\n  return app.parseSync(argv);\r\n}\r\n","import { ProcessorInterface } from '@/processors/ProcessorInterface.ts';\r\nimport { forceArray } from '@/utilities/arr.ts';\r\nimport { build } from 'esbuild';\r\nimport Module from 'module';\r\nimport { existsSync, writeFileSync } from 'node:fs';\r\nimport { dirname, isAbsolute, resolve } from 'node:path';\r\nimport { MaybeArray, MaybePromise } from 'rollup';\r\nimport { ConfigResult, LoadedConfigTask, RunnerCliParams } from '@/types';\r\n\r\nexport async function loadConfigFile(configFile: ConfigResult): Promise<Record<string, LoadedConfigTask>> {\r\n  let path = configFile.path;\r\n\r\n  // If is Windows, Add \"file://\" prefix to path\r\n  if (process.platform === 'win32') {\r\n    // todo: try use pathToFileURL(): import { pathToFileURL } from 'url';\r\n    // Replace backslash to slash\r\n    const winPath = path.replace(/\\\\/g, '/');\r\n    // Add file:// prefix if not exists\r\n    if (!winPath.startsWith('file://')) {\r\n      // Add extra slash to make it absolute path\r\n      // e.g. C:/path/to/file\r\n      // becomes file:///C:/path/to/file\r\n      path = `file:///${winPath}`;\r\n    }\r\n  }\r\n\r\n  if (configFile.ts) {\r\n    const buildResult = await build({\r\n      entryPoints: [configFile.path],\r\n      bundle: true,\r\n      write: false,\r\n      outdir: 'dist',\r\n      platform: 'node',\r\n      format: 'cjs',\r\n      target: 'esnext',\r\n      external: ['../dist', '../dist/*'],\r\n      packages: 'external',\r\n      sourcemap: 'inline',\r\n    });\r\n    \r\n    const output = buildResult.outputFiles[0];\r\n\r\n    const code = Buffer.from(output.contents).toString('utf8');\r\n    writeFileSync(output.path, code);\r\n    const m = new Module(output.path, undefined);\r\n    m.filename = output.path;\r\n    m.paths = Module._nodeModulePaths(dirname(output.path));\r\n    m._compile(code, output.path);\r\n\r\n    return expandModules(m.exports);\r\n  } else {\r\n    const modules = await import(path);\r\n\r\n    return expandModules(modules);\r\n  }\r\n}\r\n\r\nexport function expandModules(modules: Record<string, any>) {\r\n  modules = { ...modules };\r\n\r\n  if (modules.__esModule) {\r\n    delete modules.__esModule;\r\n  }\r\n\r\n  return modules;\r\n}\r\n\r\nexport async function resolveTaskResults(task: LoadedConfigTask) {\r\n  task = await task;\r\n\r\n  return Promise.all(forceArray(task));\r\n}\r\n\r\nexport async function resolveTaskOptions(task: LoadedConfigTask, resolveSubFunctions = false): Promise<ProcessorInterface[]> {\r\n  task = await task;\r\n\r\n  if (!resolveSubFunctions && Array.isArray(task)) {\r\n    const results = await Promise.all(task.map((task) => resolveTaskOptions(task, true)));\r\n    return results.flat();\r\n  }\r\n\r\n  if (typeof task === 'function') {\r\n    return resolvePromisesToFlatArray(await task(), task?.name);\r\n  }\r\n\r\n  return resolvePromisesToFlatArray((await task) as MaybeArray<ProcessorInterface>, task?.name);\r\n}\r\n\r\nasync function resolvePromisesToFlatArray(tasks: MaybeArray<MaybePromise<ProcessorInterface>>, name?: string) {\r\n  if (!Array.isArray(tasks)) {\r\n    return [await tasks];\r\n  }\r\n\r\n  const resolvedTasks = await Promise.all(tasks);\r\n  const returnTasks = [];\r\n\r\n  for (const resolvedTask of resolvedTasks) {\r\n    if (Array.isArray(resolvedTask)) {\r\n      returnTasks.push(...resolvedTask);\r\n    } else {\r\n      returnTasks.push(resolvedTask);\r\n    }\r\n  }\r\n\r\n  return returnTasks;\r\n}\r\n\r\nexport function mustGetAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult {\r\n  const found = getAvailableConfigFile(root, params);\r\n\r\n  if (!found) {\r\n    throw new Error('No config file found. Please create a fusionfile.js or fusionfile.ts in the root directory.');\r\n  }\r\n\r\n  return found;\r\n}\r\n\r\nexport function getAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult | null {\r\n  let found = params?.config;\r\n\r\n  if (found) {\r\n    // If is not absolute of system path(consider Windows), prepend root\r\n    if (!isAbsolute(found)) {\r\n      found = resolve(root, found);\r\n    }\r\n\r\n    if (existsSync(found)) {\r\n      return {\r\n        path: found,\r\n        // get filename from file path\r\n        filename: found.split('/').pop() || '',\r\n        type: getConfigModuleType(found),\r\n        ts: isConfigTypeScript(found),\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  return findDefaultConfig(root);\r\n}\r\n\r\nexport function findDefaultConfig(root: string): ConfigResult | null {\r\n  let file = resolve(root, 'fusionfile.js');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'commonjs',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mjs');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.ts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getConfigModuleType(file: string) {\r\n  let type: 'commonjs' | 'module' | 'unknown' = 'unknown';\r\n\r\n  if (file.endsWith('.cjs')) {\r\n    type = 'commonjs';\r\n  } else if (file.endsWith('.mjs')) {\r\n    type = 'module';\r\n  } else if (file.endsWith('.ts') || file.endsWith('.mts')) {\r\n    type = 'module';\r\n  }\r\n\r\n  return type;\r\n}\r\n\r\nfunction isConfigTypeScript(file: string) {\r\n  return file.endsWith('.ts') || file.endsWith('.mts');\r\n}\r\n","import { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { LoadedConfigTask } from '@/types';\r\nimport { forceArray } from '@/utilities/arr.ts';\r\nimport archy, { type Data } from 'archy';\r\nimport chalk from 'chalk';\r\nimport { MaybeArray } from 'rollup';\r\nimport { UserConfig } from 'vite';\r\nimport { resolveTaskOptions } from './config';\r\n\r\nexport async function displayAvailableTasks(tasks: Record<string, LoadedConfigTask>) {\r\n  const keys = Object.keys(tasks);\r\n\r\n  // Sort put default as first if exists\r\n  keys.sort((a, b) => {\r\n    if (a === 'default') {\r\n      return -1;\r\n    }\r\n\r\n    if (b === 'default') {\r\n      return 1;\r\n    }\r\n\r\n    return a.localeCompare(b);\r\n  });\r\n\r\n  const nodes: Array<Data | string> = [];\r\n\r\n  for (const key of keys) {\r\n    const task = tasks[key];\r\n    // const taskOptions = await resolveTaskOptions(task, true);\r\n\r\n    nodes.push(await describeTasks(key, task));\r\n  }\r\n\r\n  const text = archy({\r\n    label: chalk.magenta('Available Tasks'),\r\n    nodes\r\n  });\r\n\r\n  console.log(text);\r\n}\r\n\r\nasync function describeTasks(name: string, tasks: LoadedConfigTask): Promise<Data> {\r\n  const nodes = [];\r\n  tasks = forceArray(await tasks);\r\n\r\n  for (let task of tasks) {\r\n    const processors = await resolveTaskOptions(task, true);\r\n\r\n    for (const processor of processors) {\r\n      if (typeof processor === 'function') {\r\n        nodes.push(\r\n          await describeTasks((processor as Function).name, processor)\r\n        );\r\n      } else {\r\n        nodes.push(...await describeProcessor(processor));\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    label: chalk.cyan(name),\r\n    nodes\r\n  };\r\n}\r\n\r\nasync function describeProcessor(processor: ProcessorInterface): Promise<string[]> {\r\n  const results = await processor.preview();\r\n\r\n  return Promise.all(results.map((result) => describeProcessorPreview(result)));\r\n}\r\n\r\nasync function describeProcessorPreview(preview: ProcessorPreview): Promise<string> {\r\n  const str = [];\r\n\r\n  const { input: entry, output, extra } = preview;\r\n\r\n  // Input\r\n  const inputStr = chalk.yellow(entry);\r\n  // if (typeof entry === 'string') {\r\n  //   inputStr = chalk.yellow(entry);\r\n  // } else if (Array.isArray(entry)) {\r\n  //   inputStr = chalk.yellow(entry.join(', '));\r\n  // } else if (typeof entry === 'object') {\r\n  //   inputStr = chalk.yellow(Object.values(entry).join(', '));\r\n  // }\r\n  str.push(`Input: ${inputStr}`);\r\n\r\n  // Output\r\n  // if (output) {\r\n  //   const outputs = Array.isArray(output) ? output : [output];\r\n  //   outputs.forEach((output, index) => {\r\n  //     let outStr = '';\r\n  //     if (output.file) {\r\n  //       outStr = chalk.green(output.file);\r\n  //     } else if (output.dir) {\r\n  //       outStr = chalk.green(output.dir);\r\n  //     }\r\n  //     str.push(`Output[${index}]: ${outStr}`);\r\n  //   });\r\n  // }\r\n\r\n  const outStr = chalk.green(output);\r\n  str.push(`Output: ${outStr}`);\r\n\r\n  return str.join(\" - \");\r\n}\r\n\r\nfunction countTask(task: MaybeArray<UserConfig>) {\r\n  if (Array.isArray(task)) {\r\n    return task.length;\r\n  }\r\n\r\n  return 1;\r\n}\r\n","import { ProcessorInterface } from '@/processors/ProcessorInterface.ts';\r\nimport chalk from 'chalk';\r\nimport { uniq } from 'lodash-es';\r\nimport { MaybeArray } from 'rollup';\r\nimport { resolveTaskOptions } from '@/runner/config';\r\nimport { LoadedConfigTask, RunningTasks } from '@/types/runner';\r\nimport { UserConfig } from 'vite';\r\n\r\nexport function selectRunningTasks(\r\n  input: string[],\r\n  tasks: Record<string, LoadedConfigTask>\r\n): Record<string, LoadedConfigTask> {\r\n  input = uniq(input);\r\n\r\n  if (input.length === 0) {\r\n    input.push('default');\r\n  }\r\n\r\n  const selected: Record<string, LoadedConfigTask> = {};\r\n\r\n  for (const name of input) {\r\n    if (tasks[name]) {\r\n      selected[name] = tasks[name];\r\n    } else {\r\n      throw new Error(`Task \"${chalk.cyan(name)}\" not found in fusion config.`);\r\n    }\r\n  }\r\n\r\n  return selected;\r\n}\r\n\r\nexport async function resolveAllTasksAsProcessors(tasks: Record<string, LoadedConfigTask>): Promise<RunningTasks> {\r\n  const cache: Record<string, MaybeArray<LoadedConfigTask>> = {};\r\n  const allTasks: RunningTasks = {};\r\n\r\n  for (const name in tasks) {\r\n    const task = tasks[name];\r\n\r\n    allTasks[name] = (await resolveTaskAsFlat(name, task, cache));\r\n  }\r\n\r\n  return allTasks;\r\n}\r\n\r\nexport async function resolveTaskAsFlat(\r\n  name: string,\r\n  task: LoadedConfigTask,\r\n  cache: Record<string, MaybeArray<LoadedConfigTask>>\r\n): Promise<ProcessorInterface[]> {\r\n  const results: ProcessorInterface[] = [];\r\n\r\n  if (Array.isArray(task)) {\r\n    for (const n in task) {\r\n      const t = task[n];\r\n      results.push(...await resolveTaskAsFlat(n, t, cache));\r\n    }\r\n  } else if (typeof task === 'function') {\r\n    name = task.name || name;\r\n\r\n    if (cache[name]) {\r\n      return [];\r\n    }\r\n\r\n    cache[name] = task;\r\n\r\n    const resolved = await resolveTaskOptions(task, true);\r\n\r\n    if (Array.isArray(resolved)) {\r\n      for (const n in resolved) {\r\n        const t = resolved[n];\r\n        results.push(...await resolveTaskAsFlat(n, t, cache));\r\n      }\r\n    }\r\n  } else {\r\n    results.push(await task);\r\n  }\r\n\r\n  return results;\r\n}\r\n","export * from '@/dep';\r\nimport ConfigBuilder from '@/builder/ConfigBuilder.ts';\r\nimport { prepareParams } from '@/params';\r\nimport { getArgsAfterDoubleDashes, parseArgv } from '@/runner/app';\r\nimport { expandModules, loadConfigFile, mustGetAvailableConfigFile } from '@/runner/config';\r\nimport { displayAvailableTasks } from '@/runner/describe.ts';\r\nimport { resolveAllTasksAsProcessors, selectRunningTasks } from '@/runner/tasks.ts';\r\nimport { FusionVitePluginOptions, FusionVitePluginUnresolved, LoadedConfigTask } from '@/types';\r\nimport { forceArray } from '@/utilities/arr.ts';\r\nimport { copyFilesAndLog, linkFilesAndLog, moveFilesAndLog } from '@/utilities/fs.ts';\r\nimport { resolve } from 'node:path';\r\nimport { Logger, mergeConfig, PluginOption, UserConfig } from 'vite';\r\n\r\nconst params = parseArgv(getArgsAfterDoubleDashes(process.argv));\r\nprepareParams(params);\r\n\r\nexport let builder: ConfigBuilder;\r\n\r\nconst originalTasks = params._;\r\n\r\nexport function useFusion(fusionOptions: FusionVitePluginUnresolved = {}, tasks?: string | string[]): PluginOption {\r\n  let logger: Logger;\r\n\r\n  const options = prepareFusionOptions(fusionOptions);\r\n\r\n  if (tasks !== undefined || (Array.isArray(tasks) && tasks.length > 0)) {\r\n    params._ = forceArray(tasks);\r\n  } else {\r\n    params._ = originalTasks;\r\n  }\r\n\r\n  if (options.cwd !== undefined) {\r\n    params.cwd = options.cwd;\r\n  }\r\n\r\n  return [\r\n    {\r\n      name: 'fusion',\r\n      configResolved(config) {\r\n        logger = config.logger;\r\n      },\r\n      async config(config, env) {\r\n        let root: string;\r\n\r\n        if (config.root) {\r\n          root = resolve(config.root);\r\n        } else {\r\n          root = params.cwd || process.cwd();\r\n        }\r\n\r\n        delete config.root;\r\n        // delete builder.config.root;\r\n\r\n        process.chdir(root);\r\n\r\n        builder = new ConfigBuilder(config, env, params);\r\n\r\n        // Retrieve config file\r\n        let tasks: Record<string, LoadedConfigTask>;\r\n\r\n        if (typeof options.fusionfile === 'string' || !options.fusionfile) {\r\n          params.config ??= options.fusionfile;\r\n          const configFile = mustGetAvailableConfigFile(root, params);\r\n\r\n          // Load config\r\n          tasks = await loadConfigFile(configFile);\r\n        } else if (typeof options.fusionfile === 'function') {\r\n          tasks = expandModules(await options.fusionfile());\r\n        } else {\r\n          tasks = expandModules(options.fusionfile);\r\n        }\r\n\r\n        // Describe tasks\r\n        if (params.list) {\r\n          await displayAvailableTasks(tasks);\r\n          return;\r\n        }\r\n\r\n        // Select running tasks\r\n        const selectedTasks = selectRunningTasks([...params._] as string[], tasks);\r\n\r\n        const runningTasks = (await resolveAllTasksAsProcessors(selectedTasks));\r\n\r\n        for (const taskName in runningTasks) {\r\n          const processors = runningTasks[taskName];\r\n\r\n          for (const processor of processors) {\r\n            await processor.config(taskName, builder);\r\n          }\r\n        }\r\n\r\n        builder.merge(ConfigBuilder.globalOverrideConfig);\r\n        builder.merge(builder.overrideConfig);\r\n\r\n        // If no input, delete it.\r\n        if (Object.keys(builder.config.build!.rollupOptions!.input!)?.length === 0) {\r\n          delete builder.config.build!.rollupOptions!.input;\r\n        }\r\n\r\n        // console.log('plugin bottom', builder.config);\r\n        //\r\n        // show(builder.overrideConfig, 15)\r\n        // show(builder.config, 15)\r\n\r\n        return builder.config;\r\n      },\r\n    },\r\n    {\r\n      name: 'fusion:post-handles',\r\n      async writeBundle(options, bundle) {\r\n        // Todo: override logger to replace vite's files logs\r\n        // @see https://github.com/windwalker-io/core/issues/1355\r\n        await moveFilesAndLog(builder.moveTasks, options.dir ?? process.cwd(), logger);\r\n        await copyFilesAndLog(builder.copyTasks, options.dir ?? process.cwd(), logger);\r\n        await linkFilesAndLog(builder.linkTasks, options.dir ?? process.cwd(), logger);\r\n\r\n        for (const callback of builder.postBuildCallbacks) {\r\n          await callback();\r\n        }\r\n      },\r\n    },\r\n  ];\r\n}\r\n\r\nfunction prepareFusionOptions(options: FusionVitePluginUnresolved): FusionVitePluginOptions {\r\n  if (typeof options === 'string') {\r\n    return {\r\n      fusionfile: options,\r\n    };\r\n  }\r\n\r\n  if (typeof options === 'function') {\r\n    return {\r\n      fusionfile: options,\r\n    };\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\nexport function mergeViteConfig(config: UserConfig | null) {\r\n  // if (config === null) {\r\n  //   ConfigBuilder.globalOverrideConfig = {};\r\n  //   return;\r\n  // }\r\n  //\r\n  // ConfigBuilder.globalOverrideConfig = mergeConfig(ConfigBuilder.globalOverrideConfig, config);\r\n  if (config === null) {\r\n    builder.overrideConfig = {};\r\n    return;\r\n  }\r\n\r\n  builder.overrideConfig = mergeConfig(ConfigBuilder.globalOverrideConfig, config);\r\n}\r\n\r\nexport function outDir(outDir: string) {\r\n  // ConfigBuilder.globalOverrideConfig = mergeConfig<UserConfig, UserConfig>(ConfigBuilder.globalOverrideConfig, {\r\n  //   build: {\r\n  //     outDir\r\n  //   }\r\n  // });\r\n  builder.overrideConfig = mergeConfig<UserConfig, UserConfig>(builder.overrideConfig, {\r\n    build: {\r\n      outDir\r\n    }\r\n  });\r\n}\r\n\r\nexport function alias(src: string, dest: string) {\r\n  builder.overrideConfig = mergeConfig<UserConfig, UserConfig>(builder.overrideConfig, {\r\n    resolve: {\r\n      alias: {\r\n        [src]: dest\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport function external(match: string, varName?: string) {\r\n  const globals: Record<string, string> = {};\r\n\r\n  if (varName) {\r\n    globals[match] = varName;\r\n  }\r\n\r\n  builder.overrideConfig = mergeConfig<UserConfig, UserConfig>(builder.overrideConfig, {\r\n    build: {\r\n      rollupOptions: {\r\n        external: [match],\r\n        output: {\r\n          globals\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n"],"names":["forceArray","item","handleMaybeArray","items","callback","css","input","output","options","CssProcessor","taskName","builder","task","assetInfo","name","basename","parse","js","JsProcessor","chunkInfo","move","dest","MoveProcessor","copy","CopyProcessor","link","LinkProcessor","params","prepareParams","p","isVerbose","isProd","isDev","isWindows","shortHash","bufferOrString","short","hash","Crypto","handleFilesOperation","src","promises","normalizeFilePath","base","getBaseFromPattern","sources","isGlob","fg","source","dir","resolvedDest","endsWithSlash","relative","dirname","fs","moveFilesAndLog","tasks","outDir","logger","ps","copyFilesAndLog","linkFilesAndLog","symlink","target","force","path","pattern","specialChars","idx","c","resolve","isAbsolute","BuildTask","group","normalize","ext","uniqueId","show","data","depth","inspect","ConfigBuilder","config","env","mergeConfig","override","entryFileNamesCallback","chunkFileNamesCallback","assetFileNamesCallback","def","get","set","value","inputOptions","plugin","to","getArgsAfterDoubleDashes","argv","v","parseArgv","app","yargs","loadConfigFile","configFile","winPath","build","code","writeFileSync","m","Module","expandModules","modules","resolveTaskOptions","resolveSubFunctions","resolvePromisesToFlatArray","resolvedTasks","returnTasks","resolvedTask","mustGetAvailableConfigFile","root","found","getAvailableConfigFile","existsSync","getConfigModuleType","isConfigTypeScript","findDefaultConfig","file","type","displayAvailableTasks","keys","a","b","nodes","key","describeTasks","text","archy","chalk","processors","processor","describeProcessor","results","result","describeProcessorPreview","preview","str","entry","extra","inputStr","outStr","selectRunningTasks","uniq","selected","resolveAllTasksAsProcessors","cache","allTasks","resolveTaskAsFlat","n","t","resolved","originalTasks","useFusion","fusionOptions","prepareFusionOptions","selectedTasks","runningTasks","bundle","mergeViteConfig","alias","external","match","varName","globals"],"mappings":"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"}