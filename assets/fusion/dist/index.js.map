{"version":3,"file":"index.js","sources":["../src/enum/MinifyOptions.ts","../src/utilities/arr.ts","../src/utilities/output.ts","../src/utilities/utilities.ts","../src/utilities/vite.ts","../src/processors/css.ts","../src/processors/js.ts","../src/runner/build.ts","../src/runner/config.ts","../src/runner/describe.ts","../src/runner/tasks.ts","../src/runner/app.ts","../src/index.ts"],"sourcesContent":["export enum MinifyOptions {\r\n  NONE = 'none',\r\n  SAME_FILE = 'same_file',\r\n  SEPARATE_FILE = 'separate_file',\r\n}\r\n","import { MaybeArray } from 'rollup';\r\n\r\nexport function forceArray<T>(item: T | T[]): T[] {\r\n  if (Array.isArray(item)) {\r\n    return item;\r\n  } else {\r\n    return [item];\r\n  }\r\n}\r\n\r\n\r\nexport function handleMaybeArray<T, R>(\r\n  items: T | T[],\r\n  callback: (item: T) => R\r\n): T extends any[] ? R[] : R {\r\n  if (Array.isArray(items)) {\r\n    return items.map(callback) as any;\r\n  } else {\r\n    return callback(items as T) as any;\r\n  }\r\n}\r\n\r\nexport function appendToMaybeArray<T>(items: MaybeArray<T>, value: T): T[] {\r\n  if (Array.isArray(items)) {\r\n    items.push(value);\r\n\r\n    return items;\r\n  } else {\r\n    return [items, value];\r\n  }\r\n}\r\n","import { TaskOutput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr';\r\nimport { MaybeArray, OutputOptions } from 'rollup';\r\nimport { dirname, normalize } from 'node:path';\r\n\r\nexport function normalizeOutputs(\r\n  output: TaskOutput,\r\n  defaultOptions: Record<string, any> = {}\r\n): OutputOptions[] {\r\n  output = handleMaybeArray(output, (output) => {\r\n    if (typeof output === 'string') {\r\n      if (output.endsWith('/')) {\r\n        output = {\r\n          dir: output,\r\n          ...defaultOptions\r\n        };\r\n      } else {\r\n        output = {\r\n          dir: dirname(output),\r\n          // Get file name with node library, consider Windows\r\n          entryFileNames: normalize(output).replace(/\\\\/g, '/').split('/').pop(),\r\n          ...defaultOptions\r\n        };\r\n      }\r\n    }\r\n\r\n    return output;\r\n  });\r\n\r\n  return forceArray(output);\r\n}\r\n\r\nfunction normalizeOutputObject(output: OutputOptions | string, defaultOptions: Record<string, any> = {}) {\r\n  if (typeof output === 'string') {\r\n    if (output.endsWith('/')) {\r\n      output = {\r\n        dir: output,\r\n        ...defaultOptions\r\n      };\r\n    } else {\r\n      output = {\r\n        file: output,\r\n        ...defaultOptions\r\n      };\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","import { handleMaybeArray } from '@/utilities/arr';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { MaybeArray, OutputOptions } from 'rollup';\r\nimport { OverrideOptions } from '@/types';\r\nimport { UserConfig } from 'vite';\r\n\r\nexport function mergeOptions<T = UserConfig>(\r\n  base: Partial<T> | undefined,\r\n  ...overrides: (OverrideOptions<T> | undefined)[]\r\n): Partial<T> {\r\n  base ??= {};\r\n\r\n  if (!overrides.length) {\r\n    return base;\r\n  }\r\n\r\n  for (const override of overrides) {\r\n    if (!override) {\r\n      continue;\r\n    }\r\n\r\n    if (typeof override === 'function') {\r\n      base = override(base) ?? base;\r\n    } else {\r\n      base = { ...base, ...override };\r\n    }\r\n  }\r\n\r\n  return base;\r\n}\r\n\r\nexport function appendMinFileName(output: OutputOptions): OutputOptions {\r\n  output = cloneDeep(output);\r\n\r\n  if (output.file) {\r\n    const parts = output.file.split('.');\r\n    const ext = parts.pop();\r\n    output.file = `${parts.join('.')}.min.${ext}`;\r\n  } else if (output.dir && typeof output.entryFileNames === 'string') {\r\n    const parts = output.entryFileNames.split('.');\r\n    const ext = parts.pop();\r\n    output.entryFileNames = `${parts.join('.')}.min.${ext}`;\r\n  }\r\n\r\n  return output;\r\n}\r\n","import { OverrideOptions, TaskInput } from '@/types';\r\nimport { mergeOptions } from '@/utilities/utilities';\r\nimport { MaybeArray, OutputOptions } from 'rollup';\r\nimport { defineConfig, LibraryOptions, UserConfig } from 'vite';\r\n\r\nexport function defineAllConfigs(configs: UserConfig[]) {\r\n  return configs.map(defineConfig);\r\n}\r\n\r\nexport function createViteLibOptions(input: TaskInput, extraOptions?: OverrideOptions<LibraryOptions>): LibraryOptions {\r\n  return mergeOptions<LibraryOptions>(\r\n    {\r\n      entry: input,\r\n    },\r\n    extraOptions\r\n  ) as LibraryOptions;\r\n}\r\n\r\nexport function createViteOptions(\r\n  lib?: LibraryOptions,\r\n  output?: MaybeArray<OutputOptions>,\r\n  override?: OverrideOptions<UserConfig>\r\n): Partial<UserConfig> {\r\n  return mergeOptions(\r\n    {\r\n      build: {\r\n        lib,\r\n        rollupOptions: {\r\n          output,\r\n        },\r\n        emptyOutDir: false,\r\n        target: 'esnext',\r\n      },\r\n    },\r\n    override\r\n  );\r\n}\r\n\r\n","import { MinifyOptions } from '@/enum';\r\nimport { isVerbose } from '@/index';\r\nimport { CssOptions, OverrideOptions, TaskInput, TaskOutput } from '@/types';\r\nimport { forceArray } from '@/utilities/arr';\r\nimport { normalizeOutputs } from '@/utilities/output';\r\nimport { appendMinFileName, mergeOptions } from '@/utilities/utilities';\r\nimport { createViteOptions } from '@/utilities/vite';\r\nimport autoprefixer from 'autoprefixer';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport type { AcceptedPlugin, ProcessOptions } from 'postcss';\r\nimport { MaybeArray, OutputOptions } from 'rollup';\r\nimport { UserConfig } from 'vite';\r\n\r\nexport async function css(\r\n  input: TaskInput,\r\n  output: TaskOutput,\r\n  options: CssOptions = {}\r\n): Promise<MaybeArray<UserConfig>> {\r\n  options.verbose ??= isVerbose;\r\n\r\n  let outputs = normalizeOutputs(output, { format: 'es' });\r\n\r\n  const all = [];\r\n\r\n  for (const output of outputs) {\r\n    const opt = createOptions(\r\n      input,\r\n      outputs,\r\n      options,\r\n      (config) => {\r\n        config.build!.minify = options.minify === MinifyOptions.SAME_FILE ? 'esbuild' : false;\r\n        config.build!.cssMinify = options.minify === MinifyOptions.SAME_FILE ? 'esbuild' : false;\r\n\r\n        return config;\r\n      },\r\n    );\r\n\r\n    all.push(mergeOptions(opt, options?.vite));\r\n\r\n    if (options?.minify === MinifyOptions.SEPARATE_FILE) {\r\n      const minOutput = appendMinFileName(output);\r\n\r\n      const opt = createOptions(\r\n        input,\r\n        minOutput,\r\n        options,\r\n        (config) => {\r\n          config.build!.minify = 'esbuild';\r\n          config.build!.cssMinify = 'esbuild';\r\n\r\n          return config;\r\n        },\r\n      );\r\n\r\n      all.push(mergeOptions(opt, options?.vite));\r\n    }\r\n  }\r\n\r\n  return all;\r\n}\r\n\r\nfunction createOptions(\r\n  input: TaskInput,\r\n  output: MaybeArray<OutputOptions>,\r\n  options: CssOptions,\r\n  override?: OverrideOptions<UserConfig>\r\n): Partial<UserConfig> {\r\n  output = cloneDeep(output);\r\n\r\n  const config = createViteOptions(\r\n    undefined,\r\n    output,\r\n    (config) => {\r\n      config.build!.rollupOptions!.input = input;\r\n      config.build!.emptyOutDir = options.clean ?? false;\r\n\r\n      for (const o of forceArray(config.build!.rollupOptions!.output) as OutputOptions[]) {\r\n        o.assetFileNames = String(o.entryFileNames);\r\n\r\n        delete o.entryFileNames;\r\n      }\r\n\r\n      config.build!.cssCodeSplit = true;\r\n      config.css = {\r\n        // modules: {\r\n        //   scopeBehaviour: 'global', // 或是 'global'\r\n        // },\r\n        transformer: 'postcss',\r\n        postcss: mergeOptions<ProcessOptions & AcceptedPlugin>(\r\n          {\r\n            plugins: [\r\n              autoprefixer({ overrideBrowserslist: options.browserslist })\r\n            ]\r\n          },\r\n          options.postcss\r\n        ),\r\n      };\r\n\r\n      return config;\r\n    }\r\n  );\r\n\r\n  return mergeOptions(\r\n    config,\r\n    override,\r\n    options.vite\r\n  );\r\n}\r\n","import { MinifyOptions } from '@/enum';\r\nimport { isVerbose } from '@/index';\r\nimport { JsOptions, TaskInput, TaskOutput } from '@/types';\r\nimport { normalizeOutputs } from '@/utilities/output';\r\nimport { appendMinFileName, mergeOptions } from '@/utilities/utilities';\r\nimport { createViteLibOptions, createViteOptions } from '@/utilities/vite';\r\nimport { OutputOptions } from 'rollup';\r\nimport { ESBuildOptions, UserConfig } from 'vite';\r\n\r\nexport async function js(input: TaskInput, output: TaskOutput, options: JsOptions = {}): Promise<UserConfig[]> {\r\n  const esbuild = mergeOptions<ESBuildOptions>(\r\n    {\r\n      target: options?.target || 'esnext',\r\n    },\r\n    options?.esbuild\r\n  );\r\n\r\n  // if (typeof options.tsconfig === 'string') {\r\n  //   esbuild.tsconfig = options.tsconfig;\r\n  // } else if (typeof options.tsconfig === 'object') {\r\n  //   esbuild.tsconfigRaw = options.tsconfig;\r\n  // }\r\n\r\n  return useJsProcessor(\r\n    output,\r\n    options,\r\n    (output, isMinify) => {\r\n      if (isMinify) {\r\n        return createViteOptions(\r\n          createViteLibOptions(input),\r\n          output,\r\n          (config) => {\r\n            config.build!.minify = 'esbuild';\r\n            config.build!.emptyOutDir = options.clean || false;\r\n            config.build!.target = options.target || 'esnext';\r\n            config.esbuild = esbuild;\r\n\r\n            return config;\r\n          }\r\n        );\r\n      }\r\n\r\n      return createViteOptions(\r\n        createViteLibOptions(input),\r\n        output,\r\n        (config) => {\r\n          config.build!.minify = options?.minify === MinifyOptions.SAME_FILE ? 'esbuild' : false;\r\n          config.build!.emptyOutDir = options.clean || false;\r\n          config.build!.target = options.target || 'esnext';\r\n          config.esbuild = esbuild;\r\n\r\n          return config;\r\n        }\r\n      );\r\n    }\r\n  );\r\n}\r\n\r\nfunction useJsProcessor(\r\n  output: TaskOutput,\r\n  options: JsOptions,\r\n  createOptions: (outputs: OutputOptions[], isMinify: boolean) => UserConfig\r\n) {\r\n  options.verbose ??= isVerbose;\r\n\r\n  const outputs = normalizeOutputs(output, { format: options?.format || 'es' });\r\n\r\n  for (const output of outputs) {\r\n    if (output.format === 'umd') {\r\n      output.name = options?.umdName;\r\n    }\r\n  }\r\n\r\n  const all: UserConfig[] = [];\r\n\r\n  const opt = createOptions(outputs, false);\r\n  all.push(mergeOptions(opt, options.vite));\r\n\r\n  if (options?.minify === MinifyOptions.SEPARATE_FILE) {\r\n    const minOutputs = outputs.map((output) => {\r\n      return appendMinFileName(output);\r\n    });\r\n\r\n    const minOptions = createOptions(minOutputs, true);\r\n\r\n    all.push(mergeOptions(minOptions, options?.vite));\r\n  }\r\n\r\n  return all;\r\n}\r\n","import { RunnerCliParams, RunningTasks } from '@/types';\r\nimport chalk from 'chalk';\r\nimport { type rollup, RollupWatcher, watch } from 'rollup';\r\nimport { build, defineConfig, mergeConfig, type UserConfig, type UserConfigExport } from 'vite';\r\n\r\nexport async function buildAll(runningTasks: RunningTasks, params: RunnerCliParams) {\r\n  const all = [];\r\n\r\n  for (const name in runningTasks) {\r\n    const promises = [];\r\n    const configList = runningTasks[name];\r\n\r\n    console.log(`▶️ - ${chalk.cyan(name)} Start...`);\r\n\r\n    for (const config of configList) {\r\n      const output = build(defineConfig(config));\r\n\r\n      if (params.series) {\r\n        await output;\r\n      }\r\n\r\n      promises.push(output);\r\n    }\r\n\r\n    const allPromise = Promise.all(promises).then(() => {\r\n      console.log(`✅ - ${chalk.cyan(name)} completed.`);\r\n    });\r\n\r\n    if (params.series) {\r\n      await allPromise;\r\n    }\r\n\r\n    all.push(allPromise);\r\n  }\r\n\r\n  await Promise.all(all);\r\n}\r\nexport async function watchAll(runningTasks: RunningTasks, params: RunnerCliParams) {\r\n  const all = [];\r\n  const watcherPromises: Promise<RollupWatcher>[] = [];\r\n\r\n  for (const name in runningTasks) {\r\n    const promises = [];\r\n    const configList = runningTasks[name];\r\n\r\n    console.log(`▶️ - ${chalk.cyan(name)} Start...`);\r\n\r\n    for (const config of configList) {\r\n      const watcher = build(\r\n        mergeConfig(\r\n          defineConfig(config),\r\n          {\r\n            build: { watch: {} },\r\n          }\r\n        )\r\n      ) as Promise<RollupWatcher>;\r\n\r\n      watcher.then((watcher) => {\r\n        watcher.on(\"event\", (e) => {\r\n          switch (e.code) {\r\n            case \"START\":\r\n              console.log(\"→ Start Watching...\");\r\n              break;\r\n            case \"BUNDLE_START\":\r\n              console.log(\"→ Start Bundling...\");\r\n              break;\r\n            case \"BUNDLE_END\":\r\n              console.log(`✔ Bundled, uses ${e.duration}ms`);\r\n              // Must manually close it.\r\n              e.result?.close();\r\n              break;\r\n            case \"END\":\r\n              console.log(\"Watching...\");\r\n              break;\r\n            case \"ERROR\":\r\n              console.error(\"✖ ERROR: \", e.error);\r\n              break;\r\n          }\r\n        });\r\n      });\r\n\r\n      watcherPromises.push(watcher);\r\n    }\r\n  }\r\n\r\n  const watchers: RollupWatcher[] = await Promise.all(watcherPromises);\r\n\r\n  process.on(\"SIGINT\", async () => {\r\n    for (const watcher of watchers) {\r\n      await watcher.close();\r\n    }\r\n    console.log(\"\\n🛑 STOP Watching...\");\r\n    process.exit(0);\r\n  });\r\n}\r\n\r\n","import { existsSync } from 'node:fs';\r\nimport { isAbsolute, resolve } from 'node:path';\r\nimport { MaybeArray, MaybePromise } from 'rollup';\r\nimport { UserConfig } from 'vite';\r\nimport { ConfigResult, LoadedConfigTask, RunnerCliParams } from '../types/runner';\r\n\r\nexport async function loadConfigFile(configFile: ConfigResult): Promise<Record<string, LoadedConfigTask>> {\r\n  let path = configFile.path;\r\n\r\n  // If is Windows, Add \"file://\" prefix to path\r\n  if (process.platform === 'win32') {\r\n    // Replace backslash to slash\r\n    const winPath = path.replace(/\\\\/g, '/');\r\n    // Add file:// prefix if not exists\r\n    if (!winPath.startsWith('file://')) {\r\n      // Add extra slash to make it absolute path\r\n      // e.g. C:/path/to/file\r\n      // becomes file:///C:/path/to/file\r\n      path = `file:///${winPath}`;\r\n    }\r\n  }\r\n\r\n  const modules = await import(path);\r\n\r\n  return { ...modules };\r\n}\r\n\r\nexport async function resolveTaskOptions(task: LoadedConfigTask, resolveSubFunctions = false): Promise<UserConfig[]> {\r\n  if (!resolveSubFunctions && Array.isArray(task)) {\r\n    const results = await Promise.all(task.map((task) => resolveTaskOptions(task, true)));\r\n    return results.flat();\r\n  }\r\n\r\n  if (typeof task === 'function') {\r\n    return resolvePromisesToFlatArray(await task(), task?.name);\r\n  }\r\n\r\n  return resolvePromisesToFlatArray((await task) as MaybeArray<UserConfig>, task?.name);\r\n}\r\n\r\nasync function resolvePromisesToFlatArray(tasks: MaybeArray<MaybePromise<UserConfig>>, name?: string) {\r\n  if (!Array.isArray(tasks)) {\r\n    return [await tasks];\r\n  }\r\n\r\n  const resolvedTasks = await Promise.all(tasks);\r\n  const returnTasks = [];\r\n\r\n  for (const resolvedTask of resolvedTasks) {\r\n    if (Array.isArray(resolvedTask)) {\r\n      returnTasks.push(...resolvedTask);\r\n    } else {\r\n      returnTasks.push(resolvedTask);\r\n    }\r\n  }\r\n\r\n  return returnTasks;\r\n}\r\n\r\nexport function mustGetAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult {\r\n  const found = getAvailableConfigFile(root, params);\r\n\r\n  if (!found) {\r\n    throw new Error('No config file found. Please create a fusionfile.js or fusionfile.ts in the root directory.');\r\n  }\r\n\r\n  return found;\r\n}\r\n\r\nexport function getAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult | null {\r\n  let found = params?.config;\r\n\r\n  if (found) {\r\n    // If is not absolute of system path(consider Windows), prepend root\r\n    if (!isAbsolute(found)) {\r\n      found = resolve(root, found);\r\n    }\r\n\r\n    if (existsSync(found)) {\r\n      return {\r\n        path: found,\r\n        // get filename from file path\r\n        filename: found.split('/').pop() || '',\r\n        type: getConfigModuleType(found),\r\n        ts: isConfigTypeScript(found),\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  return findDefaultConfig(root);\r\n}\r\n\r\nexport function findDefaultConfig(root: string): ConfigResult | null {\r\n  let file = resolve(root, 'fusionfile.js');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'commonjs',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mjs');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.ts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getConfigModuleType(file: string) {\r\n  let type: 'commonjs' | 'module' | 'unknown' = 'unknown';\r\n\r\n  if (file.endsWith('.cjs')) {\r\n    type = 'commonjs';\r\n  } else if (file.endsWith('.mjs')) {\r\n    type = 'module';\r\n  } else if (file.endsWith('.ts') || file.endsWith('.mts')) {\r\n    type = 'module';\r\n  }\r\n\r\n  return type;\r\n}\r\n\r\nfunction isConfigTypeScript(file: string) {\r\n  return file.endsWith('.ts') || file.endsWith('.mts');\r\n}\r\n","import chalk from 'chalk';\r\nimport archy, { type Data } from 'archy';\r\nimport { shuffle } from 'lodash-es';\r\nimport { MaybeArray, OutputOptions, RollupOptions } from 'rollup';\r\nimport { LibraryOptions, UserConfig } from 'vite';\r\nimport { resolveTaskOptions } from './config';\r\nimport { LoadedConfigTask } from '../types/runner';\r\n\r\nexport async function displayAvailableTasks(tasks: Record<string, LoadedConfigTask>) {\r\n  const keys = Object.keys(tasks);\r\n\r\n  // Sort put default as first if exists\r\n  keys.sort((a, b) => {\r\n    if (a === 'default') {\r\n      return -1;\r\n    }\r\n\r\n    if (b === 'default') {\r\n      return 1;\r\n    }\r\n\r\n    return a.localeCompare(b);\r\n  });\r\n\r\n  const nodes: Array<Data | string> = [];\r\n\r\n  for (const key of keys) {\r\n    const task = tasks[key];\r\n    const taskOptions = await resolveTaskOptions(task, true);\r\n\r\n    nodes.push(await describeTasks(key, taskOptions));\r\n  }\r\n\r\n  const text = archy({\r\n    label: chalk.magenta('Available Tasks'),\r\n    nodes\r\n  });\r\n\r\n  console.log(text);\r\n}\r\n\r\nasync function describeTasks(name: string, tasks: MaybeArray<UserConfig>): Promise<Data> {\r\n  const nodes = [];\r\n  // console.log(name, tasks)\r\n  if (!Array.isArray(tasks)) {\r\n    tasks = [tasks]\r\n  }\r\n  \r\n  for (const task of tasks) {\r\n    if (typeof task === 'function') {\r\n      let taskOptions = await resolveTaskOptions(task, true);\r\n\r\n      nodes.push(\r\n        await describeTasks((task as Function).name, taskOptions)\r\n      );\r\n    } else {\r\n      nodes.push(describeTaskDetail(task));\r\n    }\r\n  }\r\n\r\n  return {\r\n    label: chalk.cyan(name),\r\n    nodes\r\n  };\r\n}\r\n\r\nfunction describeTaskDetail(task: UserConfig, indent: number = 4): string {\r\n  const str = [];\r\n\r\n  const lib = task.build?.lib;\r\n\r\n  // Input\r\n  if (lib && lib.entry) {\r\n    const entry = lib.entry;\r\n\r\n    let inputStr = '';\r\n    if (typeof entry === 'string') {\r\n      inputStr = chalk.yellow(entry);\r\n    } else if (Array.isArray(entry)) {\r\n      inputStr = chalk.yellow(entry.join(', '));\r\n    } else if (typeof entry === 'object') {\r\n      inputStr = chalk.yellow(Object.values(entry).join(', '));\r\n    }\r\n    str.push(`Input: ${inputStr}`);\r\n  }\r\n\r\n  const output = task.build?.rollupOptions?.output;\r\n\r\n  // Output\r\n  if (output) {\r\n    const outputs = Array.isArray(output) ? output : [output];\r\n    outputs.forEach((output, index) => {\r\n      let outStr = '';\r\n      if (output.file) {\r\n        outStr = chalk.green(output.file);\r\n      } else if (output.dir) {\r\n        outStr = chalk.green(output.dir);\r\n      }\r\n      str.push(`Output[${index}]: ${outStr}`);\r\n    });\r\n  }\r\n\r\n  return str.join(\" - \");\r\n}\r\n\r\nfunction countTask(task: MaybeArray<UserConfig>) {\r\n  if (Array.isArray(task)) {\r\n    return task.length;\r\n  }\r\n\r\n  return 1;\r\n}\r\n","import chalk from 'chalk';\r\nimport { uniq } from 'lodash-es';\r\nimport { MaybeArray } from 'rollup';\r\nimport { resolveTaskOptions } from '@/runner/config';\r\nimport { LoadedConfigTask, RunningTasks } from '@/types/runner';\r\nimport { UserConfig } from 'vite';\r\n\r\nexport function selectRunningTasks(\r\n  input: string[],\r\n  tasks: Record<string, LoadedConfigTask>\r\n): Record<string, LoadedConfigTask> {\r\n  input = uniq(input);\r\n\r\n  if (input.length === 0) {\r\n    input.push('default');\r\n  }\r\n\r\n  const selected: Record<string, LoadedConfigTask> = {};\r\n\r\n  for (const name of input) {\r\n    if (tasks[name]) {\r\n      selected[name] = tasks[name];\r\n    } else {\r\n      throw new Error(`Task \"${chalk.cyan(name)}\" not found in fusion config.`);\r\n    }\r\n  }\r\n\r\n  return selected;\r\n}\r\n\r\nexport async function resolveAllTasksAsOptions(tasks: Record<string, LoadedConfigTask>): Promise<RunningTasks> {\r\n  const cache: Record<string, MaybeArray<LoadedConfigTask>> = {};\r\n  const allTasks: RunningTasks = {};\r\n\r\n  for (const name in tasks) {\r\n    const task = tasks[name];\r\n\r\n    allTasks[name] = (await resolveTaskAsFlat(name, task, cache));\r\n  }\r\n\r\n  return allTasks;\r\n}\r\n\r\nexport async function resolveTaskAsFlat(\r\n  name: string,\r\n  task: LoadedConfigTask,\r\n  cache: Record<string, MaybeArray<LoadedConfigTask>>\r\n): Promise<UserConfig[]> {\r\n  const results: UserConfig[] = [];\r\n\r\n  if (Array.isArray(task)) {\r\n    for (const n in task) {\r\n      const t = task[n];\r\n      results.push(...await resolveTaskAsFlat(n, t, cache));\r\n    }\r\n  } else if (typeof task === 'function') {\r\n    name = task.name || name;\r\n\r\n    if (cache[name]) {\r\n      return [];\r\n    }\r\n\r\n    cache[name] = task;\r\n\r\n    const resolved = await resolveTaskOptions(task, true);\r\n\r\n    if (Array.isArray(resolved)) {\r\n      for (const n in resolved) {\r\n        const t = resolved[n];\r\n        results.push(...await resolveTaskAsFlat(n, t, cache));\r\n      }\r\n    }\r\n  } else {\r\n    results.push(await task);\r\n  }\r\n\r\n  return results;\r\n}\r\n","import { buildAll, watchAll } from '@/runner/build';\r\nimport { loadConfigFile, mustGetAvailableConfigFile } from '@/runner/config';\r\nimport { displayAvailableTasks } from '@/runner/describe';\r\nimport { resolveAllTasksAsOptions, selectRunningTasks } from '@/runner/tasks';\r\nimport { RunnerCliParams } from '@/types/runner';\r\nimport { defineAllConfigs } from '@/utilities/vite';\r\nimport { resolve } from 'node:path';\r\nimport { inspect } from 'node:util';\r\nimport yargs from 'yargs';\r\nimport { hideBin } from 'yargs/helpers';\r\n\r\nexport function parseArgv(): RunnerCliParams {\r\n  const app = yargs();\r\n\r\n  app.option('watch', {\r\n    alias: 'w',\r\n    type: 'boolean',\r\n    description: 'Watch files for changes and re-run the tasks',\r\n  });\r\n\r\n  app.option('cwd', {\r\n    type: 'string',\r\n    description: 'Current working directory',\r\n  });\r\n\r\n  app.option('list', {\r\n    alias: 'l',\r\n    type: 'boolean',\r\n    description: 'List all available tasks',\r\n  });\r\n\r\n  app.option('config', {\r\n    alias: 'c',\r\n    type: 'string',\r\n    description: 'Path to config file',\r\n  });\r\n\r\n  app.option('series', {\r\n    alias: 's',\r\n    type: 'boolean',\r\n    description: 'Run tasks in series instead of parallel',\r\n  });\r\n\r\n  app.option('verbose', {\r\n    alias: 'v',\r\n    type: 'count',\r\n    description: 'Increase verbosity of output. Use multiple times for more verbosity.',\r\n  });\r\n\r\n  return app.parseSync(hideBin(process.argv));\r\n}\r\n\r\nexport async function runApp(argv: RunnerCliParams) {\r\n  try {\r\n    await processApp(argv);\r\n\r\n    // Success exit\r\n    // process.exit(0);\r\n  } catch (e) {\r\n    if (e instanceof Error) {\r\n      if (argv.verbose && argv.verbose > 0) {\r\n        throw e;\r\n      } else {\r\n        console.error(e);\r\n        process.exit(1);\r\n      }\r\n    } else {\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function processApp(params: RunnerCliParams) {\r\n  let cwd = params?.cwd;\r\n  let root: string;\r\n\r\n  if (cwd) {\r\n    root = cwd = resolve(cwd);\r\n    process.chdir(cwd);\r\n  } else {\r\n    root = process.cwd();\r\n  }\r\n\r\n  // Retrieve config file\r\n  const configFile = mustGetAvailableConfigFile(root, params);\r\n\r\n  // Load config\r\n  const tasks = await loadConfigFile(configFile);\r\n\r\n  // Describe tasks\r\n  if (params.list) {\r\n    await displayAvailableTasks(tasks);\r\n    return;\r\n  }\r\n\r\n  // Select running tasks\r\n  const selectedTasks = selectRunningTasks([...params._] as string[], tasks);\r\n\r\n  const runningTasks = (await resolveAllTasksAsOptions(selectedTasks));\r\n\r\n  if (params.watch) {\r\n    await watchAll(runningTasks, params);\r\n  } else {\r\n    await buildAll(runningTasks, params);\r\n  }\r\n}\r\n","\r\nexport * from '@/dep';\r\nimport * as fusion from '@/dep';\r\nimport { parseArgv, runApp } from '@/runner/app';\r\nimport { RunnerCliParams } from '@/types/runner';\r\nimport { fileURLToPath } from 'node:url';\r\n\r\nlet params: RunnerCliParams | undefined = undefined;\r\n\r\nconst isCliRunning = process.argv[1] && fileURLToPath(import.meta.url) === process.argv[1];\r\n\r\nexport default {\r\n  ...fusion,\r\n  params,\r\n};\r\n\r\nif (isCliRunning) {\r\n  params = parseArgv();\r\n\r\n  runApp(params);\r\n}\r\n\r\nconst isVerbose = params?.verbose ? params?.verbose > 0 : false;\r\n\r\nexport { isVerbose };\r\n"],"names":["MinifyOptions","forceArray","item","handleMaybeArray","items","callback","normalizeOutputs","output","defaultOptions","dirname","normalize","mergeOptions","base","overrides","override","appendMinFileName","cloneDeep","parts","ext","createViteLibOptions","input","extraOptions","createViteOptions","lib","css","options","isVerbose","outputs","all","opt","createOptions","config","minOutput","o","autoprefixer","js","esbuild","useJsProcessor","isMinify","minOutputs","minOptions","buildAll","runningTasks","params","name","promises","configList","chalk","build","defineConfig","allPromise","watchAll","watcherPromises","watcher","mergeConfig","e","watchers","loadConfigFile","configFile","path","winPath","resolveTaskOptions","task","resolveSubFunctions","resolvePromisesToFlatArray","tasks","resolvedTasks","returnTasks","resolvedTask","mustGetAvailableConfigFile","root","found","getAvailableConfigFile","isAbsolute","resolve","existsSync","getConfigModuleType","isConfigTypeScript","findDefaultConfig","file","type","displayAvailableTasks","keys","a","b","nodes","key","taskOptions","describeTasks","text","archy","describeTaskDetail","indent","str","entry","inputStr","index","outStr","selectRunningTasks","uniq","selected","resolveAllTasksAsOptions","cache","allTasks","resolveTaskAsFlat","results","t","resolved","n","parseArgv","app","yargs","hideBin","runApp","argv","processApp","cwd","selectedTasks","isCliRunning","fileURLToPath","fusion"],"mappings":"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"}