{"version":3,"file":"index.js","sources":["../src/enum/MinifyOptions.ts","../src/utilities/arr.ts","../src/utilities/output.ts","../src/utilities/utilities.ts","../src/utilities/vite.ts","../src/processors/css.ts","../src/plugins/clean.ts","../src/processors/js.ts","../src/runner/build.ts","../src/runner/config.ts","../src/runner/describe.ts","../src/runner/tasks.ts","../src/runner/run.ts","../src/index.ts"],"sourcesContent":["export enum MinifyOptions {\r\n  NONE = 'none',\r\n  SAME_FILE = 'same_file',\r\n  SEPARATE_FILE = 'separate_file',\r\n}\r\n","import { MaybeArray } from 'rollup';\r\n\r\nexport function forceArray<T>(item: T | T[]): T[] {\r\n  if (Array.isArray(item)) {\r\n    return item;\r\n  } else {\r\n    return [item];\r\n  }\r\n}\r\n\r\n\r\nexport function handleMaybeArray<T, R>(\r\n  items: T | T[],\r\n  callback: (item: T) => R\r\n): T extends any[] ? R[] : R {\r\n  if (Array.isArray(items)) {\r\n    return items.map(callback) as any;\r\n  } else {\r\n    return callback(items as T) as any;\r\n  }\r\n}\r\n\r\nexport function appendToMaybeArray<T>(items: MaybeArray<T>, value: T): T[] {\r\n  if (Array.isArray(items)) {\r\n    items.push(value);\r\n\r\n    return items;\r\n  } else {\r\n    return [items, value];\r\n  }\r\n}\r\n","import { TaskOutput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr';\r\nimport { MaybeArray, OutputOptions } from 'rollup';\r\nimport { dirname, normalize } from 'node:path';\r\n\r\nexport function normalizeOutputs(\r\n  output: TaskOutput,\r\n  defaultOptions: Record<string, any> = {}\r\n): OutputOptions[] {\r\n  output = handleMaybeArray(output, (output) => {\r\n    if (typeof output === 'string') {\r\n      if (output.endsWith('/')) {\r\n        output = {\r\n          dir: output,\r\n          ...defaultOptions\r\n        };\r\n      } else {\r\n        output = {\r\n          dir: dirname(output),\r\n          // Get file name with node library, consider Windows\r\n          entryFileNames: normalize(output).replace(/\\\\/g, '/').split('/').pop(),\r\n          ...defaultOptions\r\n        };\r\n      }\r\n    }\r\n\r\n    return output;\r\n  });\r\n\r\n  return forceArray(output);\r\n}\r\n\r\nfunction normalizeOutputObject(output: OutputOptions | string, defaultOptions: Record<string, any> = {}) {\r\n  if (typeof output === 'string') {\r\n    if (output.endsWith('/')) {\r\n      output = {\r\n        dir: output,\r\n        ...defaultOptions\r\n      };\r\n    } else {\r\n      output = {\r\n        file: output,\r\n        ...defaultOptions\r\n      };\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","import { handleMaybeArray } from '@/utilities/arr';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { MaybeArray, OutputOptions } from 'rollup';\r\nimport { OverrideOptions } from '@/types';\r\nimport { UserConfig } from 'vite';\r\n\r\nexport function mergeOptions<T = UserConfig>(\r\n  base: Partial<T> | undefined,\r\n  ...overrides: (OverrideOptions<T> | undefined)[]\r\n): Partial<T> {\r\n  base ??= {};\r\n\r\n  if (!overrides.length) {\r\n    return base;\r\n  }\r\n\r\n  for (const override of overrides) {\r\n    if (!override) {\r\n      continue;\r\n    }\r\n\r\n    if (typeof override === 'function') {\r\n      base = override(base) ?? base;\r\n    } else {\r\n      base = { ...base, ...override };\r\n    }\r\n  }\r\n\r\n  return base;\r\n}\r\n\r\nexport function appendMinFileName(output: OutputOptions): OutputOptions {\r\n  output = cloneDeep(output);\r\n\r\n  if (output.file) {\r\n    const parts = output.file.split('.');\r\n    const ext = parts.pop();\r\n    output.file = `${parts.join('.')}.min.${ext}`;\r\n  } else if (output.dir && typeof output.entryFileNames === 'string') {\r\n    const parts = output.entryFileNames.split('.');\r\n    const ext = parts.pop();\r\n    output.entryFileNames = `${parts.join('.')}.min.${ext}`;\r\n  }\r\n\r\n  return output;\r\n}\r\n","import { OverrideOptions, TaskInput } from '@/types';\r\nimport { mergeOptions } from '@/utilities/utilities';\r\nimport { MaybeArray, OutputOptions } from 'rollup';\r\nimport { defineConfig, LibraryOptions, UserConfig } from 'vite';\r\n\r\nexport function defineAllConfigs(configs: UserConfig[]) {\r\n  return configs.map(defineConfig);\r\n}\r\n\r\nexport function createViteLibOptions(input: TaskInput, extraOptions?: OverrideOptions<LibraryOptions>): LibraryOptions {\r\n  return mergeOptions<LibraryOptions>(\r\n    {\r\n      entry: input,\r\n    },\r\n    extraOptions\r\n  ) as LibraryOptions;\r\n}\r\n\r\nexport function createViteOptions(\r\n  lib?: LibraryOptions,\r\n  output?: MaybeArray<OutputOptions>,\r\n  extraOptions?: OverrideOptions<UserConfig>\r\n): Partial<UserConfig> {\r\n  return mergeOptions(\r\n    {\r\n      build: {\r\n        lib,\r\n        rollupOptions: {\r\n          output,\r\n        },\r\n        emptyOutDir: false,\r\n      },\r\n    },\r\n    extraOptions\r\n  );\r\n}\r\n\r\n","import { MinifyOptions } from '@/enum';\r\nimport { isVerbose } from '@/index';\r\nimport { CssOptions, OverrideOptions, TaskInput, TaskOutput } from '@/types';\r\nimport { forceArray } from '@/utilities/arr';\r\nimport { normalizeOutputs } from '@/utilities/output';\r\nimport { appendMinFileName, mergeOptions } from '@/utilities/utilities';\r\nimport { createViteLibOptions, createViteOptions } from '@/utilities/vite';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { MaybeArray, OutputOptions } from 'rollup';\r\nimport postcss, { type PostCSSPluginConf } from 'rollup-plugin-postcss';\r\nimport { BuildEnvironmentOptions, BuilderOptions, UserConfig } from 'vite';\r\n\r\nexport async function css(\r\n  input: TaskInput,\r\n  output: TaskOutput,\r\n  options: CssOptions = {}\r\n): Promise<MaybeArray<UserConfig>> {\r\n  options.verbose ??= isVerbose;\r\n\r\n  let outputs = normalizeOutputs(output, { format: 'es' });\r\n\r\n  const all = [];\r\n\r\n  for (const output of outputs) {\r\n    const opt = createOptions(\r\n      input,\r\n      outputs,\r\n      options,\r\n      (config) => {\r\n        config.build!.minify = options.minify === MinifyOptions.SAME_FILE ? 'esbuild' : false;\r\n        config.build!.cssMinify = options.minify === MinifyOptions.SAME_FILE ? 'esbuild' : false;\r\n\r\n        return config;\r\n      },\r\n    );\r\n\r\n    all.push(mergeOptions(opt, options?.vite));\r\n\r\n    if (options?.minify === MinifyOptions.SEPARATE_FILE) {\r\n      const minOutput = appendMinFileName(output);\r\n\r\n      const opt = createOptions(\r\n        input,\r\n        minOutput,\r\n        options,\r\n        (config) => {\r\n          config.build!.minify = 'esbuild';\r\n          config.build!.cssMinify = 'esbuild';\r\n\r\n          return config;\r\n        },\r\n      );\r\n\r\n      all.push(mergeOptions(opt, options?.vite));\r\n    }\r\n  }\r\n\r\n  return all;\r\n}\r\n\r\nfunction createOptions(\r\n  input: TaskInput,\r\n  output: MaybeArray<OutputOptions>,\r\n  options: CssOptions,\r\n  override?: OverrideOptions<UserConfig>\r\n): Partial<UserConfig> {\r\n  output = cloneDeep(output);\r\n\r\n  const config = createViteOptions(\r\n    undefined,\r\n    output,\r\n    (config) => {\r\n      config.build!.rollupOptions!.input = input;\r\n\r\n      for (const o of forceArray(config.build!.rollupOptions!.output) as OutputOptions[]) {\r\n        o.assetFileNames = String(o.entryFileNames);\r\n\r\n        delete o.entryFileNames;\r\n      }\r\n\r\n      config.build!.cssCodeSplit = true;\r\n      config.css = {\r\n        modules: {\r\n          scopeBehaviour: 'global', // 或是 'global'\r\n        },\r\n        transformer: 'postcss',\r\n      };\r\n\r\n      // Remove __placeholder__ file since Vite must use it to extract CSS.\r\n      config.plugins = [\r\n        {\r\n          name: 'drop-vite-facade-css',\r\n          generateBundle(_, bundle) {\r\n            for (const [fileName, asset] of Object.entries(bundle)) {\r\n              if (\r\n                asset.type === 'asset'\r\n                && fileName === '__plaecholder__.min.css'\r\n              ) {\r\n                delete bundle[fileName];\r\n              }\r\n            }\r\n          },\r\n        }\r\n      ]\r\n\r\n      return config;\r\n    }\r\n  );\r\n\r\n  return mergeOptions(\r\n    config,\r\n    override,\r\n    options.vite\r\n  )\r\n}\r\n","import chalk from 'chalk';\r\nimport path from \"path\";\r\nimport { rimraf } from \"rimraf\";\r\nimport { MaybePromise, OutputOptions, type Plugin } from 'rollup';\r\n\r\nexport type CleanHandler = boolean | ((dir: string, outputOptions: OutputOptions) => MaybePromise<void>);\r\n\r\nexport default function clean(handler: CleanHandler, verbose?: boolean): Plugin {\r\n  const cleaned = new Set<string>();\r\n\r\n  return {\r\n    name: \"clean-output\",\r\n    outputOptions(outputOptions) {\r\n      if (handler === false) {\r\n        return outputOptions;\r\n      }\r\n\r\n      const outDir = outputOptions.dir\r\n        ? outputOptions.dir\r\n        : outputOptions.file\r\n          ? path.dirname(outputOptions.file)\r\n          : null;\r\n\r\n      if (outDir) {\r\n        cleaned.add(outDir);\r\n      }\r\n    },\r\n    async generateBundle(rollupOptions) {\r\n      if (handler === false) {\r\n        return;\r\n      }\r\n\r\n      const promises = cleaned.values().map(async (dir) => {\r\n        if (verbose) {\r\n          console.log(`Clean: ${chalk.yellow(dir)}`);\r\n        }\r\n\r\n        if (typeof handler === 'function') {\r\n          return handler(dir, rollupOptions);\r\n        }\r\n\r\n        if (dir) {\r\n          return rimraf(dir);\r\n        }\r\n      });\r\n\r\n      await Promise.all(promises);\r\n    },\r\n  };\r\n}\r\n","import { MinifyOptions } from '@/enum';\r\nimport { isVerbose } from '@/index';\r\nimport clean from '@/plugins/clean';\r\nimport { JsOptions, TaskInput, TaskOutput } from '@/types';\r\nimport { normalizeOutputs } from '@/utilities/output';\r\nimport { appendMinFileName, mergeOptions } from '@/utilities/utilities';\r\nimport esbuild, { Options as EsbuildOptions } from 'rollup-plugin-esbuild';\r\nimport { UserConfig } from 'vite';\r\n\r\nexport async function js(input: TaskInput, output: TaskOutput, options: JsOptions = {}): Promise<UserConfig[]> {\r\n  function plugins(esbuildOptions: EsbuildOptions) {\r\n    return [\r\n      clean(options.clean || false, options.verbose),\r\n      esbuild(\r\n        mergeOptions<EsbuildOptions>(\r\n          {\r\n            target: options?.target || 'esnext',\r\n            tsconfig: options?.tsconfig ?? './tsconfig.json',\r\n          },\r\n          esbuildOptions\r\n        )\r\n      )\r\n    ];\r\n  }\r\n\r\n  return useJsProcessor(\r\n    output,\r\n    options,\r\n    (output, isMinify) => {\r\n      if (isMinify) {\r\n        return {\r\n          input,\r\n          output,\r\n          plugins: plugins({\r\n            minify: true,\r\n            sourceMap: true,\r\n          })\r\n        };\r\n      }\r\n\r\n      return {\r\n        input,\r\n        output,\r\n        plugins: plugins({\r\n          minify: options?.minify === MinifyOptions.SAME_FILE,\r\n          sourceMap: options?.minify === MinifyOptions.SAME_FILE,\r\n        })\r\n      };\r\n    }\r\n  );\r\n}\r\n\r\nfunction useJsProcessor(\r\n  output: TaskOutput,\r\n  options: JsOptions,\r\n  createOptions: (outputs: UserConfig[], isMinify: boolean) => UserConfig\r\n) {\r\n  options.verbose ??= isVerbose;\r\n\r\n  const outputs = normalizeOutputs(output, { format: options?.format || 'es' });\r\n\r\n  for (const output of outputs) {\r\n    if (output.format === 'umd') {\r\n      output.name = options?.umdName;\r\n    }\r\n  }\r\n\r\n  const all: UserConfig[] = [];\r\n\r\n  const opt = createOptions(outputs, false);\r\n  all.push(mergeOptions(opt, options.vite));\r\n\r\n  if (options?.minify === MinifyOptions.SEPARATE_FILE) {\r\n    const minOutputs = outputs.map((output) => {\r\n      return appendMinFileName(output);\r\n    });\r\n\r\n    const minOptions = createOptions(minOutputs, true);\r\n\r\n    all.push(mergeOptions(minOptions, options?.vite));\r\n  }\r\n\r\n  return all;\r\n}\r\n","import { RunningTasks } from '@/types';\r\nimport chalk from 'chalk';\r\nimport { type rollup, watch } from 'rollup';\r\nimport { build, defineConfig, type UserConfig, type UserConfigExport } from 'vite';\r\n\r\nexport async function buildAll(runningTasks: RunningTasks) {\r\n  for (const name in runningTasks) {\r\n    const configList = runningTasks[name];\r\n\r\n    console.log(`▶️ - ${chalk.cyan(name)} Start...`);\r\n\r\n    for (const config of configList) {\r\n      const output = await build(defineConfig(config));\r\n    }\r\n\r\n    console.log(`✅ - ${chalk.cyan(name)} completed.`);\r\n  }\r\n}\r\nexport async function watchAll(optionsList: UserConfig[]) {\r\n  const watcher = watch(\r\n    optionsList.map((options) => ({\r\n      ...options,\r\n      watch: {\r\n        // clearScreen: true,\r\n        // buildDelay: 50\r\n      }\r\n    }))\r\n  );\r\n\r\n  watcher.on(\"event\", (e) => {\r\n    switch (e.code) {\r\n      case \"START\":\r\n        console.log(\"→ Start Watching...\");\r\n        break;\r\n      case \"BUNDLE_START\":\r\n        console.log(\"→ Start Bundling...\");\r\n        break;\r\n      case \"BUNDLE_END\":\r\n        console.log(`✔ Bundled, uses ${e.duration}ms`);\r\n        // Must manually close it.\r\n        e.result?.close();\r\n        break;\r\n      case \"END\":\r\n        console.log(\"Watching...\");\r\n        break;\r\n      case \"ERROR\":\r\n        console.error(\"✖ ERROR: \", e.error);\r\n        break;\r\n    }\r\n  });\r\n\r\n  process.on(\"SIGINT\", async () => {\r\n    await watcher.close();\r\n    console.log(\"\\n🛑 STOP Watching...\");\r\n    process.exit(0);\r\n  });\r\n}\r\n\r\n","import { existsSync } from 'node:fs';\r\nimport { isAbsolute, resolve } from 'node:path';\r\nimport { MaybeArray, MaybePromise } from 'rollup';\r\nimport { UserConfig } from 'vite';\r\nimport { ConfigResult, LoadedConfigTask, RunnerCliParams } from '../types/runner';\r\n\r\nexport async function loadConfigFile(configFile: ConfigResult): Promise<Record<string, LoadedConfigTask>> {\r\n  let path = configFile.path;\r\n\r\n  // If is Windows, Add \"file://\" prefix to path\r\n  if (process.platform === 'win32') {\r\n    // Replace backslash to slash\r\n    const winPath = path.replace(/\\\\/g, '/');\r\n    // Add file:// prefix if not exists\r\n    if (!winPath.startsWith('file://')) {\r\n      // Add extra slash to make it absolute path\r\n      // e.g. C:/path/to/file\r\n      // becomes file:///C:/path/to/file\r\n      path = `file:///${winPath}`;\r\n    }\r\n  }\r\n\r\n  const modules = await import(path);\r\n\r\n  return { ...modules };\r\n}\r\n\r\nexport async function resolveTaskOptions(task: LoadedConfigTask, resolveSubFunctions = false): Promise<UserConfig[]> {\r\n  if (!resolveSubFunctions && Array.isArray(task)) {\r\n    const results = await Promise.all(task.map((task) => resolveTaskOptions(task, true)));\r\n    return results.flat();\r\n  }\r\n\r\n  if (typeof task === 'function') {\r\n    return resolvePromisesToFlatArray(await task(), task?.name);\r\n  }\r\n\r\n  return resolvePromisesToFlatArray((await task) as MaybeArray<UserConfig>, task?.name);\r\n}\r\n\r\nasync function resolvePromisesToFlatArray(tasks: MaybeArray<MaybePromise<UserConfig>>, name?: string) {\r\n  if (!Array.isArray(tasks)) {\r\n    return [await tasks];\r\n  }\r\n\r\n  const resolvedTasks = await Promise.all(tasks);\r\n  const returnTasks = [];\r\n\r\n  for (const resolvedTask of resolvedTasks) {\r\n    if (Array.isArray(resolvedTask)) {\r\n      returnTasks.push(...resolvedTask);\r\n    } else {\r\n      returnTasks.push(resolvedTask);\r\n    }\r\n  }\r\n\r\n  return returnTasks;\r\n}\r\n\r\nexport function mustGetAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult {\r\n  const found = getAvailableConfigFile(root, params);\r\n\r\n  if (!found) {\r\n    throw new Error('No config file found. Please create a fusionfile.js or fusionfile.ts in the root directory.');\r\n  }\r\n\r\n  return found;\r\n}\r\n\r\nexport function getAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult | null {\r\n  let found = params?.config;\r\n\r\n  if (found) {\r\n    // If is not absolute of system path(consider Windows), prepend root\r\n    if (!isAbsolute(found)) {\r\n      found = resolve(root, found);\r\n    }\r\n\r\n    if (existsSync(found)) {\r\n      return {\r\n        path: found,\r\n        // get filename from file path\r\n        filename: found.split('/').pop() || '',\r\n        type: getConfigModuleType(found),\r\n        ts: isConfigTypeScript(found),\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  return findDefaultConfig(root);\r\n}\r\n\r\nexport function findDefaultConfig(root: string): ConfigResult | null {\r\n  let file = resolve(root, 'fusionfile.js');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'commonjs',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mjs');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.ts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getConfigModuleType(file: string) {\r\n  let type: 'commonjs' | 'module' | 'unknown' = 'unknown';\r\n\r\n  if (file.endsWith('.cjs')) {\r\n    type = 'commonjs';\r\n  } else if (file.endsWith('.mjs')) {\r\n    type = 'module';\r\n  } else if (file.endsWith('.ts') || file.endsWith('.mts')) {\r\n    type = 'module';\r\n  }\r\n\r\n  return type;\r\n}\r\n\r\nfunction isConfigTypeScript(file: string) {\r\n  return file.endsWith('.ts') || file.endsWith('.mts');\r\n}\r\n","import chalk from 'chalk';\r\nimport archy, { type Data } from 'archy';\r\nimport { shuffle } from 'lodash-es';\r\nimport { MaybeArray, OutputOptions, RollupOptions } from 'rollup';\r\nimport { LibraryOptions, UserConfig } from 'vite';\r\nimport { resolveTaskOptions } from './config';\r\nimport { LoadedConfigTask } from '../types/runner';\r\n\r\nexport async function displayAvailableTasks(tasks: Record<string, LoadedConfigTask>) {\r\n  const keys = Object.keys(tasks);\r\n\r\n  // Sort put default as first if exists\r\n  keys.sort((a, b) => {\r\n    if (a === 'default') {\r\n      return -1;\r\n    }\r\n\r\n    if (b === 'default') {\r\n      return 1;\r\n    }\r\n\r\n    return a.localeCompare(b);\r\n  });\r\n\r\n  const nodes: Array<Data | string> = [];\r\n\r\n  for (const key of keys) {\r\n    const task = tasks[key];\r\n    const taskOptions = await resolveTaskOptions(task, true);\r\n\r\n    nodes.push(await describeTasks(key, taskOptions));\r\n  }\r\n\r\n  const text = archy({\r\n    label: chalk.magenta('Available Tasks'),\r\n    nodes\r\n  });\r\n\r\n  console.log(text);\r\n}\r\n\r\nasync function describeTasks(name: string, tasks: MaybeArray<UserConfig>): Promise<Data> {\r\n  const nodes = [];\r\n  // console.log(name, tasks)\r\n  if (!Array.isArray(tasks)) {\r\n    tasks = [tasks]\r\n  }\r\n  \r\n  for (const task of tasks) {\r\n    if (typeof task === 'function') {\r\n      let taskOptions = await resolveTaskOptions(task, true);\r\n\r\n      nodes.push(\r\n        await describeTasks((task as Function).name, taskOptions)\r\n      );\r\n    } else {\r\n      nodes.push(describeTaskDetail(task));\r\n    }\r\n  }\r\n\r\n  return {\r\n    label: chalk.cyan(name),\r\n    nodes\r\n  };\r\n}\r\n\r\nfunction describeTaskDetail(task: UserConfig, indent: number = 4): string {\r\n  const str = [];\r\n\r\n  const lib = task.build?.lib;\r\n\r\n  // Input\r\n  if (lib && lib.entry) {\r\n    const entry = lib.entry;\r\n\r\n    let inputStr = '';\r\n    if (typeof entry === 'string') {\r\n      inputStr = chalk.yellow(entry);\r\n    } else if (Array.isArray(entry)) {\r\n      inputStr = chalk.yellow(entry.join(', '));\r\n    } else if (typeof entry === 'object') {\r\n      inputStr = chalk.yellow(Object.values(entry).join(', '));\r\n    }\r\n    str.push(`Input: ${inputStr}`);\r\n  }\r\n\r\n  const output = task.build?.rollupOptions?.output;\r\n\r\n  // Output\r\n  if (output) {\r\n    const outputs = Array.isArray(output) ? output : [output];\r\n    outputs.forEach((output, index) => {\r\n      let outStr = '';\r\n      if (output.file) {\r\n        outStr = chalk.green(output.file);\r\n      } else if (output.dir) {\r\n        outStr = chalk.green(output.dir);\r\n      }\r\n      str.push(`Output[${index}]: ${outStr}`);\r\n    });\r\n  }\r\n\r\n  return str.join(\" - \");\r\n}\r\n\r\nfunction countTask(task: MaybeArray<UserConfig>) {\r\n  if (Array.isArray(task)) {\r\n    return task.length;\r\n  }\r\n\r\n  return 1;\r\n}\r\n","import chalk from 'chalk';\r\nimport { uniq } from 'lodash-es';\r\nimport { MaybeArray } from 'rollup';\r\nimport { resolveTaskOptions } from '@/runner/config';\r\nimport { LoadedConfigTask, RunningTasks } from '@/types/runner';\r\nimport { UserConfig } from 'vite';\r\n\r\nexport function selectRunningTasks(\r\n  input: string[],\r\n  tasks: Record<string, LoadedConfigTask>\r\n): Record<string, LoadedConfigTask> {\r\n  input = uniq(input);\r\n\r\n  if (input.length === 0) {\r\n    input.push('default');\r\n  }\r\n\r\n  const selected: Record<string, LoadedConfigTask> = {};\r\n\r\n  for (const name of input) {\r\n    if (tasks[name]) {\r\n      selected[name] = tasks[name];\r\n    } else {\r\n      throw new Error(`Task \"${chalk.cyan(name)}\" not found in fusion config.`);\r\n    }\r\n  }\r\n\r\n  return selected;\r\n}\r\n\r\nexport async function resolveAllTasksAsOptions(tasks: Record<string, LoadedConfigTask>): Promise<RunningTasks> {\r\n  const cache: Record<string, MaybeArray<LoadedConfigTask>> = {};\r\n  const allTasks: RunningTasks = {};\r\n\r\n  for (const name in tasks) {\r\n    const task = tasks[name];\r\n\r\n    allTasks[name] = (await resolveTaskAsFlat(name, task, cache));\r\n  }\r\n\r\n  return allTasks;\r\n}\r\n\r\nexport async function resolveTaskAsFlat(\r\n  name: string,\r\n  task: LoadedConfigTask,\r\n  cache: Record<string, MaybeArray<LoadedConfigTask>>\r\n): Promise<UserConfig[]> {\r\n  const results: UserConfig[] = [];\r\n\r\n  if (Array.isArray(task)) {\r\n    for (const n in task) {\r\n      const t = task[n];\r\n      results.push(...await resolveTaskAsFlat(n, t, cache));\r\n    }\r\n  } else if (typeof task === 'function') {\r\n    name = task.name || name;\r\n\r\n    if (cache[name]) {\r\n      return [];\r\n    }\r\n\r\n    cache[name] = task;\r\n\r\n    const resolved = await resolveTaskOptions(task, true);\r\n\r\n    if (Array.isArray(resolved)) {\r\n      for (const n in resolved) {\r\n        const t = resolved[n];\r\n        results.push(...await resolveTaskAsFlat(n, t, cache));\r\n      }\r\n    }\r\n  } else {\r\n    results.push(await task);\r\n  }\r\n\r\n  return results;\r\n}\r\n","import { buildAll, watchAll } from '@/runner/build';\r\nimport { loadConfigFile, mustGetAvailableConfigFile } from '@/runner/config';\r\nimport { displayAvailableTasks } from '@/runner/describe';\r\nimport { resolveAllTasksAsOptions, selectRunningTasks } from '@/runner/tasks';\r\nimport { RunnerCliParams } from '@/types/runner';\r\nimport { defineAllConfigs } from '@/utilities/vite';\r\nimport { resolve } from 'node:path';\r\nimport { inspect } from 'node:util';\r\nimport yargs from 'yargs';\r\nimport { hideBin } from 'yargs/helpers';\r\n\r\nexport function parseArgv(): RunnerCliParams {\r\n  const app = yargs();\r\n\r\n  app.option('watch', {\r\n    alias: 'w',\r\n    type: 'boolean',\r\n    description: 'Watch files for changes and re-run the tasks',\r\n  });\r\n\r\n  app.option('cwd', {\r\n    type: 'string',\r\n    description: 'Current working directory',\r\n  });\r\n\r\n  app.option('list', {\r\n    alias: 'l',\r\n    type: 'boolean',\r\n    description: 'List all available tasks',\r\n  });\r\n\r\n  app.option('config', {\r\n    alias: 'c',\r\n    type: 'string',\r\n    description: 'Path to config file',\r\n  });\r\n\r\n  app.option('verbose', {\r\n    alias: 'v',\r\n    type: 'count',\r\n    description: 'Increase verbosity of output. Use multiple times for more verbosity.',\r\n  });\r\n\r\n  return app.parseSync(hideBin(process.argv));\r\n}\r\n\r\nexport async function run(argv: RunnerCliParams) {\r\n  try {\r\n    await processApp(argv);\r\n\r\n    // Success exit\r\n    // process.exit(0);\r\n  } catch (e) {\r\n    if (e instanceof Error) {\r\n      if (argv.verbose && argv.verbose > 0) {\r\n        throw e;\r\n      } else {\r\n        console.error(e);\r\n        process.exit(1);\r\n      }\r\n    } else {\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function processApp(params: RunnerCliParams) {\r\n  let cwd = params?.cwd;\r\n  let root: string;\r\n\r\n  if (cwd) {\r\n    root = cwd = resolve(cwd);\r\n    process.chdir(cwd);\r\n  } else {\r\n    root = process.cwd();\r\n  }\r\n\r\n  // Retrieve config file\r\n  const configFile = mustGetAvailableConfigFile(root, params);\r\n\r\n  // Load config\r\n  const tasks = await loadConfigFile(configFile);\r\n\r\n  // Describe tasks\r\n  if (params.list) {\r\n    await displayAvailableTasks(tasks);\r\n    return;\r\n  }\r\n\r\n  // Select running tasks\r\n  const selectedTasks = selectRunningTasks([...params._] as string[], tasks);\r\n\r\n  const runningTasks = (await resolveAllTasksAsOptions(selectedTasks));\r\n\r\n  // console.log(inspect(runningTasks, { depth: null, colors: true }));\r\n\r\n  //\r\n  // if (params.watch) {\r\n  //   await watchAll(defineAllConfigs(options));\r\n  // } else {\r\n    await buildAll(runningTasks);\r\n  // }\r\n}\r\n","\r\nexport * from '@/dep';\r\nimport * as fusion from '@/dep';\r\nimport { parseArgv, run } from '@/runner/run';\r\nimport { RunnerCliParams } from '@/types/runner';\r\nimport { fileURLToPath } from 'node:url';\r\n\r\nlet params: RunnerCliParams | undefined = undefined;\r\n\r\nconst isCliRunning = process.argv[1] && fileURLToPath(import.meta.url) === process.argv[1];\r\n\r\nexport default {\r\n  ...fusion,\r\n  params,\r\n};\r\n\r\nif (isCliRunning) {\r\n  params = parseArgv();\r\n\r\n  run(params);\r\n}\r\n\r\nconst isVerbose = params?.verbose ? params?.verbose > 0 : false;\r\n\r\nexport { isVerbose };\r\n"],"names":["MinifyOptions","forceArray","item","handleMaybeArray","items","callback","normalizeOutputs","output","defaultOptions","dirname","normalize","mergeOptions","base","overrides","override","appendMinFileName","cloneDeep","parts","ext","createViteOptions","lib","extraOptions","css","input","options","isVerbose","outputs","all","opt","createOptions","config","minOutput","_","bundle","fileName","asset","clean","handler","verbose","cleaned","outputOptions","outDir","path","rollupOptions","promises","dir","chalk","rimraf","js","plugins","esbuildOptions","esbuild","useJsProcessor","isMinify","minOutputs","minOptions","buildAll","runningTasks","name","configList","build","defineConfig","loadConfigFile","configFile","winPath","resolveTaskOptions","task","resolveSubFunctions","resolvePromisesToFlatArray","tasks","resolvedTasks","returnTasks","resolvedTask","mustGetAvailableConfigFile","root","params","found","getAvailableConfigFile","isAbsolute","resolve","existsSync","getConfigModuleType","isConfigTypeScript","findDefaultConfig","file","type","displayAvailableTasks","keys","a","b","nodes","key","taskOptions","describeTasks","text","archy","describeTaskDetail","indent","str","entry","inputStr","index","outStr","selectRunningTasks","uniq","selected","resolveAllTasksAsOptions","cache","allTasks","resolveTaskAsFlat","results","n","t","resolved","parseArgv","app","yargs","hideBin","run","argv","processApp","e","cwd","selectedTasks","isCliRunning","fileURLToPath","fusion"],"mappings":"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"}