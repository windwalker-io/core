import { default as BuildTask } from './BuildTask.ts';
import { FileTasks, FusionVitePluginOptions } from '../types';
import { MaybePromise, PreRenderedAsset, PreRenderedChunk } from 'rollup';
import { ConfigEnv, UserConfig, Plugin } from 'vite';
export default class ConfigBuilder {
    config: UserConfig;
    env: ConfigEnv;
    fusionOptions: FusionVitePluginOptions;
    static globalOverrideConfig: UserConfig;
    overrideConfig: UserConfig;
    entryFileNamesCallbacks: ((chunkInfo: PreRenderedChunk) => string | undefined | void)[];
    chunkFileNamesCallbacks: ((chunkInfo: PreRenderedChunk) => string | undefined | void)[];
    assetFileNamesCallbacks: ((chunkInfo: PreRenderedAsset) => string | undefined | void)[];
    moveTasks: FileTasks;
    copyTasks: FileTasks;
    linkTasks: FileTasks<'link'>;
    postBuildCallbacks: (() => MaybePromise<void>)[];
    resolveIdCallbacks: Exclude<Plugin['resolveId'], undefined>[];
    loadCallbacks: Exclude<Plugin['load'], undefined>[];
    cleans: string[];
    tasks: Map<string, BuildTask>;
    constructor(config: UserConfig, env: ConfigEnv, fusionOptions: FusionVitePluginOptions);
    merge(override: UserConfig | ((config: UserConfig) => UserConfig)): this;
    private getDefaultOutput;
    private getChunkDir;
    private getChunkNameFromTask;
    ensurePath(path: string, def?: any): this;
    get(path: string): any;
    set(path: string, value: any): this;
    addTask(input: string, group?: string): BuildTask;
    addCleans(...paths: string[]): this;
    relativePath(to: string): string;
    debug(): void;
}
