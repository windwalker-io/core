{"version":3,"file":"index.cjs","sources":["../src/enum/MinifyOptions.ts","../src/utilities/arr.ts","../src/utilities/output.ts","../src/utilities/utilities.ts","../src/utilities/vite.ts","../src/processors/css.ts","../src/processors/js.ts","../src/processors/vue.ts","../src/params.ts","../src/utilities/crypto.ts","../src/builder/BuildTask.ts","../src/builder/ConfigBuilder.ts","../src/runner/config.ts","../src/runner/describe.ts","../src/runner/tasks.ts","../src/runner/app.ts","../src/utilities/fs.ts","../src/index.ts"],"sourcesContent":["export enum MinifyOptions {\n  NONE = 'none',\n  SAME_FILE = 'same_file',\n  SEPARATE_FILE = 'separate_file',\n}\n","import { MaybeArray } from 'rollup';\r\n\r\nexport function forceArray<T>(item: T | T[]): T[] {\r\n  if (Array.isArray(item)) {\r\n    return item;\r\n  } else {\r\n    return [item];\r\n  }\r\n}\r\n\r\n\r\nexport function handleMaybeArray<T, R>(\r\n  items: T | T[],\r\n  callback: (item: T) => R\r\n): T extends any[] ? R[] : R {\r\n  if (Array.isArray(items)) {\r\n    return items.map(callback) as any;\r\n  } else {\r\n    return callback(items as T) as any;\r\n  }\r\n}\r\n\r\nexport function appendToMaybeArray<T>(items: MaybeArray<T>, value: T): T[] {\r\n  if (Array.isArray(items)) {\r\n    items.push(value);\r\n\r\n    return items;\r\n  } else {\r\n    return [items, value];\r\n  }\r\n}\r\n","import { TaskOutput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr';\r\nimport { MaybeArray, OutputOptions } from 'rollup';\r\nimport { dirname, normalize } from 'node:path';\r\n\r\nexport function normalizeOutputs(\r\n  output: TaskOutput,\r\n  defaultOptions: Record<string, any> = {}\r\n): OutputOptions[] {\r\n  output = handleMaybeArray(output, (output) => {\r\n    if (typeof output === 'string') {\r\n      if (output.endsWith('/')) {\r\n        output = {\r\n          dir: output,\r\n          ...defaultOptions\r\n        };\r\n      } else {\r\n        output = {\r\n          dir: dirname(output),\r\n          // Get file name with node library, consider Windows\r\n          entryFileNames: normalize(output).replace(/\\\\/g, '/').split('/').pop(),\r\n          ...defaultOptions\r\n        };\r\n      }\r\n    }\r\n\r\n    return output;\r\n  });\r\n\r\n  return forceArray(output);\r\n}\r\n\r\nfunction normalizeOutputObject(output: OutputOptions | string, defaultOptions: Record<string, any> = {}) {\r\n  if (typeof output === 'string') {\r\n    if (output.endsWith('/')) {\r\n      output = {\r\n        dir: output,\r\n        ...defaultOptions\r\n      };\r\n    } else {\r\n      output = {\r\n        file: output,\r\n        ...defaultOptions\r\n      };\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","import { OverrideOptions } from '@/types';\nimport { cloneDeep, merge } from 'lodash-es';\nimport { inspect } from 'node:util';\nimport { OutputOptions } from 'rollup';\nimport { mergeConfig, UserConfig } from 'vite';\n\nexport function mergeOptions<T extends Record<string, any> = Record<string, any>>(\n  base: T,\n  ...overrides: (OverrideOptions<T> | undefined)[]\n): T {\n  if (!overrides.length) {\n    return base;\n  }\n\n  for (const override of overrides) {\n    if (!override) {\n      continue;\n    }\n\n    if (typeof override === 'function') {\n      base = override(base) ?? base;\n    } else {\n      base = mergeConfig(base, override);\n    }\n  }\n\n  return base;\n}\n\nexport function appendMinFileName(output: OutputOptions): OutputOptions {\n  output = cloneDeep(output);\n\n  if (output.file) {\n    const parts = output.file.split('.');\n    const ext = parts.pop();\n    output.file = `${parts.join('.')}.min.${ext}`;\n  } else if (output.dir && typeof output.entryFileNames === 'string') {\n    const parts = output.entryFileNames.split('.');\n    const ext = parts.pop();\n    output.entryFileNames = `${parts.join('.')}.min.${ext}`;\n  }\n\n  return output;\n}\n\nexport function show(data: any, depth = 10) {\n  console.log(inspect(data, { depth: null, colors: true }));\n}\n","import { OverrideOptions, TaskInput } from '@/types';\nimport { mergeOptions } from '@/utilities/utilities';\nimport { MaybeArray, OutputOptions } from 'rollup';\nimport { defineConfig, LibraryOptions, PluginOption, UserConfig } from 'vite';\n\nexport function defineAllConfigs(configs: UserConfig[]) {\n  return configs.map(defineConfig);\n}\n\nexport function createViteLibOptions(input: TaskInput, extraOptions?: OverrideOptions<LibraryOptions>): LibraryOptions {\n  return mergeOptions<LibraryOptions>(\n    {\n      entry: input,\n    },\n    extraOptions\n  ) as LibraryOptions;\n}\n\nexport function createViteOptions(\n  lib?: LibraryOptions,\n  output?: MaybeArray<OutputOptions>,\n  plugins: PluginOption[] = [],\n  override?: OverrideOptions<UserConfig>\n): Partial<UserConfig> {\n  return mergeOptions(\n    {\n      resolve: {},\n      build: {\n        lib,\n        rollupOptions: {\n          output,\n        },\n        emptyOutDir: false,\n        target: 'esnext',\n      },\n      plugins\n    },\n    override\n  );\n}\n\n","import BuildTask from '@/builder/BuildTask.ts';\nimport ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { MinifyOptions } from '@/enum';\nimport { isVerbose } from '@/index';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface';\nimport { CssOptions, OverrideOptions, TaskInput, TaskOutput } from '@/types';\nimport { forceArray, handleMaybeArray } from '@/utilities/arr';\nimport { normalizeOutputs } from '@/utilities/output';\nimport { appendMinFileName, mergeOptions, show } from '@/utilities/utilities';\nimport { createViteOptions } from '@/utilities/vite';\nimport autoprefixer from 'autoprefixer';\nimport { cloneDeep } from 'lodash-es';\nimport type { AcceptedPlugin, ProcessOptions } from 'postcss';\nimport { MaybeArray, MaybePromise, OutputOptions } from 'rollup';\nimport { UserConfig } from 'vite';\nimport { basename, isAbsolute, resolve } from 'node:path';\n\nexport function css(\n  input: TaskInput,\n  output: TaskOutput,\n  options: CssOptions = {}\n): CssProcessor {\n  return new CssProcessor(input, output, options);\n}\n\nexport class CssProcessor implements ProcessorInterface {\n  constructor(protected input: TaskInput, protected output: TaskOutput, protected options: CssOptions = {}) {\n  }\n\n  async config(taskName: string, builder: ConfigBuilder) {\n    handleMaybeArray(this.input, (input) => {\n      const task = builder.addTask(input, taskName);\n\n      builder.assetFileNamesCallbacks.push((assetInfo) => {\n        const name = assetInfo.names[0];\n        if (!name) {\n          return undefined;\n        }\n\n        if (basename(name, '.css') === task.id) {\n          const name = task.normalizeOutput(this.output);\n\n          if (!isAbsolute(name)) {\n            return name;\n          } else {\n            builder.moveFilesMap[task.id + '.css'] = name;\n          }\n        }\n      });\n    });\n\n    // show(builder)\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return forceArray(this.input).map((input) => {\n      return {\n        input,\n        output: this.output,\n        extra: {}\n      };\n    });\n  }\n}\n\nexport async function cssBak(\n  input: TaskInput,\n  output: TaskOutput,\n  options: CssOptions = {}\n): Promise<MaybeArray<UserConfig>> {\n  options.verbose ??= isVerbose;\n\n\n  let outputs = normalizeOutputs(output, { format: 'es' });\n\n  const all = [];\n\n  for (const output of outputs) {\n    const opt = createOptions(\n      input,\n      outputs,\n      options,\n      (config) => {\n        config.build!.minify = options.minify === MinifyOptions.SAME_FILE ? 'esbuild' : false;\n        config.build!.cssMinify = options.minify === MinifyOptions.SAME_FILE ? 'esbuild' : false;\n\n        return config;\n      },\n    );\n\n    all.push(mergeOptions(opt, options?.vite));\n\n    if (options?.minify === MinifyOptions.SEPARATE_FILE) {\n      const minOutput = appendMinFileName(output);\n\n      const opt = createOptions(\n        input,\n        minOutput,\n        options,\n        (config) => {\n          config.build!.minify = 'esbuild';\n          config.build!.cssMinify = 'esbuild';\n\n          return config;\n        },\n      );\n\n      all.push(mergeOptions(opt, options?.vite));\n    }\n  }\n\n  return all;\n}\n\nfunction createOptions(\n  input: TaskInput,\n  output: MaybeArray<OutputOptions>,\n  options: CssOptions,\n  override?: OverrideOptions<UserConfig>\n): Partial<UserConfig> {\n  output = cloneDeep(output);\n\n  const config = createViteOptions(\n    undefined,\n    output,\n    [],\n    (config) => {\n      config.build!.rollupOptions!.input = input;\n      config.build!.emptyOutDir = options.clean ?? false;\n\n      for (const o of forceArray(config.build!.rollupOptions!.output) as OutputOptions[]) {\n        o.assetFileNames = String(o.entryFileNames);\n\n        delete o.entryFileNames;\n      }\n\n      config.build!.cssCodeSplit = true;\n      config.css = {\n        // modules: {\n        //   scopeBehaviour: 'global', // 或是 'global'\n        // },\n        transformer: 'postcss',\n        postcss: mergeOptions<ProcessOptions & AcceptedPlugin>(\n          {\n            plugins: [\n              autoprefixer({ overrideBrowserslist: options.browserslist })\n            ]\n          },\n          options.postcss\n        ),\n      };\n\n      return config;\n    }\n  );\n\n  return mergeOptions(\n    config,\n    override,\n    options.vite\n  );\n}\n","import { MinifyOptions } from '@/enum';\nimport { isVerbose } from '@/index';\nimport { JsOptions, TaskInput, TaskOutput } from '@/types';\nimport { handleMaybeArray } from '@/utilities/arr';\nimport { normalizeOutputs } from '@/utilities/output';\nimport { appendMinFileName, mergeOptions } from '@/utilities/utilities';\nimport { createViteLibOptions, createViteOptions } from '@/utilities/vite';\nimport { resolve } from 'path';\nimport { OutputOptions } from 'rollup';\nimport { ESBuildOptions, mergeConfig, UserConfig } from 'vite';\n\nexport async function js(input: TaskInput, output: TaskOutput, options: JsOptions = {}): Promise<UserConfig[]> {\n  // if (typeof options.tsconfig === 'string') {\n  //   esbuild.tsconfig = options.tsconfig;\n  // } else if (typeof options.tsconfig === 'object') {\n  //   esbuild.tsconfigRaw = options.tsconfig;\n  // }\n\n  return useJsProcessor(\n    output,\n    options,\n    (output, isMinify) => {\n      if (isMinify) {\n        return createViteOptions(\n          createViteLibOptions(input),\n          output,\n          [],\n          (config) => {\n            return overrideViteJsOptions(config, options);\n          }\n        );\n      }\n\n      return createViteOptions(\n        createViteLibOptions(input),\n        output,\n        [],\n        (config) => {\n          return overrideViteJsOptions(config, options);\n        }\n      );\n    }\n  );\n}\n\nexport function useJsProcessor(\n  output: TaskOutput,\n  options: JsOptions,\n  createOptions: (outputs: OutputOptions[], isMinify: boolean) => UserConfig\n) {\n  options.verbose ??= isVerbose;\n\n  const outputs = normalizeOutputs(output, { format: options?.format || 'es' });\n\n  for (const output of outputs) {\n    if (output.format === 'umd') {\n      output.name = options?.umdName;\n    }\n  }\n\n  const all: UserConfig[] = [];\n\n  const opt = createOptions(outputs, false);\n  all.push(mergeOptions(opt, options.vite));\n\n  if (options?.minify === MinifyOptions.SEPARATE_FILE) {\n    const minOutputs = outputs.map((output) => {\n      return appendMinFileName(output);\n    });\n\n    const minOptions = createOptions(minOutputs, true);\n\n    all.push(mergeOptions(minOptions, options?.vite));\n  }\n\n  return all;\n}\n\nexport function overrideViteJsOptions(config: UserConfig, options: JsOptions) {\n  const esbuild = mergeOptions<ESBuildOptions>(\n    {\n      target: options?.target || 'esnext',\n    },\n    options?.esbuild\n  );\n\n  config.build!.minify = options?.minify === MinifyOptions.SAME_FILE ? 'esbuild' : false;\n  config.build!.emptyOutDir = options.clean || false;\n  config.build!.target = options.target || 'esnext';\n  config.esbuild = esbuild;\n\n  config = addExternals(config, options.externals);\n\n  if (options.path) {\n    config = mergeConfig(config, { resolve: { alias: {}, } });\n\n    if (typeof options.path === 'string') {\n      config.resolve!.alias = {\n        '@': resolve(options.path)\n      };\n    } else {\n      const aliases: Record<string, string> = {};\n\n      for (const alias in options.path) {\n        aliases[alias] = resolve(options.path[alias]);\n      }\n\n      config.resolve!.alias = aliases;\n    }\n  }\n\n  return config;\n}\n\n/**\n * @deprecated\n * @param config\n * @param externals\n */\nexport function addExternals(config: UserConfig, externals?: Record<string, string>) {\n  if (!externals) {\n    return config;\n  }\n\n  config = mergeConfig(config, { build: { rollupOptions: { external: [] } } });\n\n  if (!Array.isArray(config.build!.rollupOptions!.external)) {\n    throw new Error('Only array externals are supported now.');\n  }\n\n  for (const ext in externals) {\n    if (!config.build!.rollupOptions!.external.includes(ext)) {\n      config.build!.rollupOptions!.external.push(ext);\n    }\n  }\n\n  config.build!.rollupOptions!.output = handleMaybeArray(config.build!.rollupOptions!.output, (output) => {\n    output!.globals = {\n      ...output!.globals,\n        ...externals\n    };\n    return output;\n  });\n\n  return config;\n\n}\n","import { isDev, isProd } from '@/index';\nimport { addExternals, overrideViteJsOptions, useJsProcessor } from '@/processors/js';\nimport { TaskInput, TaskOutput } from '@/types';\nimport { VueOptions } from '@/types/vue';\nimport { handleMaybeArray } from '@/utilities/arr';\nimport { createViteLibOptions, createViteOptions } from '@/utilities/vite';\nimport vuePlugin from '@vitejs/plugin-vue';\nimport { inspect } from 'node:util';\nimport { mergeConfig, UserConfig } from 'vite';\n\nexport async function vue(input: TaskInput, output: TaskOutput, options: VueOptions = {}): Promise<UserConfig[]> {\n  return useJsProcessor(\n    output,\n    options,\n    (output, isMinify) => {\n      return createViteOptions(\n        createViteLibOptions(input),\n        output,\n        [\n          vuePlugin()\n        ],\n        (config) => {\n          config = overrideViteJsOptions(config, options);\n          config.build!.sourcemap = isDev ? 'inline' : false;\n          return config;\n        }\n      );\n    }\n  );\n}\n","import { RunnerCliParams } from '@/types';\n\nlet params: RunnerCliParams | undefined = undefined;\n\nexport function prepareParams(p: RunnerCliParams): RunnerCliParams {\n  params = p;\n\n  isVerbose = params?.verbose ? params?.verbose > 0 : false;\n\n  return p;\n}\n\nlet isVerbose = false;\nconst isProd = process.env.NODE_ENV === 'production';\nconst isDev = !isProd;\n\nexport { isVerbose, isDev, isProd, params };\n","import Crypto from 'crypto';\r\n\r\nexport function shortHash(bufferOrString: Crypto.BinaryLike, short: number | null = 8): string {\r\n  let hash = Crypto.createHash('sha1')\r\n    .update(bufferOrString)\r\n    .digest('hex');\r\n\r\n  if (short && short > 0) {\r\n    hash = hash.substring(0, short);\r\n  }\r\n\r\n  return hash;\r\n}\r\n\r\n\r\n","import { shortHash } from '@/utilities/crypto.ts';\nimport { uniqueId } from 'lodash-es';\nimport { normalize, basename, resolve, isAbsolute } from 'node:path';\nimport { PreRenderedChunk } from 'rollup';\n\nexport default class BuildTask {\n  id: string;\n  output?: string | ((chunkInfo: PreRenderedChunk) => any);\n  postCallbacks: (() => void)[] = [];\n\n  constructor(public input: string, public group?: string) {\n    this.id = BuildTask.toFileId(input, group);\n\n    this.input = normalize(input);\n  }\n\n  dest(output?: string | ((chunkInfo: PreRenderedChunk) => any)) {\n    if (typeof output === 'string') {\n      output = this.normalizeOutput(output);\n    }\n\n    this.output = output;\n\n    return this;\n  }\n\n  addPostCallback(callback: () => void) {\n    this.postCallbacks.push(callback);\n    return this;\n  }\n\n  normalizeOutput(output: string) {\n    if (output.endsWith('/') || output.endsWith('\\\\')) {\n      output += basename(this.input);\n    }\n\n    if (output.startsWith('.')) {\n      output = resolve(output);\n    }\n\n    return output;\n  }\n\n  static toFileId(input: string, group?: string) {\n    input = normalize(input);\n\n    group ||= uniqueId();\n\n    return group + '-' + shortHash(input);\n  }\n}\n\n","import BuildTask from '@/builder/BuildTask.ts';\nimport { RunnerCliParams } from '@/types';\nimport { shortHash } from '@/utilities/crypto.ts';\nimport { mergeOptions, show } from '@/utilities/utilities.ts';\nimport { get, set, uniqueId } from 'lodash-es';\nimport { isAbsolute, normalize, relative } from 'node:path';\nimport { MaybePromise, PreRenderedAsset, PreRenderedChunk, RollupOptions } from 'rollup';\nimport { ConfigEnv, mergeConfig, PluginOption, UserConfig } from 'vite';\n\nexport default class ConfigBuilder {\n  static defaultConfig: UserConfig = {};\n\n  entryFileNamesCallbacks: ((chunkInfo: PreRenderedChunk) => string | undefined | void)[] = [];\n  chunkFileNamesCallbacks: ((chunkInfo: PreRenderedChunk) => string | undefined | void)[] = [];\n  assetFileNamesCallbacks: ((chunkInfo: PreRenderedAsset) => string | undefined | void)[] = [];\n\n  moveFilesMap: Record<string, string> = {};\n  copyFilesMap: Record<string, string> = {};\n  deleteFilesMap: Record<string, string> = {};\n  postBuildCallbacks: (() => MaybePromise<void>)[] = [];\n  // fileNameMap: Record<string, string> = {};\n\n  // externals:\n\n  tasks: Map<string, BuildTask> = new Map();\n\n  constructor(public config: UserConfig, public env: ConfigEnv, public params: RunnerCliParams) {\n    // this.ensurePath('build', {});\n    // this.ensurePath('build.rollupOptions', {\n    //   input: {},\n    //   output: this.getDefaultOutput(),\n    // });\n    // this.ensurePath('plugins', []);\n\n    this.config = mergeConfig(ConfigBuilder.defaultConfig, this.config);\n    this.config = mergeConfig<UserConfig, UserConfig>(this.config, {\n      build: {\n        rollupOptions: {\n          input: {},\n          output: this.getDefaultOutput(),\n        },\n      },\n      plugins: [\n      ],\n    });\n  }\n\n  merge(override: UserConfig | ((config: UserConfig) => UserConfig)) {\n    if (typeof override === 'function') {\n      this.config = override(this.config) ?? this.config;\n\n      return this;\n    }\n\n    this.config = mergeConfig(this.config, override);\n\n    return this;\n  }\n\n  private getDefaultOutput(): RollupOptions['output'] {\n    return {\n      entryFileNames: (chunkInfo) => {\n        const name = this.getChunkNameFromTask(chunkInfo);\n\n        if (name) {\n          return name;\n        }\n\n        for (const entryFileNamesCallback of this.entryFileNamesCallbacks) {\n          const name = entryFileNamesCallback(chunkInfo);\n\n          if (name) {\n            return name;\n          }\n        }\n\n        // console.log(chunkInfo, this.relativePath(chunkInfo.facadeModuleId));\n\n        return '[name].js';\n      },\n      chunkFileNames: (chunkInfo) => {\n        const name = this.getChunkNameFromTask(chunkInfo);\n\n        if (name) {\n          return name;\n        }\n\n        for (const chunkFileNamesCallback of this.chunkFileNamesCallbacks) {\n          const name = chunkFileNamesCallback(chunkInfo);\n\n          if (name) {\n            return name;\n          }\n        }\n\n        return '[name].[ext]';\n      },\n      assetFileNames: (assetInfo) => {\n        // if (this.fileNameMap[assetInfo.name]) {\n        //   assetInfo.name = this.fileNameMap[assetInfo.name];\n        //   return assetInfo.name;\n        // }\n\n        for (const assetFileNamesCallback of this.assetFileNamesCallbacks) {\n          const name = assetFileNamesCallback(assetInfo);\n\n          if (name) {\n            return name;\n          }\n        }\n\n        return '[name].[ext]';\n      }\n    };\n  }\n\n  private getChunkNameFromTask(chunkInfo: PreRenderedChunk) {\n    if (this.tasks.has(chunkInfo.name)) {\n      const output = this.tasks.get(chunkInfo.name)?.output;\n\n      if (output) {\n        const name = typeof output === 'function' ? output(chunkInfo) : output;\n\n        if (!isAbsolute(name)) {\n          return name;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  ensurePath(path: string, def: any = {}) {\n    if (get(this.config, path) == null) {\n      set(this.config, path, def);\n    }\n\n    return this;\n  }\n\n  get(path: string) {\n    return get(this.config, path);\n  }\n\n  set(path: string, value: any) {\n    set(this.config, path, value);\n    return this;\n  }\n\n  addTask(input: string, group?: string) {\n    const task = new BuildTask(input, group);\n\n    this.tasks.set(task.id, task);\n\n    const inputOptions = this.config.build!.rollupOptions!.input! as Record<string, string>;\n    inputOptions[task.id] = task.input;\n\n    return task;\n  }\n\n  addExternals() {\n\n  }\n\n  addPlugin(plugin: PluginOption) {\n    this.config.plugins?.push(plugin);\n  }\n\n  removePlugin(plugin: string | PluginOption) {\n    this.config.plugins = this.config.plugins?.filter((p) => {\n      if (!p) {\n        return true;\n      }\n\n      if (typeof plugin === 'string' && typeof p === 'object' && 'name' in p) {\n        return p.name !== plugin;\n      } else if (typeof plugin === 'object' && typeof p === 'object') {\n        return p !== plugin;\n      }\n\n      return true;\n    });\n  }\n\n  relativePath(to: string) {\n    return relative(process.cwd(), to);\n  }\n\n\n  debug() {\n    show(this.config);\n  }\n}\n","import { ProcessorInterface } from '@/processors/ProcessorInterface.ts';\r\nimport { forceArray } from '@/utilities/arr.ts';\r\nimport { build } from 'esbuild';\r\nimport Module from 'module';\r\nimport { existsSync, writeFileSync } from 'node:fs';\r\nimport { dirname, isAbsolute, resolve } from 'node:path';\r\nimport { MaybeArray, MaybePromise } from 'rollup';\r\nimport { UserConfig } from 'vite';\r\nimport { ConfigResult, LoadedConfigTask, RunnerCliParams } from '../types/runner';\r\n\r\nexport async function loadConfigFile(configFile: ConfigResult): Promise<Record<string, LoadedConfigTask>> {\r\n  let path = configFile.path;\r\n\r\n  // If is Windows, Add \"file://\" prefix to path\r\n  if (process.platform === 'win32') {\r\n    // todo: try use pathToFileURL(): import { pathToFileURL } from 'url';\r\n    // Replace backslash to slash\r\n    const winPath = path.replace(/\\\\/g, '/');\r\n    // Add file:// prefix if not exists\r\n    if (!winPath.startsWith('file://')) {\r\n      // Add extra slash to make it absolute path\r\n      // e.g. C:/path/to/file\r\n      // becomes file:///C:/path/to/file\r\n      path = `file:///${winPath}`;\r\n    }\r\n  }\r\n\r\n  if (configFile.ts) {\r\n    const buildResult = await build({\r\n      entryPoints: [configFile.path],\r\n      bundle: true,\r\n      write: false,\r\n      outdir: 'dist',\r\n      platform: 'node',\r\n      format: 'cjs',\r\n      target: 'esnext',\r\n      external: ['../dist', '../dist/*'],\r\n      packages: 'external',\r\n      sourcemap: 'inline',\r\n    });\r\n    \r\n    const output = buildResult.outputFiles[0];\r\n\r\n    const code = Buffer.from(output.contents).toString('utf8');\r\n    writeFileSync(output.path, code);\r\n    const m = new Module(output.path, undefined);\r\n    m.filename = output.path;\r\n    m.paths = Module._nodeModulePaths(dirname(output.path));\r\n    m._compile(code, output.path);\r\n\r\n    const modules = { ...m.exports };\r\n    delete modules.__esModule;\r\n\r\n    return { ...modules };\r\n  } else {\r\n    const modules = await import(path);\r\n\r\n    return { ...modules };\r\n  }\r\n}\r\n\r\nexport async function resolveTaskResults(task: LoadedConfigTask) {\r\n  task = await task;\r\n\r\n  return Promise.all(forceArray(task));\r\n}\r\n\r\nexport async function resolveTaskOptions(task: LoadedConfigTask, resolveSubFunctions = false): Promise<ProcessorInterface[]> {\r\n  task = await task;\r\n\r\n  if (!resolveSubFunctions && Array.isArray(task)) {\r\n    const results = await Promise.all(task.map((task) => resolveTaskOptions(task, true)));\r\n    return results.flat();\r\n  }\r\n\r\n  if (typeof task === 'function') {\r\n    return resolvePromisesToFlatArray(await task(), task?.name);\r\n  }\r\n\r\n  return resolvePromisesToFlatArray((await task) as MaybeArray<ProcessorInterface>, task?.name);\r\n}\r\n\r\nasync function resolvePromisesToFlatArray(tasks: MaybeArray<MaybePromise<ProcessorInterface>>, name?: string) {\r\n  if (!Array.isArray(tasks)) {\r\n    return [await tasks];\r\n  }\r\n\r\n  const resolvedTasks = await Promise.all(tasks);\r\n  const returnTasks = [];\r\n\r\n  for (const resolvedTask of resolvedTasks) {\r\n    if (Array.isArray(resolvedTask)) {\r\n      returnTasks.push(...resolvedTask);\r\n    } else {\r\n      returnTasks.push(resolvedTask);\r\n    }\r\n  }\r\n\r\n  return returnTasks;\r\n}\r\n\r\nexport function mustGetAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult {\r\n  const found = getAvailableConfigFile(root, params);\r\n\r\n  if (!found) {\r\n    throw new Error('No config file found. Please create a fusionfile.js or fusionfile.ts in the root directory.');\r\n  }\r\n\r\n  return found;\r\n}\r\n\r\nexport function getAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult | null {\r\n  let found = params?.config;\r\n\r\n  if (found) {\r\n    // If is not absolute of system path(consider Windows), prepend root\r\n    if (!isAbsolute(found)) {\r\n      found = resolve(root, found);\r\n    }\r\n\r\n    if (existsSync(found)) {\r\n      return {\r\n        path: found,\r\n        // get filename from file path\r\n        filename: found.split('/').pop() || '',\r\n        type: getConfigModuleType(found),\r\n        ts: isConfigTypeScript(found),\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  return findDefaultConfig(root);\r\n}\r\n\r\nexport function findDefaultConfig(root: string): ConfigResult | null {\r\n  let file = resolve(root, 'fusionfile.js');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'commonjs',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mjs');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.ts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getConfigModuleType(file: string) {\r\n  let type: 'commonjs' | 'module' | 'unknown' = 'unknown';\r\n\r\n  if (file.endsWith('.cjs')) {\r\n    type = 'commonjs';\r\n  } else if (file.endsWith('.mjs')) {\r\n    type = 'module';\r\n  } else if (file.endsWith('.ts') || file.endsWith('.mts')) {\r\n    type = 'module';\r\n  }\r\n\r\n  return type;\r\n}\r\n\r\nfunction isConfigTypeScript(file: string) {\r\n  return file.endsWith('.ts') || file.endsWith('.mts');\r\n}\r\n","import { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { LoadedConfigTask } from '@/types';\r\nimport { forceArray } from '@/utilities/arr.ts';\r\nimport archy, { type Data } from 'archy';\r\nimport chalk from 'chalk';\r\nimport { MaybeArray } from 'rollup';\r\nimport { UserConfig } from 'vite';\r\nimport { resolveTaskOptions } from './config';\r\n\r\nexport async function displayAvailableTasks(tasks: Record<string, LoadedConfigTask>) {\r\n  const keys = Object.keys(tasks);\r\n\r\n  // Sort put default as first if exists\r\n  keys.sort((a, b) => {\r\n    if (a === 'default') {\r\n      return -1;\r\n    }\r\n\r\n    if (b === 'default') {\r\n      return 1;\r\n    }\r\n\r\n    return a.localeCompare(b);\r\n  });\r\n\r\n  const nodes: Array<Data | string> = [];\r\n\r\n  for (const key of keys) {\r\n    const task = tasks[key];\r\n    // const taskOptions = await resolveTaskOptions(task, true);\r\n\r\n    nodes.push(await describeTasks(key, task));\r\n  }\r\n\r\n  const text = archy({\r\n    label: chalk.magenta('Available Tasks'),\r\n    nodes\r\n  });\r\n\r\n  console.log(text);\r\n}\r\n\r\nasync function describeTasks(name: string, tasks: LoadedConfigTask): Promise<Data> {\r\n  const nodes = [];\r\n  tasks = forceArray(await tasks);\r\n\r\n  for (let task of tasks) {\r\n    const processors = await resolveTaskOptions(task, true);\r\n\r\n    for (const processor of processors) {\r\n      if (typeof processor === 'function') {\r\n        nodes.push(\r\n          await describeTasks((processor as Function).name, processor)\r\n        );\r\n      } else {\r\n        nodes.push(...await describeProcessor(processor));\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    label: chalk.cyan(name),\r\n    nodes\r\n  };\r\n}\r\n\r\nasync function describeProcessor(processor: ProcessorInterface): Promise<string[]> {\r\n  const results = await processor.preview();\r\n\r\n  return Promise.all(results.map((result) => describeProcessorPreview(result)));\r\n}\r\n\r\nasync function describeProcessorPreview(preview: ProcessorPreview): Promise<string> {\r\n  const str = [];\r\n\r\n  const { input: entry, output, extra } = preview;\r\n\r\n  // Input\r\n  const inputStr = chalk.yellow(entry);\r\n  // if (typeof entry === 'string') {\r\n  //   inputStr = chalk.yellow(entry);\r\n  // } else if (Array.isArray(entry)) {\r\n  //   inputStr = chalk.yellow(entry.join(', '));\r\n  // } else if (typeof entry === 'object') {\r\n  //   inputStr = chalk.yellow(Object.values(entry).join(', '));\r\n  // }\r\n  str.push(`Input: ${inputStr}`);\r\n\r\n  // Output\r\n  // if (output) {\r\n  //   const outputs = Array.isArray(output) ? output : [output];\r\n  //   outputs.forEach((output, index) => {\r\n  //     let outStr = '';\r\n  //     if (output.file) {\r\n  //       outStr = chalk.green(output.file);\r\n  //     } else if (output.dir) {\r\n  //       outStr = chalk.green(output.dir);\r\n  //     }\r\n  //     str.push(`Output[${index}]: ${outStr}`);\r\n  //   });\r\n  // }\r\n\r\n  const outStr = chalk.green(output);\r\n  str.push(`Output: ${outStr}`);\r\n\r\n  return str.join(\" - \");\r\n}\r\n\r\nfunction countTask(task: MaybeArray<UserConfig>) {\r\n  if (Array.isArray(task)) {\r\n    return task.length;\r\n  }\r\n\r\n  return 1;\r\n}\r\n","import { ProcessorInterface } from '@/processors/ProcessorInterface.ts';\r\nimport chalk from 'chalk';\r\nimport { uniq } from 'lodash-es';\r\nimport { MaybeArray } from 'rollup';\r\nimport { resolveTaskOptions } from '@/runner/config';\r\nimport { LoadedConfigTask, RunningTasks } from '@/types/runner';\r\nimport { UserConfig } from 'vite';\r\n\r\nexport function selectRunningTasks(\r\n  input: string[],\r\n  tasks: Record<string, LoadedConfigTask>\r\n): Record<string, LoadedConfigTask> {\r\n  input = uniq(input);\r\n\r\n  if (input.length === 0) {\r\n    input.push('default');\r\n  }\r\n\r\n  const selected: Record<string, LoadedConfigTask> = {};\r\n\r\n  for (const name of input) {\r\n    if (tasks[name]) {\r\n      selected[name] = tasks[name];\r\n    } else {\r\n      throw new Error(`Task \"${chalk.cyan(name)}\" not found in fusion config.`);\r\n    }\r\n  }\r\n\r\n  return selected;\r\n}\r\n\r\nexport async function resolveAllTasksAsProcessors(tasks: Record<string, LoadedConfigTask>): Promise<RunningTasks> {\r\n  const cache: Record<string, MaybeArray<LoadedConfigTask>> = {};\r\n  const allTasks: RunningTasks = {};\r\n\r\n  for (const name in tasks) {\r\n    const task = tasks[name];\r\n\r\n    allTasks[name] = (await resolveTaskAsFlat(name, task, cache));\r\n  }\r\n\r\n  return allTasks;\r\n}\r\n\r\nexport async function resolveTaskAsFlat(\r\n  name: string,\r\n  task: LoadedConfigTask,\r\n  cache: Record<string, MaybeArray<LoadedConfigTask>>\r\n): Promise<ProcessorInterface[]> {\r\n  const results: ProcessorInterface[] = [];\r\n\r\n  if (Array.isArray(task)) {\r\n    for (const n in task) {\r\n      const t = task[n];\r\n      results.push(...await resolveTaskAsFlat(n, t, cache));\r\n    }\r\n  } else if (typeof task === 'function') {\r\n    name = task.name || name;\r\n\r\n    if (cache[name]) {\r\n      return [];\r\n    }\r\n\r\n    cache[name] = task;\r\n\r\n    const resolved = await resolveTaskOptions(task, true);\r\n\r\n    if (Array.isArray(resolved)) {\r\n      for (const n in resolved) {\r\n        const t = resolved[n];\r\n        results.push(...await resolveTaskAsFlat(n, t, cache));\r\n      }\r\n    }\r\n  } else {\r\n    results.push(await task);\r\n  }\r\n\r\n  return results;\r\n}\r\n","import { buildAll, watchAll } from '@/runner/build';\nimport { loadConfigFile, mustGetAvailableConfigFile } from '@/runner/config';\nimport { displayAvailableTasks } from '@/runner/describe';\nimport { resolveAllTasksAsProcessors, selectRunningTasks } from '@/runner/tasks';\nimport { RunnerCliParams } from '@/types/runner';\nimport { defineAllConfigs } from '@/utilities/vite';\nimport { resolve } from 'node:path';\nimport { inspect } from 'node:util';\nimport yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\n\nexport function getArgsAfterDoubleDashes(argv?: string[]): string[] {\n  argv ??= process.argv;\n\n  return argv.slice(2).join(' ').split('--').slice(1).join('--').trim().split(' ');\n}\n\nexport function parseArgv(argv: string[]): RunnerCliParams {\n  const app = yargs();\n\n  // app.option('watch', {\n  //   alias: 'w',\n  //   type: 'boolean',\n  //   description: 'Watch files for changes and re-run the tasks',\n  // });\n\n  app.option('cwd', {\n    type: 'string',\n    description: 'Current working directory',\n  });\n\n  app.option('list', {\n    alias: 'l',\n    type: 'boolean',\n    description: 'List all available tasks',\n  });\n\n  app.option('config', {\n    alias: 'c',\n    type: 'string',\n    description: 'Path to config file',\n  });\n\n  // app.option('series', {\n  //   alias: 's',\n  //   type: 'boolean',\n  //   description: 'Run tasks in series instead of parallel',\n  // });\n\n  app.option('verbose', {\n    alias: 'v',\n    type: 'count',\n    description: 'Increase verbosity of output. Use multiple times for more verbosity.',\n  });\n\n  return app.parseSync(argv);\n}\n\nexport async function runApp(argv: RunnerCliParams) {\n  try {\n    await processApp(argv);\n\n    // Success exit\n    // process.exit(0);\n  } catch (e) {\n    if (e instanceof Error) {\n      if (argv.verbose && argv.verbose > 0) {\n        throw e;\n      } else {\n        console.error(e);\n        process.exit(1);\n      }\n    } else {\n      throw e;\n    }\n  }\n}\n\nexport async function processApp(params: RunnerCliParams) {\n  let cwd = params?.cwd;\n  let root: string;\n\n  if (cwd) {\n    root = cwd = resolve(cwd);\n    process.chdir(cwd);\n  } else {\n    root = process.cwd();\n  }\n\n  // Retrieve config file\n  const configFile = mustGetAvailableConfigFile(root, params);\n\n  // Load config\n  const tasks = await loadConfigFile(configFile);\n\n  // Describe tasks\n  if (params.list) {\n    await displayAvailableTasks(tasks);\n    return;\n  }\n\n  // Select running tasks\n  const selectedTasks = selectRunningTasks([...params._] as string[], tasks);\n\n  const runningTasks = (await resolveAllTasksAsProcessors(selectedTasks));\n\n  if (params.watch) {\n    await watchAll(runningTasks, params);\n  } else {\n    await buildAll(runningTasks, params);\n  }\n}\n","import { move } from 'fs-extra';\nimport { isAbsolute, relative, resolve } from 'node:path';\n\nexport function moveFilesAndLog(files: Record<string, string>, outDir: string) {\n  const promises = [];\n\n  for (let src in files) {\n    let dest = files[src];\n\n    src = normalizeFilePath(src, outDir);\n    dest = normalizeFilePath(dest, outDir);\n\n    console.log(`Moving file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\n\n    promises.push(move(src, dest));\n  }\n\n  return Promise.all(promises);\n}\n\nfunction normalizeFilePath(path: string, outDir: string) {\n  if (path.startsWith('.')) {\n    path = resolve(path);\n  } else if (!isAbsolute(path)) {\n    path = outDir + '/' + path;\n  }\n\n  return path;\n}\n","export * from '@/dep';\nimport ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport * as fusion from '@/dep';\nimport { getArgsAfterDoubleDashes, parseArgv, runApp } from '@/runner/app';\nimport { findDefaultConfig, loadConfigFile, mustGetAvailableConfigFile } from '@/runner/config';\nimport { displayAvailableTasks } from '@/runner/describe.ts';\nimport { resolveAllTasksAsProcessors, selectRunningTasks } from '@/runner/tasks.ts';\nimport { FusionVitePluginOptions, LoadedConfigTask } from '@/types';\nimport { moveFilesAndLog } from '@/utilities/fs.ts';\nimport minimist from 'minimist';\nimport { resolve } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport { prepareParams, params as p } from '@/params';\nimport { mergeConfig, PluginOption, UserConfig } from 'vite';\n\nexport default fusion;\n//\n// const isCliRunning = process.argv[1] && fileURLToPath(import.meta.url) === process.argv[1];\n//\n// if (isCliRunning) {\n//   const params = prepareParams(parseArgv());\n//\n//   runApp(params!);\n// }\n\nconst params = parseArgv(getArgsAfterDoubleDashes(process.argv));\nprepareParams(params);\n\nexport function useFusion(options: FusionVitePluginOptions = {}): PluginOption {\n  let builder: ConfigBuilder;\n\n  return {\n    name: 'fusion',\n    async config(config, env) {\n      let root: string;\n\n      if (config.root) {\n        root = resolve(config.root);\n      } else {\n        root = params.cwd || process.cwd();\n      }\n\n      delete config.root;\n      // delete builder.config.root;\n\n      process.chdir(root);\n\n      builder = new ConfigBuilder(config, env, params);\n\n      // Retrieve config file\n      let tasks: Record<string, LoadedConfigTask>;\n\n      if (typeof options.fusionfile !== 'object') {\n        params.config ??= options.fusionfile;\n        const configFile = mustGetAvailableConfigFile(root, params);\n\n        // Load config\n        tasks = await loadConfigFile(configFile);\n      } else {\n        tasks = { ...options.fusionfile };\n      }\n\n      // Describe tasks\n      if (params.list) {\n        await displayAvailableTasks(tasks);\n        return;\n      }\n\n      // Select running tasks\n      const selectedTasks = selectRunningTasks([...params._] as string[], tasks);\n\n      const runningTasks = (await resolveAllTasksAsProcessors(selectedTasks));\n\n      for (const taskName in runningTasks) {\n        const processors = runningTasks[taskName];\n\n        for (const processor of processors) {\n          await processor.config(taskName, builder);\n        }\n      }\n\n      console.log('plugin bottom', builder.config);\n\n      return builder.config;\n    },\n\n    async writeBundle(options, bundle) {\n      // Todo: override logger to replace vite's files logs\n      // @see https://github.com/windwalker-io/core/issues/1355\n      await moveFilesAndLog(builder.moveFilesMap, options.dir ?? process.cwd());\n\n      for (const callback of builder.postBuildCallbacks) {\n        await callback();\n      }\n    },\n    \n    closeBundle(error) {\n      //\n    },\n  };\n}\n\nexport function mergeViteConfig(config: UserConfig) {\n  ConfigBuilder.defaultConfig = mergeConfig(ConfigBuilder.defaultConfig, config);\n}\n\nexport function outDir(outDir: string) {\n  ConfigBuilder.defaultConfig = mergeConfig<UserConfig, UserConfig>(ConfigBuilder.defaultConfig, {\n    build: {\n      outDir\n    }\n  });\n}\n"],"names":["MinifyOptions","output","dirname","normalize","mergeConfig","cloneDeep","inspect","basename","name","isAbsolute","isVerbose","resolve","params","uniqueId","get","set","relative","build","writeFileSync","task","existsSync","uniq","move","options","outDir"],"mappings":"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"}