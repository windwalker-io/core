{"version":3,"file":"index.cjs","sources":["../src/utilities/arr.ts","../src/processors/css.ts","../src/processors/js.ts","../src/processors/move.ts","../src/processors/copy.ts","../src/processors/link.ts","../src/processors/callback.ts","../src/params.ts","../src/utilities/env.ts","../src/utilities/crypto.ts","../src/utilities/fs.ts","../src/builder/BuildTask.ts","../src/utilities/utilities.ts","../src/builder/ConfigBuilder.ts","../src/runner/app.ts","../src/runner/config.ts","../src/runner/describe.ts","../src/runner/tasks.ts","../src/index.ts"],"sourcesContent":["import { MaybeArray } from 'rollup';\r\n\r\nexport function forceArray<T>(item: T | T[]): T[] {\r\n  if (Array.isArray(item)) {\r\n    return item;\r\n  } else {\r\n    return [item];\r\n  }\r\n}\r\n\r\nexport function handleMaybeArray<T, R>(\r\n  items: T | T[],\r\n  callback: (item: T) => R\r\n): T extends any[] ? R[] : R {\r\n  if (Array.isArray(items)) {\r\n    return items.map(callback) as any;\r\n  } else {\r\n    return callback(items as T) as any;\r\n  }\r\n}\r\n\r\nexport function handleForceArray<T, R>(\r\n  items: T | T[],\r\n  callback: (item: T) => R\r\n): R[] {\r\n  items = forceArray(items);\r\n\r\n  return items.map(callback) as any;\r\n}\r\n\r\nexport function appendToMaybeArray<T>(items: MaybeArray<T>, value: T): T[] {\r\n  if (Array.isArray(items)) {\r\n    items.push(value);\r\n\r\n    return items;\r\n  } else {\r\n    return [items, value];\r\n  }\r\n}\r\n","import BuildTask from '@/builder/BuildTask.ts';\nimport ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface';\nimport { CssOptions, TaskInput, TaskOutput } from '@/types';\nimport { forceArray, handleForceArray, handleMaybeArray } from '@/utilities/arr';\nimport { basename, parse } from 'node:path';\nimport { MaybePromise } from '@/types';\n\nexport function css(\n  input: TaskInput,\n  output?: TaskOutput,\n  options: CssOptions = {}\n): CssProcessor {\n  return new CssProcessor(input, output, options);\n}\n\nexport class CssProcessor implements ProcessorInterface {\n  constructor(protected input: TaskInput, protected output?: TaskOutput, protected options: CssOptions = {}) {\n  }\n\n  config(taskName: string, builder: ConfigBuilder): BuildTask[] {\n    return handleForceArray(this.input, (input) => {\n      const task = builder.addTask(input, taskName);\n\n      builder.assetFileNamesCallbacks.push((assetInfo) => {\n        const name = assetInfo.names[0];\n\n        if (!name) {\n          return undefined;\n        }\n\n        // Rename only if the asset name matches the task id with .css extension\n        if (basename(name, '.css') === task.id) {\n          if (!this.output) {\n            return parse(input).name + '.css';\n          }\n\n          return task.normalizeOutput(this.output, '.css');\n\n          // if (!isAbsolute(name)) {\n          //   return name;\n          // } else {\n          //   builder.moveFilesMap[task.id + '.css'] = name;\n          // }\n        }\n      });\n\n      return task;\n    });\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return forceArray(this.input).map((input) => {\n      return {\n        input,\n        output: this.output || basename(input),\n        extra: {}\n      };\n    });\n  }\n}\n","import BuildTask from '@/builder/BuildTask.ts';\nimport ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\nimport { TaskInput, TaskOutput } from '@/types';\nimport { forceArray, handleForceArray, handleMaybeArray } from '@/utilities/arr';\nimport { basename, parse } from 'node:path';\nimport { MaybePromise } from '@/types';\n\nexport function js(input: TaskInput, output?: TaskOutput): ProcessorInterface {\n  return new JsProcessor(input, output);\n}\n\nexport class JsProcessor implements ProcessorInterface {\n\n  constructor(public input: TaskInput, public output?: TaskOutput) {\n  }\n\n  config(taskName: string, builder: ConfigBuilder): BuildTask[] {\n    return handleForceArray(this.input, (input) => {\n      const task = builder.addTask(input, taskName);\n\n      builder.entryFileNamesCallbacks.push((chunkInfo) => {\n        const name = chunkInfo.name;\n\n        if (!name) {\n          return;\n        }\n\n        // Rename only if the asset name matches the task id with .css extension\n        if (name === task.id) {\n          if (!this.output) {\n            return parse(input).name + '.js';\n          }\n\n          return task.normalizeOutput(this.output);\n\n          // if (!isAbsolute(name)) {\n          //   return name;\n          // } else {\n          //   builder.moveFilesMap[task.id + '.css'] = name;\n          // }\n        }\n      });\n\n      return task;\n    });\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return forceArray(this.input).map((input) => {\n      return {\n        input,\n        output: this.output || basename(input),\n        extra: {}\n      };\n    });\n  }\n}\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\nimport { TaskInput } from '@/types';\nimport { forceArray, handleMaybeArray } from '@/utilities/arr.ts';\nimport { MaybePromise } from '@/types';\nimport { types } from 'sass';\n\nexport function move(input: TaskInput, dest: string) {\n  return new MoveProcessor(input, dest);\n}\n\nexport class MoveProcessor implements ProcessorInterface {\n  constructor(public input: TaskInput, public dest: string) {\n  }\n\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\n    handleMaybeArray(this.input, (input) => {\n      builder.moveTasks.push({ src: input, dest: this.dest, options: {} });\n    });\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return forceArray(this.input).map((input) => {\n      return {\n        input,\n        output: this.dest,\n        extra: {}\n      };\n    });\n  }\n}\n\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\nimport { TaskInput } from '@/types';\nimport { forceArray, handleMaybeArray } from '@/utilities/arr.ts';\nimport { MaybePromise } from '@/types';\n\nexport function copy(input: TaskInput, dest: string) {\n  return new CopyProcessor(input, dest);\n}\n\nexport class CopyProcessor implements ProcessorInterface {\n  constructor(public input: TaskInput, public dest: string) {\n  }\n\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\n    handleMaybeArray(this.input, (input) => {\n      builder.copyTasks.push({ src: input, dest: this.dest, options: {} })\n    });\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return forceArray(this.input).map((input) => {\n      return {\n        input,\n        output: this.dest,\n        extra: {}\n      };\n    });\n  }\n}\n\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\nimport { LinkOptions, TaskInput } from '@/types';\nimport { forceArray, handleMaybeArray } from '@/utilities/arr.ts';\nimport { MaybePromise } from '@/types';\n\nexport function link(input: TaskInput, dest: string, options: LinkOptions = {}) {\n  return new LinkProcessor(input, dest, options);\n}\n\nexport class LinkProcessor implements ProcessorInterface {\n  constructor(public input: TaskInput, public dest: string, public options: LinkOptions = {}) {\n  }\n\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\n    handleMaybeArray(this.input, (input) => {\n      builder.linkTasks.push({ src: input, dest: this.dest, options: this.options });\n    });\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return forceArray(this.input).map((input) => {\n      return {\n        input,\n        output: this.dest,\n        extra: {}\n      };\n    });\n  }\n}\n\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\nimport { MaybePromise } from '@/types';\n\ntype CallbackHandler = (taskName: string, builder: ConfigBuilder) => MaybePromise<any>;\n\nexport function callback(handler: CallbackHandler) {\n  return new CallbackProcessor(handler);\n}\n\nexport function callbackAfterBuild(handler: CallbackHandler) {\n  return new CallbackProcessor(handler, true);\n}\n\nclass CallbackProcessor implements ProcessorInterface {\n  constructor(\n    /** @internal */\n    private handler: CallbackHandler,\n    /** @internal */\n    private afterBuild = false\n  ) {\n  }\n\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<any> {\n    if (this.afterBuild) {\n      builder.postBuildCallbacks.push(() => this.handler(taskName, builder));\n    } else {\n      this.handler(taskName, builder);\n    }\n\n    return undefined;\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return [];\n  }\n}\n\n","import { RunnerCliParams } from '@/types';\n\nlet params: RunnerCliParams | undefined = undefined;\n\nexport function prepareParams(p: RunnerCliParams): RunnerCliParams {\n  params = p;\n\n  isVerbose = params?.verbose ? params?.verbose > 0 : false;\n\n  return p;\n}\n\nlet isVerbose = false;\nconst isProd = process.env.NODE_ENV === 'production';\nconst isDev = !isProd;\n\nexport { isVerbose, isDev, isProd, params };\n","export function isWindows() {\n  return process.platform === 'win32';\n}\n","import Crypto from 'crypto';\r\n\r\nexport function shortHash(bufferOrString: Crypto.BinaryLike, short: number | null = 8): string {\r\n  let hash = Crypto.createHash('sha1')\r\n    .update(bufferOrString)\r\n    .digest('hex');\r\n\r\n  if (short && short > 0) {\r\n    hash = hash.substring(0, short);\r\n  }\r\n\r\n  return hash;\r\n}\r\n\r\n\r\n","import { FileTasks } from '@/types';\nimport { isWindows } from '@/utilities/env.ts';\nimport { shortHash } from '@/utilities/crypto.ts';\nimport fg from 'fast-glob';\nimport fs from 'fs-extra';\nimport { randomBytes } from 'node:crypto';\nimport { dirname, isAbsolute, normalize, relative, resolve } from 'node:path';\nimport { Logger } from 'vite';\n\nfunction handleFilesOperation(\n  src: string,\n  dest: string,\n  options: {\n    outDir: string;\n    handler: (src: string, dest: string) => Promise<any>;\n    globOptions?: fg.Options;\n  }\n) {\n  const promises = [];\n  src = normalizeFilePath(src, options.outDir);\n  dest = normalizeFilePath(dest, options.outDir);\n\n  const base = getGlobBaseFromPattern(src);\n  const sources = isGlob(src)\n    ? fg.globSync(src.replace(/\\\\/g, '/'), options.globOptions)\n    : [src];\n\n  for (let source of sources) {\n    let dir;\n    let resolvedDest = dest;\n\n    if (endsWithSlash(dest)) {\n      dir = resolvedDest;\n      resolvedDest = resolvedDest + relative(base, source);\n    } else {\n      dir = dirname(resolvedDest);\n    }\n\n    fs.ensureDirSync(dir);\n\n    promises.push(options.handler(source, resolvedDest));\n  }\n\n  return promises;\n}\n\nexport function moveFilesAndLog(tasks: FileTasks, outDir: string, logger: Logger) {\n  const promises = [];\n\n  for (const { src, dest, options } of tasks) {\n    const ps = handleFilesOperation(\n      src,\n      dest,\n      {\n        outDir,\n        handler: async (src, dest) => {\n          logger.info(`Moving file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\n          return fs.move(src, dest, { overwrite: true });\n        },\n        globOptions: { onlyFiles: true }\n      }\n    );\n\n    promises.push(...ps);\n  }\n\n  return Promise.all(promises);\n}\n\nexport function copyFilesAndLog(tasks: FileTasks, outDir: string, logger: Logger) {\n  const promises = [];\n\n  for (const { src, dest, options } of tasks) {\n    const ps = handleFilesOperation(\n      src,\n      dest, {\n        outDir,\n        handler: async (src, dest) => {\n          logger.info(`Copy file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\n          return fs.copy(src, dest, { overwrite: true });\n        },\n        globOptions: { onlyFiles: true }\n      }\n    );\n\n    promises.push(...ps);\n  }\n\n  return Promise.all(promises);\n}\n\nexport function linkFilesAndLog(tasks: FileTasks<'link'>, outDir: string, logger: Logger) {\n  const promises = [];\n\n  for (const { src, dest, options } of tasks) {\n    const ps = handleFilesOperation(\n      src,\n      dest, {\n        outDir,\n        handler: async (src, dest) => {\n          logger.info(`Link file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\n          return symlink(src, dest, options?.force ?? false);\n        },\n        globOptions: { onlyFiles: false }\n      }\n    );\n\n    promises.push(...ps);\n  }\n\n  return Promise.all(promises);\n}\n\nexport function cleanFiles(patterns: string[], outDir: string) {\n  const promises = [];\n\n  outDir = outDir.replace(/\\\\/g, '/');\n\n  for (let src of patterns) {\n    src = normalizeFilePath(src, outDir);\n    src = resolve(src);\n    \n    const sources = isGlob(src)\n      ? fg.globSync(src.replace(/\\\\/g, '/'), { onlyFiles: false })\n      : [src];\n\n    // To protect `upload/*` folder.\n    const protectDir = resolve(outDir + '/upload').replace(/\\\\/g, '/');\n\n    for (let source of sources) {\n      if (source.replace(/\\\\/g, '/').startsWith(protectDir)) {\n        throw new Error('Refuse to delete `upload/*` folder.');\n      }\n\n      promises.push(fs.remove(source));\n    }\n  }\n\n  return Promise.all(promises);\n}\n\nexport async function copyGlob(src: string, dest: string): Promise<void> {\n  const promises = handleFilesOperation(\n    src,\n    dest,\n    {\n      outDir: process.cwd(),\n      handler: async (src, dest) => fs.copy(src, dest, { overwrite: true }),\n      globOptions: { onlyFiles: true }\n    }\n  );\n\n  await Promise.all(promises);\n}\n\nexport async function moveGlob(src: string, dest: string): Promise<void> {\n  const promises = handleFilesOperation(\n    src,\n    dest,\n    {\n      outDir: process.cwd(),\n      handler: async (src, dest) => fs.move(src, dest, { overwrite: true }),\n      globOptions: { onlyFiles: true }\n    }\n  );\n\n  await Promise.all(promises);\n}\n\nexport async function symlink(target: string, link: string, force = false) {\n  target = resolve(target);\n  link = resolve(link);\n\n  if (isWindows() && !fs.lstatSync(target).isFile()) {\n    return fs.ensureSymlink(target, link, 'junction');\n  }\n\n  if (isWindows() && fs.lstatSync(target).isFile() && force) {\n    return fs.ensureLink(target, link);\n  }\n\n  return fs.ensureSymlink(target, link);\n}\n\nexport function endsWithSlash(path: string): boolean {\n  return path.endsWith('/') || path.endsWith('\\\\');\n}\n\nexport function getGlobBaseFromPattern(pattern: string) {\n  const specialChars = [\"*\", \"?\", \"[\", \"]\"];\n  const idx = [...pattern].findIndex(c => specialChars.includes(c));\n\n  if (idx === -1) {\n    return dirname(pattern);\n  }\n\n  return dirname(pattern.slice(0, idx + 1));\n}\n\nfunction isGlob(pattern: string): boolean {\n  const specialChars = [\"*\", \"?\", \"[\", \"]\"];\n  return specialChars.some(c => pattern.includes(c));\n}\n\nfunction normalizeFilePath(path: string, outDir: string) {\n  if (path.startsWith('.')) {\n    path = resolve(path);\n  } else if (!isAbsolute(path)) {\n    path = outDir + '/' + path;\n  }\n\n  return path;\n}\n\nexport function fileToId(input: string, group?: string) {\n  input = normalize(input);\n\n  group ||= randomBytes(4).toString('hex');\n\n  return group + '-' + shortHash(input);\n}\n","import { MaybePromise } from '@/types';\nimport { fileToId } from '@/utilities/fs.ts';\nimport { normalize, parse } from 'node:path';\nimport { NormalizedOutputOptions, OutputBundle, PreRenderedChunk } from 'rollup';\n\nexport default class BuildTask {\n  id: string;\n  output?: string | ((chunkInfo: PreRenderedChunk) => any);\n  postCallbacks: ((options: NormalizedOutputOptions, bundle: OutputBundle) => MaybePromise<any>)[] = [];\n\n  constructor(public input: string, public group?: string) {\n    this.id = BuildTask.toFileId(input, group);\n\n    this.input = normalize(input);\n  }\n\n  dest(output?: string | ((chunkInfo: PreRenderedChunk) => any)) {\n    if (typeof output === 'string') {\n      output = this.normalizeOutput(output);\n    }\n\n    this.output = output;\n\n    return this;\n  }\n\n  addPostCallback(callback: () => void) {\n    this.postCallbacks.push(callback);\n    return this;\n  }\n\n  normalizeOutput(output: string, ext = '.js') {\n    if (output.endsWith('/') || output.endsWith('\\\\')) {\n      output += parse(this.input).name + ext;\n    }\n\n    // if (output.startsWith('.')) {\n    //   output = resolve(output);\n    // }\n\n    return output;\n  }\n\n  static toFileId(input: string, group?: string) {\n    return fileToId(input, group);\n  }\n}\n\n","import { OverrideOptions } from '@/types';\nimport { cloneDeep, merge } from 'lodash-es';\nimport { inspect } from 'node:util';\nimport { OutputOptions } from 'rollup';\nimport { mergeConfig, UserConfig } from 'vite';\n\nexport function mergeOptions<T extends Record<string, any> = Record<string, any>>(\n  base: T,\n  ...overrides: (OverrideOptions<T> | undefined)[]\n): T {\n  if (!overrides.length) {\n    return base;\n  }\n\n  for (const override of overrides) {\n    if (!override) {\n      continue;\n    }\n\n    if (typeof override === 'function') {\n      base = override(base) ?? base;\n    } else {\n      // @ts-ignore\n      base = mergeConfig(base, override);\n    }\n  }\n\n  return base;\n}\n\nexport function appendMinFileName(output: OutputOptions): OutputOptions {\n  output = cloneDeep(output);\n\n  if (output.file) {\n    const parts = output.file.split('.');\n    const ext = parts.pop();\n    output.file = `${parts.join('.')}.min.${ext}`;\n  } else if (output.dir && typeof output.entryFileNames === 'string') {\n    const parts = output.entryFileNames.split('.');\n    const ext = parts.pop();\n    output.entryFileNames = `${parts.join('.')}.min.${ext}`;\n  }\n\n  return output;\n}\n\nexport function show(data: any, depth = 10) {\n  console.log(inspect(data, { depth, colors: true }));\n}\n","import BuildTask from '@/builder/BuildTask.ts';\nimport { FileTasks, FusionVitePluginOptions, LinkOptions, RunnerCliParams } from '@/types';\nimport { show } from '@/utilities/utilities.ts';\nimport { get, set } from 'lodash-es';\nimport { isAbsolute, relative } from 'node:path';\nimport { NormalizedOutputOptions, OutputBundle, PreRenderedAsset, PreRenderedChunk, RollupOptions } from 'rollup';\nimport { MaybePromise } from '@/types';\nimport { ConfigEnv, mergeConfig, PluginOption, UserConfig, Plugin } from 'vite';\n\nexport default class ConfigBuilder {\n  static globalOverrideConfig: UserConfig = {};\n  overrideConfig: UserConfig = {};\n\n  entryFileNamesCallbacks: ((chunkInfo: PreRenderedChunk) => string | undefined | void)[] = [];\n  chunkFileNamesCallbacks: ((chunkInfo: PreRenderedChunk) => string | undefined | void)[] = [];\n  assetFileNamesCallbacks: ((chunkInfo: PreRenderedAsset) => string | undefined | void)[] = [];\n\n  moveTasks: FileTasks = [];\n  copyTasks: FileTasks = [];\n  linkTasks: FileTasks<'link'> = [];\n  postBuildCallbacks: ((options: NormalizedOutputOptions, bundle: OutputBundle) => MaybePromise<void>)[] = [];\n  resolveIdCallbacks: Exclude<Plugin['resolveId'], undefined>[] = [];\n  loadCallbacks: Exclude<Plugin['load'], undefined>[] = [];\n  // fileNameMap: Record<string, string> = {};\n\n  // externals: ((source: string, importer: string | undefined, isResolved: boolean) => boolean | string | NullValue)[] = [];\n  watches: string[] = [];\n  cleans: string[] = [];\n\n  tasks: Map<string, BuildTask> = new Map();\n\n  constructor(public config: UserConfig, public env: ConfigEnv, public fusionOptions: FusionVitePluginOptions) {\n    // this.ensurePath('build', {});\n    // this.ensurePath('build.rollupOptions', {\n    //   input: {},\n    //   output: this.getDefaultOutput(),\n    // });\n    // this.ensurePath('plugins', []);\n\n    this.config = mergeConfig<UserConfig, UserConfig>(this.config, {\n      build: {\n        manifest: 'manifest.json',\n        rollupOptions: {\n          preserveEntrySignatures: 'strict',\n          input: {},\n          output: this.getDefaultOutput(),\n          // external: (source: string, importer: string | undefined, isResolved: boolean) => {\n          //   for (const external of this.externals) {\n          //     const result = external(source, importer, isResolved);\n          //\n          //     if (result) {\n          //       return true;\n          //     }\n          //   }\n          // },\n        },\n        emptyOutDir: false,\n        sourcemap: env.mode !== 'production' ? 'inline' : false,\n      },\n      plugins: [],\n      css: {\n        devSourcemap: true,\n      },\n      esbuild: {\n        // Todo: Remove if esbuild supports decorators by default\n        target: 'es2022',\n      }\n    });\n\n    this.addTask('hidden:placeholder');\n  }\n\n  merge(override: UserConfig | ((config: UserConfig) => UserConfig)) {\n    if (typeof override === 'function') {\n      this.config = override(this.config) ?? this.config;\n\n      return this;\n    }\n\n    this.config = mergeConfig(this.config, override);\n\n    return this;\n  }\n\n  private getDefaultOutput(): RollupOptions['output'] {\n    return {\n      entryFileNames: (chunkInfo) => {\n        const name = this.getChunkNameFromTask(chunkInfo);\n\n        if (name) {\n          return name;\n        }\n\n        for (const entryFileNamesCallback of this.entryFileNamesCallbacks) {\n          const name = entryFileNamesCallback(chunkInfo);\n\n          if (name) {\n            return name;\n          }\n        }\n\n        // console.log(chunkInfo, this.relativePath(chunkInfo.facadeModuleId));\n\n        return '[name].js';\n      },\n      chunkFileNames: (chunkInfo) => {\n        const name = this.getChunkNameFromTask(chunkInfo);\n\n        if (name) {\n          return name;\n        }\n\n        for (const chunkFileNamesCallback of this.chunkFileNamesCallbacks) {\n          const name = chunkFileNamesCallback(chunkInfo);\n\n          if (name) {\n            return name;\n          }\n        }\n\n        const chunkDir = this.getChunkDir();\n\n        return `${chunkDir}[name]-[hash].js`;\n      },\n      assetFileNames: (assetInfo) => {\n        // if (this.fileNameMap[assetInfo.name]) {\n        //   assetInfo.name = this.fileNameMap[assetInfo.name];\n        //   return assetInfo.name;\n        // }\n\n        for (const assetFileNamesCallback of this.assetFileNamesCallbacks) {\n          const name = assetFileNamesCallback(assetInfo);\n\n          if (name) {\n            return name;\n          }\n        }\n\n        return '[name].[ext]';\n      }\n    };\n  }\n\n  private getChunkDir(): string {\n    let chunkDir = this.fusionOptions.chunkDir ?? 'chunks';\n    chunkDir.replace(/\\\\/g, '/');\n\n    // Ensure trailing slash\n    if (chunkDir && !chunkDir.endsWith('/')) {\n      chunkDir += '/';\n    }\n\n    if (chunkDir === './' || chunkDir === '/') {\n      chunkDir = '';\n    }\n\n    return chunkDir;\n  }\n\n  private getChunkNameFromTask(chunkInfo: PreRenderedChunk) {\n    if (this.tasks.has(chunkInfo.name)) {\n      const output = this.tasks.get(chunkInfo.name)?.output;\n\n      if (output) {\n        const name = typeof output === 'function' ? output(chunkInfo) : output;\n\n        if (!isAbsolute(name)) {\n          return name;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  ensurePath(path: string, def: any = {}) {\n    if (get(this.config, path) == null) {\n      set(this.config, path, def);\n    }\n\n    return this;\n  }\n\n  get(path: string) {\n    return get(this.config, path);\n  }\n\n  set(path: string, value: any) {\n    set(this.config, path, value);\n    return this;\n  }\n\n  addTask(input: string, group?: string) {\n    const task = new BuildTask(input, group);\n\n    this.tasks.set(task.id, task);\n\n    const inputOptions = this.config.build!.rollupOptions!.input! as Record<string, string>;\n    inputOptions[task.id] = task.input;\n\n    return task;\n  }\n\n  addCleans(...paths: string[]) {\n    this.cleans.push(...paths);\n\n    return this;\n  }\n\n  // addExternals(externals: Externalize) {\n  //   if (Array.isArray(externals)) {\n  //     this.externals.push((rollupOptions) => {\n  //       rollupOptions.external\n  //     })\n  //   } else if (typeof externals === 'object') {\n  //\n  //   } else {\n  //\n  //   }\n  // }\n\n  // addPlugin(plugin: PluginOption) {\n  //   this.config.plugins?.push(plugin);\n  // }\n  //\n  // removePlugin(plugin: string | PluginOption) {\n  //   this.config.plugins = this.config.plugins?.filter((p) => {\n  //     if (!p) {\n  //       return true;\n  //     }\n  //\n  //     if (typeof plugin === 'string' && typeof p === 'object' && 'name' in p) {\n  //       return p.name !== plugin;\n  //     } else if (typeof plugin === 'object' && typeof p === 'object') {\n  //       return p !== plugin;\n  //     }\n  //\n  //     return true;\n  //   });\n  // }\n\n  relativePath(to: string) {\n    return relative(process.cwd(), to);\n  }\n\n  debug() {\n    show(this.config);\n  }\n}\n","import { RunnerCliParams } from '@/types/runner.ts';\nimport yargs from 'yargs';\n\nexport function getArgsAfterDoubleDashes(argv?: string[]): string[] {\n  argv ??= process.argv;\n\n  return argv.slice(2).join(' ')\n    // Split by -- and remove the first part\n    .split(' -- ').slice(1)\n    // Join back and split by space\n    .join(' -- ').trim()\n    // Split back to array and remove empty values\n    .split(' ').filter(v => v !== '');\n}\n\nexport function parseArgv(argv: string[]): RunnerCliParams {\n  const app = yargs();\n\n  // app.option('watch', {\n  //   alias: 'w',\n  //   type: 'boolean',\n  //   description: 'Watch files for changes and re-run the tasks',\n  // });\n\n  app.option('cwd', {\n    type: 'string',\n    description: 'Current working directory',\n  });\n\n  app.option('list', {\n    alias: 'l',\n    type: 'boolean',\n    description: 'List all available tasks',\n  });\n\n  app.option('config', {\n    alias: 'c',\n    type: 'string',\n    description: 'Path to config file',\n  });\n\n  app.option('server-file', {\n    alias: 's',\n    type: 'string',\n    description: 'Path to server file',\n  });\n\n  // app.option('series', {\n  //   alias: 's',\n  //   type: 'boolean',\n  //   description: 'Run tasks in series instead of parallel',\n  // });\n\n  app.option('verbose', {\n    alias: 'v',\n    type: 'count',\n    description: 'Increase verbosity of output. Use multiple times for more verbosity.',\n  });\n\n  return app.parseSync(argv);\n}\n","import { ProcessorInterface } from '@/processors/ProcessorInterface.ts';\r\nimport { forceArray } from '@/utilities/arr.ts';\r\nimport { build } from 'esbuild';\r\nimport Module from 'module';\r\nimport { existsSync, writeFileSync } from 'node:fs';\r\nimport { dirname, isAbsolute, resolve } from 'node:path';\r\nimport { MaybeArray, MaybePromise } from '@/types';\r\nimport { ConfigResult, LoadedConfigTask, RunnerCliParams } from '@/types';\r\n\r\nexport async function loadConfigFile(configFile: ConfigResult): Promise<Record<string, LoadedConfigTask>> {\r\n  let path = configFile.path;\r\n\r\n  // If is Windows, Add \"file://\" prefix to path\r\n  if (process.platform === 'win32') {\r\n    // todo: try use pathToFileURL(): import { pathToFileURL } from 'url';\r\n    // Replace backslash to slash\r\n    const winPath = path.replace(/\\\\/g, '/');\r\n    // Add file:// prefix if not exists\r\n    if (!winPath.startsWith('file://')) {\r\n      // Add extra slash to make it absolute path\r\n      // e.g. C:/path/to/file\r\n      // becomes file:///C:/path/to/file\r\n      path = `file:///${winPath}`;\r\n    }\r\n  }\r\n\r\n  if (configFile.ts) {\r\n    const buildResult = await build({\r\n      entryPoints: [configFile.path],\r\n      bundle: true,\r\n      write: false,\r\n      outdir: 'dist',\r\n      platform: 'node',\r\n      format: 'cjs',\r\n      target: 'esnext',\r\n      external: ['../dist', '../dist/*'],\r\n      packages: 'external',\r\n      sourcemap: 'inline',\r\n    });\r\n    \r\n    const output = buildResult.outputFiles[0];\r\n\r\n    const code = Buffer.from(output.contents).toString('utf8');\r\n    writeFileSync(output.path, code);\r\n    const m = new Module(output.path, undefined);\r\n    m.filename = output.path;\r\n    // @ts-ignore\r\n    m.paths = Module._nodeModulePaths(dirname(output.path));\r\n    // @ts-ignore\r\n    m._compile(code, output.path);\r\n\r\n    return expandModules(m.exports);\r\n  } else {\r\n    const modules = await import(path);\r\n\r\n    return expandModules(modules);\r\n  }\r\n}\r\n\r\nexport function expandModules(modules: Record<string, any>) {\r\n  modules = { ...modules };\r\n\r\n  if (modules.__esModule) {\r\n    delete modules.__esModule;\r\n  }\r\n\r\n  return modules;\r\n}\r\n\r\nexport async function resolveTaskResults(task: LoadedConfigTask) {\r\n  task = await task;\r\n\r\n  return Promise.all(forceArray(task));\r\n}\r\n\r\nexport async function resolveTaskOptions(task: LoadedConfigTask, resolveSubFunctions = false): Promise<ProcessorInterface[]> {\r\n  task = await task;\r\n\r\n  if (!resolveSubFunctions && Array.isArray(task)) {\r\n    const results = await Promise.all(task.map((task) => resolveTaskOptions(task, true)));\r\n    return results.flat();\r\n  }\r\n\r\n  if (typeof task === 'function') {\r\n    return resolvePromisesToFlatArray(await task() as any, task?.name);\r\n  }\r\n\r\n  return resolvePromisesToFlatArray((await task) as MaybeArray<ProcessorInterface>, (task as any)?.name);\r\n}\r\n\r\nasync function resolvePromisesToFlatArray(tasks: MaybeArray<MaybePromise<ProcessorInterface>>, name?: string) {\r\n  if (!Array.isArray(tasks)) {\r\n    return [await tasks];\r\n  }\r\n\r\n  const resolvedTasks = await Promise.all(tasks);\r\n  const returnTasks = [];\r\n\r\n  for (const resolvedTask of resolvedTasks) {\r\n    if (Array.isArray(resolvedTask)) {\r\n      returnTasks.push(...resolvedTask);\r\n    } else {\r\n      returnTasks.push(resolvedTask);\r\n    }\r\n  }\r\n\r\n  return returnTasks;\r\n}\r\n\r\nexport function mustGetAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult {\r\n  const found = getAvailableConfigFile(root, params);\r\n\r\n  if (!found) {\r\n    throw new Error('No config file found. Please create a fusionfile.js or fusionfile.ts in the root directory.');\r\n  }\r\n\r\n  return found;\r\n}\r\n\r\nexport function getAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult | null {\r\n  let found = params?.config;\r\n\r\n  if (found) {\r\n    // If is not absolute of system path(consider Windows), prepend root\r\n    if (!isAbsolute(found)) {\r\n      found = resolve(root, found);\r\n    }\r\n\r\n    if (existsSync(found)) {\r\n      return {\r\n        path: found,\r\n        // get filename from file path\r\n        filename: found.split('/').pop() || '',\r\n        type: getConfigModuleType(found),\r\n        ts: isConfigTypeScript(found),\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  return findDefaultConfig(root);\r\n}\r\n\r\nexport function findDefaultConfig(root: string): ConfigResult | null {\r\n  let file = resolve(root, 'fusionfile.js');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'commonjs',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mjs');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.ts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getConfigModuleType(file: string) {\r\n  let type: 'commonjs' | 'module' | 'unknown' = 'unknown';\r\n\r\n  if (file.endsWith('.cjs')) {\r\n    type = 'commonjs';\r\n  } else if (file.endsWith('.mjs')) {\r\n    type = 'module';\r\n  } else if (file.endsWith('.ts') || file.endsWith('.mts')) {\r\n    type = 'module';\r\n  }\r\n\r\n  return type;\r\n}\r\n\r\nfunction isConfigTypeScript(file: string) {\r\n  return file.endsWith('.ts') || file.endsWith('.mts');\r\n}\r\n","import { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { LoadedConfigTask } from '@/types';\r\nimport { forceArray } from '@/utilities/arr.ts';\r\nimport archy, { type Data } from 'archy';\r\nimport chalk from 'chalk';\r\nimport { MaybeArray } from 'rollup';\r\nimport { UserConfig } from 'vite';\r\nimport { resolveTaskOptions } from './config';\r\n\r\nexport async function displayAvailableTasks(tasks: Record<string, LoadedConfigTask>) {\r\n  const keys = Object.keys(tasks);\r\n\r\n  // Sort put default as first if exists\r\n  keys.sort((a, b) => {\r\n    if (a === 'default') {\r\n      return -1;\r\n    }\r\n\r\n    if (b === 'default') {\r\n      return 1;\r\n    }\r\n\r\n    return a.localeCompare(b);\r\n  });\r\n\r\n  const nodes: Array<Data | string> = [];\r\n\r\n  for (const key of keys) {\r\n    const task = tasks[key];\r\n    // const taskOptions = await resolveTaskOptions(task, true);\r\n\r\n    nodes.push(await describeTasks(key, task));\r\n  }\r\n\r\n  const text = archy({\r\n    label: chalk.magenta('Available Tasks'),\r\n    nodes\r\n  });\r\n\r\n  console.log(text);\r\n}\r\n\r\nasync function describeTasks(name: string, tasks: LoadedConfigTask): Promise<Data> {\r\n  const nodes = [];\r\n  tasks = forceArray(await tasks);\r\n\r\n  for (let task of tasks) {\r\n    const processors = await resolveTaskOptions(task, true);\r\n\r\n    for (const processor of processors) {\r\n      if (typeof processor === 'function') {\r\n        nodes.push(\r\n          await describeTasks((processor as Function).name, processor)\r\n        );\r\n      } else {\r\n        nodes.push(...await describeProcessor(processor));\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    label: chalk.cyan(name),\r\n    nodes\r\n  };\r\n}\r\n\r\nasync function describeProcessor(processor: ProcessorInterface): Promise<string[]> {\r\n  const results = await processor.preview();\r\n\r\n  return Promise.all(results.map((result) => describeProcessorPreview(result)));\r\n}\r\n\r\nasync function describeProcessorPreview(preview: ProcessorPreview): Promise<string> {\r\n  const str = [];\r\n\r\n  const { input: entry, output, extra } = preview;\r\n\r\n  // Input\r\n  const inputStr = chalk.yellow(entry);\r\n  // if (typeof entry === 'string') {\r\n  //   inputStr = chalk.yellow(entry);\r\n  // } else if (Array.isArray(entry)) {\r\n  //   inputStr = chalk.yellow(entry.join(', '));\r\n  // } else if (typeof entry === 'object') {\r\n  //   inputStr = chalk.yellow(Object.values(entry).join(', '));\r\n  // }\r\n  str.push(`Input: ${inputStr}`);\r\n\r\n  // Output\r\n  // if (output) {\r\n  //   const outputs = Array.isArray(output) ? output : [output];\r\n  //   outputs.forEach((output, index) => {\r\n  //     let outStr = '';\r\n  //     if (output.file) {\r\n  //       outStr = chalk.green(output.file);\r\n  //     } else if (output.dir) {\r\n  //       outStr = chalk.green(output.dir);\r\n  //     }\r\n  //     str.push(`Output[${index}]: ${outStr}`);\r\n  //   });\r\n  // }\r\n\r\n  const outStr = chalk.green(output);\r\n  str.push(`Output: ${outStr}`);\r\n\r\n  return str.join(\" - \");\r\n}\r\n\r\nfunction countTask(task: MaybeArray<UserConfig>) {\r\n  if (Array.isArray(task)) {\r\n    return task.length;\r\n  }\r\n\r\n  return 1;\r\n}\r\n","import { ProcessorInterface } from '@/processors/ProcessorInterface.ts';\r\nimport chalk from 'chalk';\r\nimport { uniq } from 'lodash-es';\r\nimport { MaybeArray } from 'rollup';\r\nimport { resolveTaskOptions } from '@/runner/config';\r\nimport { LoadedConfigTask, RunningTasks } from '@/types/runner.ts';\r\nimport { UserConfig } from 'vite';\r\n\r\nexport function selectRunningTasks(\r\n  input: string[],\r\n  tasks: Record<string, LoadedConfigTask>\r\n): Record<string, LoadedConfigTask> {\r\n  input = uniq(input);\r\n\r\n  if (input.length === 0) {\r\n    input.push('default');\r\n  }\r\n\r\n  const selected: Record<string, LoadedConfigTask> = {};\r\n\r\n  for (const name of input) {\r\n    if (tasks[name]) {\r\n      selected[name] = tasks[name];\r\n    } else {\r\n      throw new Error(`Task \"${chalk.cyan(name)}\" not found in fusion config.`);\r\n    }\r\n  }\r\n\r\n  return selected;\r\n}\r\n\r\nexport async function resolveAllTasksAsProcessors(tasks: Record<string, LoadedConfigTask>): Promise<RunningTasks> {\r\n  const cache: Record<string, MaybeArray<LoadedConfigTask>> = {};\r\n  const allTasks: RunningTasks = {};\r\n\r\n  for (const name in tasks) {\r\n    const task = tasks[name];\r\n\r\n    allTasks[name] = (await resolveTaskAsFlat(name, task, cache));\r\n  }\r\n\r\n  return allTasks;\r\n}\r\n\r\nexport async function resolveTaskAsFlat(\r\n  name: string,\r\n  task: LoadedConfigTask,\r\n  cache: Record<string, MaybeArray<LoadedConfigTask>>\r\n): Promise<ProcessorInterface[]> {\r\n  const results: ProcessorInterface[] = [];\r\n\r\n  if (Array.isArray(task)) {\r\n    for (const n in task) {\r\n      const t = task[n];\r\n      results.push(...await resolveTaskAsFlat(n, t, cache));\r\n    }\r\n  } else if (typeof task === 'function') {\r\n    name = task.name || name;\r\n\r\n    if (cache[name]) {\r\n      return [];\r\n    }\r\n\r\n    cache[name] = task;\r\n\r\n    const resolved = await resolveTaskOptions(task, true);\r\n\r\n    if (Array.isArray(resolved)) {\r\n      for (const n in resolved) {\r\n        const t = resolved[n];\r\n        results.push(...await resolveTaskAsFlat(n, t, cache));\r\n      }\r\n    }\r\n  } else {\r\n    results.push(await task);\r\n  }\r\n\r\n  return results;\r\n}\r\n","export * from '@/dep';\nimport * as fusion from '@/dep';\nimport ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { prepareParams } from '@/params';\nimport { getArgsAfterDoubleDashes, parseArgv } from '@/runner/app';\nimport { expandModules, loadConfigFile, mustGetAvailableConfigFile } from '@/runner/config';\nimport { displayAvailableTasks } from '@/runner/describe.ts';\nimport { resolveAllTasksAsProcessors, selectRunningTasks } from '@/runner/tasks.ts';\nimport { FusionPlugin, FusionVitePluginOptions, FusionVitePluginUnresolved, LoadedConfigTask } from '@/types';\nimport { forceArray } from '@/utilities/arr.ts';\nimport { cleanFiles, copyFilesAndLog, linkFilesAndLog, moveFilesAndLog } from '@/utilities/fs.ts';\nimport { mergeOptions, show } from '@/utilities/utilities.ts';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport { uniq } from 'lodash-es';\nimport { existsSync, writeFileSync } from 'node:fs';\nimport { relative, resolve } from 'node:path';\nimport micromatch from 'micromatch';\nimport { Logger, mergeConfig, PluginOption, ResolvedConfig, UserConfig } from 'vite';\n\nlet params = parseArgv(getArgsAfterDoubleDashes(process.argv));\nprepareParams(params);\n\nexport let builder: ConfigBuilder;\n\nconst originalTasks = params._;\nconst extraVitePlugins: FusionPlugin[] = [];\n\nexport function useFusion(fusionOptions: FusionVitePluginUnresolved = {}, tasks?: string | string[]): PluginOption {\n  let logger: Logger;\n  let resolvedConfig: ResolvedConfig;\n  let exitHandlersBound = false;\n\n  const resolvedOptions = prepareFusionOptions(fusionOptions);\n\n  if (\n    typeof tasks === 'string'\n    || (Array.isArray(tasks) && tasks.length > 0)\n  ) {\n    params._ = forceArray(tasks);\n  } else {\n    params._ = originalTasks;\n  }\n\n  params = mergeOptions(params, resolvedOptions.cliParams);\n\n  return [\n    {\n      name: 'fusion',\n      configResolved(config) {\n        resolvedConfig = config;\n\n        logger = config.logger;\n\n        // @ts-ignore\n        config.plugins.push(...extraVitePlugins);\n\n        for (const plugin of (config.plugins as FusionPlugin[])) {\n          if ('buildConfig' in plugin) {\n            plugin.buildConfig?.(builder);\n          }\n        }\n      },\n      async config(config, env) {\n        let root: string;\n\n        if (config.root) {\n          root = resolve(config.root);\n        } else {\n          root = params.cwd || process.cwd();\n        }\n\n        delete config.root;\n        // delete builder.config.root;\n\n        process.chdir(root);\n\n        builder = new ConfigBuilder(config, env, resolvedOptions);\n\n        // Retrieve config file\n        let tasks: Record<string, LoadedConfigTask>;\n\n        if (typeof resolvedOptions.fusionfile === 'string' || !resolvedOptions.fusionfile) {\n          params.config ??= resolvedOptions.fusionfile;\n          const configFile = mustGetAvailableConfigFile(root, params);\n\n          // Load config\n          tasks = await loadConfigFile(configFile);\n        } else if (typeof resolvedOptions.fusionfile === 'function') {\n          tasks = expandModules(await resolvedOptions.fusionfile());\n        } else {\n          tasks = expandModules(resolvedOptions.fusionfile);\n        }\n\n        // Describe tasks\n        if (params.list) {\n          await displayAvailableTasks(tasks);\n          return;\n        }\n\n        // Select running tasks\n        const selectedTasks = selectRunningTasks([...params._] as string[], tasks);\n\n        const runningTasks = (await resolveAllTasksAsProcessors(selectedTasks));\n\n        for (const taskName in runningTasks) {\n          const processors = runningTasks[taskName];\n\n          for (const processor of processors) {\n            await processor.config(taskName, builder);\n          }\n        }\n\n        builder.merge(ConfigBuilder.globalOverrideConfig);\n        builder.merge(builder.overrideConfig);\n\n        // for (const plugin of plugins) {\n        //   if (plugin.buildConfig) {\n        //     await plugin.buildConfig(builder, env);\n        //   }\n        // }\n\n        // console.log('plugin bottom', builder.config);\n        //\n        // show(builder.overrideConfig, 15)\n        // show(builder.config, 15)\n\n        return builder.config;\n      },\n      outputOptions(options) {\n        // Protect upload folder\n        if (resolvedConfig.build.emptyOutDir) {\n          const dir = resolvedConfig.build.outDir;\n          const uploadDir = resolve(dir, 'upload');\n\n          if (existsSync(uploadDir)) {\n            throw new Error(\n              `The output directory: \"${dir}\" contains an \"upload\" folder, please move this folder away or set an different fusion outDir.`\n            );\n          }\n        }\n      },\n      async buildStart(options) {\n        if (builder.cleans.length > 0 && resolvedConfig.command !== 'serve') {\n          await cleanFiles(builder.cleans, resolvedConfig.build.outDir || process.cwd());\n        }\n      },\n\n      // Server\n      configureServer(server) {\n        server.httpServer?.once('listening', () => {\n          // Build listening Host\n          const scheme = server.config.server.https ? 'https' : 'http';\n          const address = server.httpServer?.address();\n          const host = address && typeof address !== 'string' ? address.address : 'localhost';\n          const port = address && typeof address !== 'string' ? address.port : 80;\n\n          const url = `${scheme}://${host}:${port}/`;\n\n          // Build & write server file\n          const serverFile = resolve(\n            server.config.root,\n            resolvedOptions.cliParams?.serverFile ?? 'tmp/vite-server'\n          );\n\n          writeFileSync(resolve(server.config.root, serverFile), url);\n\n          // Bind exit signals\n          if (!exitHandlersBound) {\n            process.on(\"exit\", () => {\n              if (fs.existsSync(serverFile)) {\n                fs.rmSync(serverFile);\n              }\n            });\n            process.on(\"SIGINT\", () => process.exit());\n            process.on(\"SIGTERM\", () => process.exit());\n            process.on(\"SIGHUP\", () => process.exit());\n            exitHandlersBound = true;\n          }\n        });\n\n        const watches = builder.watches.map((p) => resolve(p).replace(/\\\\/g, '/'));\n\n        server.watcher.add(watches);\n\n        const checkReload = (path: string) => {\n          if (micromatch.isMatch(path, watches)) {\n            server.ws.send({ type: 'full-reload', path: '*' });\n\n            logger.info(\n              `${chalk.green('full reload')} ${chalk.dim(relative(process.cwd(), path))}`,\n              { timestamp: true }\n            )\n          }\n        };\n\n        server.watcher.on('add', checkReload);\n        server.watcher.on('change', checkReload);\n      },\n      // async handleHotUpdate(ctx) {\n      //   if (builder.watches.includes(ctx.file)) {\n      //     if (ctx.modules.length > 0) {\n      //       return ctx.modules;\n      //     }\n      //\n      //     const modules = ctx.server.moduleGraph.getModulesByFile(ctx.file);\n      //\n      //     if (modules) {\n      //       return [...modules];\n      //     }\n      //\n      //     // const resolved = await ctx.server.pluginContainer.resolveId(ctx.file);\n      //     // if (resolved) {\n      //     //   const vm = server.moduleGraph.getModuleById(resolved.id) || server.moduleGraph.getModuleById(virtualPrefixId)\n      //     //   if (vm) {\n      //     //     return [vm]\n      //     //   }\n      //     // }\n      //\n      //     ctx.server.ws.send({ type: 'full-reload', path: '*' })\n      //\n      //     return [];\n      //   }\n      // }\n    },\n    {\n      name: 'fusion:pre-handles',\n      enforce: 'pre',\n      async resolveId(source, importer, options) {\n        for (const resolveId of builder.resolveIdCallbacks) {\n          if (typeof resolveId !== 'function') {\n            continue;\n          }\n\n          const result = await resolveId.call(this, source, importer, options);\n\n          if (result) {\n            return result;\n          }\n        }\n\n        if (source.startsWith('hidden:')) {\n          return source;\n        }\n      },\n      async load(source, options) {\n        for (const load of builder.loadCallbacks) {\n          if (typeof load !== 'function') {\n            continue;\n          }\n\n          const result = await load.call(this, source, options);\n\n          if (result) {\n            return result;\n          }\n        }\n\n        if (source.startsWith('hidden:')) {\n          return '';\n        }\n      },\n    },\n    {\n      name: 'fusion:post-handles',\n      generateBundle(options, bundle) {\n        for (const [fileName, chunk] of Object.entries(bundle)) {\n          if (chunk.type === 'chunk' && chunk.facadeModuleId?.startsWith('hidden:')) {\n            delete bundle[fileName];\n          }\n        }\n      },\n      async writeBundle(options, bundle) {\n        const outDir = resolvedConfig.build.outDir || process.cwd();\n\n        // Todo: override logger to replace vite's files logs\n        // @see https://github.com/windwalker-io/core/issues/1355\n        await moveFilesAndLog(builder.moveTasks, outDir, logger);\n        await copyFilesAndLog(builder.copyTasks, outDir, logger);\n        await linkFilesAndLog(builder.linkTasks, outDir, logger);\n\n        for (const callback of builder.postBuildCallbacks) {\n          await callback(options, bundle);\n        }\n\n        for (const [name, task] of builder.tasks) {\n          for (const callback of task.postCallbacks) {\n            await callback(options, bundle);\n          }\n        }\n      },\n    },\n  ];\n}\n\nfunction prepareFusionOptions(options: FusionVitePluginUnresolved): FusionVitePluginOptions {\n  if (typeof options === 'string') {\n    return {\n      fusionfile: options,\n    };\n  }\n\n  if (typeof options === 'function') {\n    return {\n      fusionfile: options,\n    };\n  }\n\n  return options;\n}\n\nexport function configureBuilder(handler: (builder: ConfigBuilder) => void) {\n  handler(builder);\n}\n\nexport function mergeViteConfig(config: UserConfig | null) {\n  // if (config === null) {\n  //   ConfigBuilder.globalOverrideConfig = {};\n  //   return;\n  // }\n  //\n  // ConfigBuilder.globalOverrideConfig = mergeConfig(ConfigBuilder.globalOverrideConfig, config);\n  if (config === null) {\n    builder.overrideConfig = {};\n    return;\n  }\n\n  builder.overrideConfig = mergeConfig(builder.overrideConfig, config);\n}\n\nexport function outDir(outDir: string) {\n  // ConfigBuilder.globalOverrideConfig = mergeConfig<UserConfig, UserConfig>(ConfigBuilder.globalOverrideConfig, {\n  //   build: {\n  //     outDir\n  //   }\n  // });\n  builder.overrideConfig = mergeConfig<UserConfig, UserConfig>(builder.overrideConfig, {\n    build: {\n      outDir\n    }\n  });\n}\n\nexport function chunkDir(dir: string) {\n  builder.fusionOptions.chunkDir = dir;\n}\n\nexport function alias(src: string, dest: string) {\n  builder.overrideConfig = mergeConfig<UserConfig, UserConfig>(builder.overrideConfig, {\n    resolve: {\n      alias: {\n        [src]: dest\n      }\n    }\n  });\n}\n\nexport function external(match: string, varName?: string) {\n  const globals: Record<string, string> = {};\n\n  if (varName) {\n    globals[match] = varName;\n  }\n\n  builder.overrideConfig = mergeConfig<UserConfig, UserConfig>(builder.overrideConfig, {\n    build: {\n      rollupOptions: {\n        external: [match],\n        output: {\n          globals\n        }\n      }\n    }\n  });\n}\n\nexport function plugin(...plugins: FusionPlugin[]) {\n  extraVitePlugins.push(...plugins);\n}\n\nexport function clean(...paths: string[]) {\n  builder.addCleans(...paths);\n\n  builder.cleans = uniq(builder.cleans);\n}\n\nexport function fullReloads(...paths: string[]) {\n  builder.watches.push(...paths);\n\n  builder.watches = uniq(builder.watches);\n}\n\nexport default {\n  ...fusion,\n  useFusion,\n  configureBuilder,\n  mergeViteConfig,\n  outDir,\n  chunkDir,\n  alias,\n  external,\n  plugin,\n  clean,\n  fullReloads,\n  params,\n};\n"],"names":["basename","parse","params","isVerbose","relative","dirname","src","dest","resolve","isAbsolute","normalize","randomBytes","mergeConfig","inspect","name","get","set","build","writeFileSync","task","existsSync","uniq","builder","plugin","tasks","fs","outDir"],"mappings":"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"}