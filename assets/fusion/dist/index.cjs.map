{"version":3,"file":"index.cjs","sources":["../src/utilities/arr.ts","../src/processors/css.ts","../src/processors/js.ts","../src/processors/move.ts","../src/processors/copy.ts","../src/processors/link.ts","../src/processors/callback.ts","../src/params.ts","../src/utilities/env.ts","../src/utilities/crypto.ts","../src/utilities/fs.ts","../src/builder/BuildTask.ts","../src/utilities/utilities.ts","../src/builder/ConfigBuilder.ts","../src/runner/app.ts","../src/runner/config.ts","../src/runner/describe.ts","../src/runner/tasks.ts","../src/index.ts"],"sourcesContent":["import { MaybeArray } from 'rollup';\r\n\r\nexport function forceArray<T>(item: T | T[]): T[] {\r\n  if (Array.isArray(item)) {\r\n    return item;\r\n  } else {\r\n    return [item];\r\n  }\r\n}\r\n\r\nexport function handleMaybeArray<T, R>(\r\n  items: T | T[],\r\n  callback: (item: T) => R\r\n): T extends any[] ? R[] : R {\r\n  if (Array.isArray(items)) {\r\n    return items.map(callback) as any;\r\n  } else {\r\n    return callback(items as T) as any;\r\n  }\r\n}\r\n\r\nexport function handleForceArray<T, R>(\r\n  items: T | T[],\r\n  callback: (item: T) => R\r\n): R[] {\r\n  items = forceArray(items);\r\n\r\n  return items.map(callback) as any;\r\n}\r\n\r\nexport function appendToMaybeArray<T>(items: MaybeArray<T>, value: T): T[] {\r\n  if (Array.isArray(items)) {\r\n    items.push(value);\r\n\r\n    return items;\r\n  } else {\r\n    return [items, value];\r\n  }\r\n}\r\n","import BuildTask from '@/builder/BuildTask.ts';\nimport ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface';\nimport { CssOptions, TaskInput, TaskOutput } from '@/types';\nimport { forceArray, handleForceArray, handleMaybeArray } from '@/utilities/arr';\nimport { basename, parse } from 'node:path';\nimport { MaybePromise } from '@/types';\n\nexport function css(\n  input: TaskInput,\n  output?: TaskOutput,\n  options: CssOptions = {}\n): CssProcessor {\n  return new CssProcessor(input, output, options);\n}\n\nexport class CssProcessor implements ProcessorInterface {\n  constructor(protected input: TaskInput, protected output?: TaskOutput, protected options: CssOptions = {}) {\n  }\n\n  config(taskName: string, builder: ConfigBuilder): BuildTask[] {\n    return handleForceArray(this.input, (input) => {\n      const task = builder.addTask(input, taskName);\n\n      builder.assetFileNamesCallbacks.push((assetInfo) => {\n        const name = assetInfo.names[0];\n\n        if (!name) {\n          return undefined;\n        }\n\n        // Rename only if the asset name matches the task id with .css extension\n        if (basename(name, '.css') === task.id) {\n          if (!this.output) {\n            return parse(input).name + '.css';\n          }\n\n          return task.normalizeOutput(this.output, '.css');\n\n          // if (!isAbsolute(name)) {\n          //   return name;\n          // } else {\n          //   builder.moveFilesMap[task.id + '.css'] = name;\n          // }\n        }\n      });\n\n      return task;\n    });\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return forceArray(this.input).map((input) => {\n      return {\n        input,\n        output: this.output || basename(input),\n        extra: {}\n      };\n    });\n  }\n}\n","import BuildTask from '@/builder/BuildTask.ts';\nimport ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\nimport { TaskInput, TaskOutput } from '@/types';\nimport { forceArray, handleForceArray, handleMaybeArray } from '@/utilities/arr';\nimport { basename, parse } from 'node:path';\nimport { MaybePromise } from '@/types';\n\nexport function js(input: TaskInput, output?: TaskOutput): ProcessorInterface {\n  return new JsProcessor(input, output);\n}\n\nexport class JsProcessor implements ProcessorInterface {\n\n  constructor(public input: TaskInput, public output?: TaskOutput) {\n  }\n\n  config(taskName: string, builder: ConfigBuilder): BuildTask[] {\n    return handleForceArray(this.input, (input) => {\n      const task = builder.addTask(input, taskName);\n\n      builder.entryFileNamesCallbacks.push((chunkInfo) => {\n        const name = chunkInfo.name;\n\n        if (!name) {\n          return;\n        }\n\n        // Rename only if the asset name matches the task id with .css extension\n        if (name === task.id) {\n          if (!this.output) {\n            return parse(input).name + '.js';\n          }\n\n          return task.normalizeOutput(this.output);\n\n          // if (!isAbsolute(name)) {\n          //   return name;\n          // } else {\n          //   builder.moveFilesMap[task.id + '.css'] = name;\n          // }\n        }\n      });\n\n      return task;\n    });\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return forceArray(this.input).map((input) => {\n      return {\n        input,\n        output: this.output || basename(input),\n        extra: {}\n      };\n    });\n  }\n}\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\nimport { TaskInput } from '@/types';\nimport { forceArray, handleMaybeArray } from '@/utilities/arr.ts';\nimport { MaybePromise } from '@/types';\nimport { types } from 'sass';\n\nexport function move(input: TaskInput, dest: string) {\n  return new MoveProcessor(input, dest);\n}\n\nexport class MoveProcessor implements ProcessorInterface {\n  constructor(public input: TaskInput, public dest: string) {\n  }\n\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\n    handleMaybeArray(this.input, (input) => {\n      builder.moveTasks.push({ src: input, dest: this.dest, options: {} });\n    });\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return forceArray(this.input).map((input) => {\n      return {\n        input,\n        output: this.dest,\n        extra: {}\n      };\n    });\n  }\n}\n\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\nimport { TaskInput } from '@/types';\nimport { forceArray, handleMaybeArray } from '@/utilities/arr.ts';\nimport { MaybePromise } from '@/types';\n\nexport function copy(input: TaskInput, dest: string) {\n  return new CopyProcessor(input, dest);\n}\n\nexport class CopyProcessor implements ProcessorInterface {\n  constructor(public input: TaskInput, public dest: string) {\n  }\n\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\n    handleMaybeArray(this.input, (input) => {\n      builder.copyTasks.push({ src: input, dest: this.dest, options: {} })\n    });\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return forceArray(this.input).map((input) => {\n      return {\n        input,\n        output: this.dest,\n        extra: {}\n      };\n    });\n  }\n}\n\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\nimport { LinkOptions, TaskInput } from '@/types';\nimport { forceArray, handleMaybeArray } from '@/utilities/arr.ts';\nimport { MaybePromise } from '@/types';\n\nexport function link(input: TaskInput, dest: string, options: LinkOptions = {}) {\n  return new LinkProcessor(input, dest, options);\n}\n\nexport class LinkProcessor implements ProcessorInterface {\n  constructor(public input: TaskInput, public dest: string, public options: LinkOptions = {}) {\n  }\n\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\n    handleMaybeArray(this.input, (input) => {\n      builder.linkTasks.push({ src: input, dest: this.dest, options: this.options });\n    });\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return forceArray(this.input).map((input) => {\n      return {\n        input,\n        output: this.dest,\n        extra: {}\n      };\n    });\n  }\n}\n\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\nimport { MaybePromise } from '@/types';\n\ntype CallbackHandler = (taskName: string, builder: ConfigBuilder) => MaybePromise<any>;\n\nexport function callback(handler: CallbackHandler) {\n  return new CallbackProcessor(handler);\n}\n\nexport function callbackAfterBuild(handler: CallbackHandler) {\n  return new CallbackProcessor(handler, true);\n}\n\nclass CallbackProcessor implements ProcessorInterface {\n  constructor(\n    /** @internal */\n    private handler: CallbackHandler,\n    /** @internal */\n    private afterBuild = false\n  ) {\n  }\n\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<any> {\n    if (this.afterBuild) {\n      builder.postBuildCallbacks.push(() => this.handler(taskName, builder));\n    } else {\n      this.handler(taskName, builder);\n    }\n\n    return undefined;\n  }\n\n  preview(): MaybePromise<ProcessorPreview[]> {\n    return [];\n  }\n}\n\n","import { RunnerCliParams } from '@/types';\n\nlet params: RunnerCliParams | undefined = undefined;\n\nexport function prepareParams(p: RunnerCliParams): RunnerCliParams {\n  params = p;\n\n  isVerbose = params?.verbose ? params?.verbose > 0 : false;\n\n  return p;\n}\n\nlet isVerbose = false;\nconst isProd = process.env.NODE_ENV === 'production';\nconst isDev = !isProd;\n\nexport { isVerbose, isDev, isProd, params };\n","export function isWindows() {\n  return process.platform === 'win32';\n}\n","import Crypto from 'crypto';\r\n\r\nexport function shortHash(bufferOrString: Crypto.BinaryLike, short: number | null = 8): string {\r\n  let hash = Crypto.createHash('sha1')\r\n    .update(bufferOrString)\r\n    .digest('hex');\r\n\r\n  if (short && short > 0) {\r\n    hash = hash.substring(0, short);\r\n  }\r\n\r\n  return hash;\r\n}\r\n\r\n\r\n","import { FileTasks } from '@/types';\nimport { isWindows } from '@/utilities/env.ts';\nimport { shortHash } from '@/utilities/crypto.ts';\nimport fg from 'fast-glob';\nimport fs from 'fs-extra';\nimport { randomBytes } from 'node:crypto';\nimport { dirname, isAbsolute, normalize, relative, resolve } from 'node:path';\nimport { Logger } from 'vite';\n\nfunction handleFilesOperation(\n  src: string,\n  dest: string,\n  options: {\n    outDir: string;\n    handler: (src: string, dest: string) => Promise<any>;\n    globOptions?: fg.Options;\n  }\n) {\n  const promises = [];\n  src = normalizeFilePath(src, options.outDir);\n  dest = normalizeFilePath(dest, options.outDir);\n\n  const base = getGlobBaseFromPattern(src);\n  const sources = isGlob(src)\n    ? fg.globSync(src.replace(/\\\\/g, '/'), options.globOptions)\n    : [src];\n\n  for (let source of sources) {\n    let dir;\n    let resolvedDest = dest;\n\n    if (endsWithSlash(dest)) {\n      dir = resolvedDest;\n      resolvedDest = resolvedDest + relative(base, source);\n    } else {\n      dir = dirname(resolvedDest);\n    }\n\n    fs.ensureDirSync(dir);\n\n    promises.push(options.handler(source, resolvedDest));\n  }\n\n  return promises;\n}\n\nexport function moveFilesAndLog(tasks: FileTasks, outDir: string, logger: Logger) {\n  const promises = [];\n\n  for (const { src, dest, options } of tasks) {\n    const ps = handleFilesOperation(\n      src,\n      dest,\n      {\n        outDir,\n        handler: async (src, dest) => {\n          logger.info(`Moving file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\n          return fs.move(src, dest, { overwrite: true });\n        },\n        globOptions: { onlyFiles: true }\n      }\n    );\n\n    promises.push(...ps);\n  }\n\n  return Promise.all(promises);\n}\n\nexport function copyFilesAndLog(tasks: FileTasks, outDir: string, logger: Logger) {\n  const promises = [];\n\n  for (const { src, dest, options } of tasks) {\n    const ps = handleFilesOperation(\n      src,\n      dest, {\n        outDir,\n        handler: async (src, dest) => {\n          logger.info(`Copy file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\n          return fs.copy(src, dest, { overwrite: true });\n        },\n        globOptions: { onlyFiles: true }\n      }\n    );\n\n    promises.push(...ps);\n  }\n\n  return Promise.all(promises);\n}\n\nexport function linkFilesAndLog(tasks: FileTasks<'link'>, outDir: string, logger: Logger) {\n  const promises = [];\n\n  for (const { src, dest, options } of tasks) {\n    const ps = handleFilesOperation(\n      src,\n      dest, {\n        outDir,\n        handler: async (src, dest) => {\n          logger.info(`Link file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\n          return symlink(src, dest, options?.force ?? false);\n        },\n        globOptions: { onlyFiles: false }\n      }\n    );\n\n    promises.push(...ps);\n  }\n\n  return Promise.all(promises);\n}\n\nexport function cleanFiles(patterns: string[], outDir: string) {\n  const promises = [];\n\n  outDir = outDir.replace(/\\\\/g, '/');\n\n  for (let src of patterns) {\n    src = normalizeFilePath(src, outDir);\n    src = resolve(src);\n    \n    const sources = isGlob(src)\n      ? fg.globSync(src.replace(/\\\\/g, '/'), { onlyFiles: false })\n      : [src];\n\n    // To protect `upload/*` folder.\n    const protectDir = resolve(outDir + '/upload').replace(/\\\\/g, '/');\n\n    for (let source of sources) {\n      if (source.replace(/\\\\/g, '/').startsWith(protectDir)) {\n        throw new Error('Refuse to delete `upload/*` folder.');\n      }\n\n      promises.push(fs.remove(source));\n    }\n  }\n\n  return Promise.all(promises);\n}\n\nexport async function copyGlob(src: string, dest: string): Promise<void> {\n  const promises = handleFilesOperation(\n    src,\n    dest,\n    {\n      outDir: process.cwd(),\n      handler: async (src, dest) => fs.copy(src, dest, { overwrite: true }),\n      globOptions: { onlyFiles: true }\n    }\n  );\n\n  await Promise.all(promises);\n}\n\nexport async function moveGlob(src: string, dest: string): Promise<void> {\n  const promises = handleFilesOperation(\n    src,\n    dest,\n    {\n      outDir: process.cwd(),\n      handler: async (src, dest) => fs.move(src, dest, { overwrite: true }),\n      globOptions: { onlyFiles: true }\n    }\n  );\n\n  await Promise.all(promises);\n}\n\nexport async function symlink(target: string, link: string, force = false) {\n  if (isWindows() && !fs.lstatSync(target).isFile()) {\n    return fs.ensureSymlink(target, link, 'junction');\n  }\n\n  if (isWindows() && fs.lstatSync(target).isFile() && force) {\n    return fs.ensureLink(target, link);\n  }\n\n  return fs.ensureSymlink(target, link);\n}\n\nexport function endsWithSlash(path: string): boolean {\n  return path.endsWith('/') || path.endsWith('\\\\');\n}\n\nexport function getGlobBaseFromPattern(pattern: string) {\n  const specialChars = [\"*\", \"?\", \"[\", \"]\"];\n  const idx = [...pattern].findIndex(c => specialChars.includes(c));\n\n  if (idx === -1) {\n    return dirname(pattern);\n  }\n\n  return dirname(pattern.slice(0, idx + 1));\n}\n\nfunction isGlob(pattern: string): boolean {\n  const specialChars = [\"*\", \"?\", \"[\", \"]\"];\n  return specialChars.some(c => pattern.includes(c));\n}\n\nfunction normalizeFilePath(path: string, outDir: string) {\n  if (path.startsWith('.')) {\n    path = resolve(path);\n  } else if (!isAbsolute(path)) {\n    path = outDir + '/' + path;\n  }\n\n  return path;\n}\n\nexport function fileToId(input: string, group?: string) {\n  input = normalize(input);\n\n  group ||= randomBytes(4).toString('hex');\n\n  return group + '-' + shortHash(input);\n}\n","import { MaybePromise } from '@/types';\nimport { fileToId } from '@/utilities/fs.ts';\nimport { normalize, parse } from 'node:path';\nimport { PreRenderedChunk } from 'rollup';\n\nexport default class BuildTask {\n  id: string;\n  output?: string | ((chunkInfo: PreRenderedChunk) => any);\n  postCallbacks: (() => MaybePromise<any>)[] = [];\n\n  constructor(public input: string, public group?: string) {\n    this.id = BuildTask.toFileId(input, group);\n\n    this.input = normalize(input);\n  }\n\n  dest(output?: string | ((chunkInfo: PreRenderedChunk) => any)) {\n    if (typeof output === 'string') {\n      output = this.normalizeOutput(output);\n    }\n\n    this.output = output;\n\n    return this;\n  }\n\n  addPostCallback(callback: () => void) {\n    this.postCallbacks.push(callback);\n    return this;\n  }\n\n  normalizeOutput(output: string, ext = '.js') {\n    if (output.endsWith('/') || output.endsWith('\\\\')) {\n      output += parse(this.input).name + ext;\n    }\n\n    // if (output.startsWith('.')) {\n    //   output = resolve(output);\n    // }\n\n    return output;\n  }\n\n  static toFileId(input: string, group?: string) {\n    return fileToId(input, group);\n  }\n}\n\n","import { OverrideOptions } from '@/types';\nimport { cloneDeep, merge } from 'lodash-es';\nimport { inspect } from 'node:util';\nimport { OutputOptions } from 'rollup';\nimport { mergeConfig, UserConfig } from 'vite';\n\nexport function mergeOptions<T extends Record<string, any> = Record<string, any>>(\n  base: T,\n  ...overrides: (OverrideOptions<T> | undefined)[]\n): T {\n  if (!overrides.length) {\n    return base;\n  }\n\n  for (const override of overrides) {\n    if (!override) {\n      continue;\n    }\n\n    if (typeof override === 'function') {\n      base = override(base) ?? base;\n    } else {\n      // @ts-ignore\n      base = mergeConfig(base, override);\n    }\n  }\n\n  return base;\n}\n\nexport function appendMinFileName(output: OutputOptions): OutputOptions {\n  output = cloneDeep(output);\n\n  if (output.file) {\n    const parts = output.file.split('.');\n    const ext = parts.pop();\n    output.file = `${parts.join('.')}.min.${ext}`;\n  } else if (output.dir && typeof output.entryFileNames === 'string') {\n    const parts = output.entryFileNames.split('.');\n    const ext = parts.pop();\n    output.entryFileNames = `${parts.join('.')}.min.${ext}`;\n  }\n\n  return output;\n}\n\nexport function show(data: any, depth = 10) {\n  console.log(inspect(data, { depth, colors: true }));\n}\n","import BuildTask from '@/builder/BuildTask.ts';\nimport { FileTasks, FusionVitePluginOptions, LinkOptions, RunnerCliParams } from '@/types';\nimport { show } from '@/utilities/utilities.ts';\nimport { get, set } from 'lodash-es';\nimport { isAbsolute, relative } from 'node:path';\nimport { PreRenderedAsset, PreRenderedChunk, RollupOptions } from 'rollup';\nimport { MaybePromise } from '@/types';\nimport { ConfigEnv, mergeConfig, PluginOption, UserConfig, Plugin } from 'vite';\n\nexport default class ConfigBuilder {\n  static globalOverrideConfig: UserConfig = {};\n  overrideConfig: UserConfig = {};\n\n  entryFileNamesCallbacks: ((chunkInfo: PreRenderedChunk) => string | undefined | void)[] = [];\n  chunkFileNamesCallbacks: ((chunkInfo: PreRenderedChunk) => string | undefined | void)[] = [];\n  assetFileNamesCallbacks: ((chunkInfo: PreRenderedAsset) => string | undefined | void)[] = [];\n\n  moveTasks: FileTasks = [];\n  copyTasks: FileTasks = [];\n  linkTasks: FileTasks<'link'> = [];\n  postBuildCallbacks: (() => MaybePromise<void>)[] = [];\n  resolveIdCallbacks: Exclude<Plugin['resolveId'], undefined>[] = [];\n  loadCallbacks: Exclude<Plugin['load'], undefined>[] = [];\n  // fileNameMap: Record<string, string> = {};\n\n  // externals: ((source: string, importer: string | undefined, isResolved: boolean) => boolean | string | NullValue)[] = [];\n  cleans: string[] = [];\n\n  tasks: Map<string, BuildTask> = new Map();\n\n  constructor(public config: UserConfig, public env: ConfigEnv, public fusionOptions: FusionVitePluginOptions) {\n    // this.ensurePath('build', {});\n    // this.ensurePath('build.rollupOptions', {\n    //   input: {},\n    //   output: this.getDefaultOutput(),\n    // });\n    // this.ensurePath('plugins', []);\n\n    this.config = mergeConfig<UserConfig, UserConfig>(this.config, {\n      build: {\n        manifest: 'manifest.json',\n        rollupOptions: {\n          preserveEntrySignatures: 'strict',\n          input: {},\n          output: this.getDefaultOutput(),\n          // external: (source: string, importer: string | undefined, isResolved: boolean) => {\n          //   for (const external of this.externals) {\n          //     const result = external(source, importer, isResolved);\n          //\n          //     if (result) {\n          //       return true;\n          //     }\n          //   }\n          // },\n        },\n        emptyOutDir: false,\n        sourcemap: env.mode !== 'production' ? 'inline' : false,\n      },\n      plugins: [],\n      css: {\n        devSourcemap: true,\n      },\n      esbuild: {\n        // Todo: Remove if esbuild supports decorators by default\n        target: 'es2022',\n      }\n    });\n\n    this.addTask('hidden:placeholder');\n  }\n\n  merge(override: UserConfig | ((config: UserConfig) => UserConfig)) {\n    if (typeof override === 'function') {\n      this.config = override(this.config) ?? this.config;\n\n      return this;\n    }\n\n    this.config = mergeConfig(this.config, override);\n\n    return this;\n  }\n\n  private getDefaultOutput(): RollupOptions['output'] {\n    return {\n      entryFileNames: (chunkInfo) => {\n        const name = this.getChunkNameFromTask(chunkInfo);\n\n        if (name) {\n          return name;\n        }\n\n        for (const entryFileNamesCallback of this.entryFileNamesCallbacks) {\n          const name = entryFileNamesCallback(chunkInfo);\n\n          if (name) {\n            return name;\n          }\n        }\n\n        // console.log(chunkInfo, this.relativePath(chunkInfo.facadeModuleId));\n\n        return '[name].js';\n      },\n      chunkFileNames: (chunkInfo) => {\n        const name = this.getChunkNameFromTask(chunkInfo);\n\n        if (name) {\n          return name;\n        }\n\n        for (const chunkFileNamesCallback of this.chunkFileNamesCallbacks) {\n          const name = chunkFileNamesCallback(chunkInfo);\n\n          if (name) {\n            return name;\n          }\n        }\n\n        const chunkDir = this.getChunkDir();\n\n        return `${chunkDir}[name]-[hash].js`;\n      },\n      assetFileNames: (assetInfo) => {\n        // if (this.fileNameMap[assetInfo.name]) {\n        //   assetInfo.name = this.fileNameMap[assetInfo.name];\n        //   return assetInfo.name;\n        // }\n\n        for (const assetFileNamesCallback of this.assetFileNamesCallbacks) {\n          const name = assetFileNamesCallback(assetInfo);\n\n          if (name) {\n            return name;\n          }\n        }\n\n        return '[name].[ext]';\n      }\n    };\n  }\n\n  private getChunkDir(): string {\n    let chunkDir = this.fusionOptions.chunkDir ?? 'chunks';\n    chunkDir.replace(/\\\\/g, '/');\n\n    // Ensure trailing slash\n    if (chunkDir && !chunkDir.endsWith('/')) {\n      chunkDir += '/';\n    }\n\n    if (chunkDir === './' || chunkDir === '/') {\n      chunkDir = '';\n    }\n\n    return chunkDir;\n  }\n\n  private getChunkNameFromTask(chunkInfo: PreRenderedChunk) {\n    if (this.tasks.has(chunkInfo.name)) {\n      const output = this.tasks.get(chunkInfo.name)?.output;\n\n      if (output) {\n        const name = typeof output === 'function' ? output(chunkInfo) : output;\n\n        if (!isAbsolute(name)) {\n          return name;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  ensurePath(path: string, def: any = {}) {\n    if (get(this.config, path) == null) {\n      set(this.config, path, def);\n    }\n\n    return this;\n  }\n\n  get(path: string) {\n    return get(this.config, path);\n  }\n\n  set(path: string, value: any) {\n    set(this.config, path, value);\n    return this;\n  }\n\n  addTask(input: string, group?: string) {\n    const task = new BuildTask(input, group);\n\n    this.tasks.set(task.id, task);\n\n    const inputOptions = this.config.build!.rollupOptions!.input! as Record<string, string>;\n    inputOptions[task.id] = task.input;\n\n    return task;\n  }\n\n  addCleans(...paths: string[]) {\n    this.cleans.push(...paths);\n\n    return this;\n  }\n\n  // addExternals(externals: Externalize) {\n  //   if (Array.isArray(externals)) {\n  //     this.externals.push((rollupOptions) => {\n  //       rollupOptions.external\n  //     })\n  //   } else if (typeof externals === 'object') {\n  //\n  //   } else {\n  //\n  //   }\n  // }\n\n  // addPlugin(plugin: PluginOption) {\n  //   this.config.plugins?.push(plugin);\n  // }\n  //\n  // removePlugin(plugin: string | PluginOption) {\n  //   this.config.plugins = this.config.plugins?.filter((p) => {\n  //     if (!p) {\n  //       return true;\n  //     }\n  //\n  //     if (typeof plugin === 'string' && typeof p === 'object' && 'name' in p) {\n  //       return p.name !== plugin;\n  //     } else if (typeof plugin === 'object' && typeof p === 'object') {\n  //       return p !== plugin;\n  //     }\n  //\n  //     return true;\n  //   });\n  // }\n\n  relativePath(to: string) {\n    return relative(process.cwd(), to);\n  }\n\n  debug() {\n    show(this.config);\n  }\n}\n","import { RunnerCliParams } from '@/types/runner.ts';\nimport yargs from 'yargs';\n\nexport function getArgsAfterDoubleDashes(argv?: string[]): string[] {\n  argv ??= process.argv;\n\n  return argv.slice(2).join(' ')\n    // Split by -- and remove the first part\n    .split(' -- ').slice(1)\n    // Join back and split by space\n    .join(' -- ').trim()\n    // Split back to array and remove empty values\n    .split(' ').filter(v => v !== '');\n}\n\nexport function parseArgv(argv: string[]): RunnerCliParams {\n  const app = yargs();\n\n  // app.option('watch', {\n  //   alias: 'w',\n  //   type: 'boolean',\n  //   description: 'Watch files for changes and re-run the tasks',\n  // });\n\n  app.option('cwd', {\n    type: 'string',\n    description: 'Current working directory',\n  });\n\n  app.option('list', {\n    alias: 'l',\n    type: 'boolean',\n    description: 'List all available tasks',\n  });\n\n  app.option('config', {\n    alias: 'c',\n    type: 'string',\n    description: 'Path to config file',\n  });\n\n  app.option('server-file', {\n    alias: 's',\n    type: 'string',\n    description: 'Path to server file',\n  });\n\n  // app.option('series', {\n  //   alias: 's',\n  //   type: 'boolean',\n  //   description: 'Run tasks in series instead of parallel',\n  // });\n\n  app.option('verbose', {\n    alias: 'v',\n    type: 'count',\n    description: 'Increase verbosity of output. Use multiple times for more verbosity.',\n  });\n\n  return app.parseSync(argv);\n}\n","import { ProcessorInterface } from '@/processors/ProcessorInterface.ts';\r\nimport { forceArray } from '@/utilities/arr.ts';\r\nimport { build } from 'esbuild';\r\nimport Module from 'module';\r\nimport { existsSync, writeFileSync } from 'node:fs';\r\nimport { dirname, isAbsolute, resolve } from 'node:path';\r\nimport { MaybeArray, MaybePromise } from '@/types';\r\nimport { ConfigResult, LoadedConfigTask, RunnerCliParams } from '@/types';\r\n\r\nexport async function loadConfigFile(configFile: ConfigResult): Promise<Record<string, LoadedConfigTask>> {\r\n  let path = configFile.path;\r\n\r\n  // If is Windows, Add \"file://\" prefix to path\r\n  if (process.platform === 'win32') {\r\n    // todo: try use pathToFileURL(): import { pathToFileURL } from 'url';\r\n    // Replace backslash to slash\r\n    const winPath = path.replace(/\\\\/g, '/');\r\n    // Add file:// prefix if not exists\r\n    if (!winPath.startsWith('file://')) {\r\n      // Add extra slash to make it absolute path\r\n      // e.g. C:/path/to/file\r\n      // becomes file:///C:/path/to/file\r\n      path = `file:///${winPath}`;\r\n    }\r\n  }\r\n\r\n  if (configFile.ts) {\r\n    const buildResult = await build({\r\n      entryPoints: [configFile.path],\r\n      bundle: true,\r\n      write: false,\r\n      outdir: 'dist',\r\n      platform: 'node',\r\n      format: 'cjs',\r\n      target: 'esnext',\r\n      external: ['../dist', '../dist/*'],\r\n      packages: 'external',\r\n      sourcemap: 'inline',\r\n    });\r\n    \r\n    const output = buildResult.outputFiles[0];\r\n\r\n    const code = Buffer.from(output.contents).toString('utf8');\r\n    writeFileSync(output.path, code);\r\n    const m = new Module(output.path, undefined);\r\n    m.filename = output.path;\r\n    // @ts-ignore\r\n    m.paths = Module._nodeModulePaths(dirname(output.path));\r\n    // @ts-ignore\r\n    m._compile(code, output.path);\r\n\r\n    return expandModules(m.exports);\r\n  } else {\r\n    const modules = await import(path);\r\n\r\n    return expandModules(modules);\r\n  }\r\n}\r\n\r\nexport function expandModules(modules: Record<string, any>) {\r\n  modules = { ...modules };\r\n\r\n  if (modules.__esModule) {\r\n    delete modules.__esModule;\r\n  }\r\n\r\n  return modules;\r\n}\r\n\r\nexport async function resolveTaskResults(task: LoadedConfigTask) {\r\n  task = await task;\r\n\r\n  return Promise.all(forceArray(task));\r\n}\r\n\r\nexport async function resolveTaskOptions(task: LoadedConfigTask, resolveSubFunctions = false): Promise<ProcessorInterface[]> {\r\n  task = await task;\r\n\r\n  if (!resolveSubFunctions && Array.isArray(task)) {\r\n    const results = await Promise.all(task.map((task) => resolveTaskOptions(task, true)));\r\n    return results.flat();\r\n  }\r\n\r\n  if (typeof task === 'function') {\r\n    return resolvePromisesToFlatArray(await task() as any, task?.name);\r\n  }\r\n\r\n  return resolvePromisesToFlatArray((await task) as MaybeArray<ProcessorInterface>, (task as any)?.name);\r\n}\r\n\r\nasync function resolvePromisesToFlatArray(tasks: MaybeArray<MaybePromise<ProcessorInterface>>, name?: string) {\r\n  if (!Array.isArray(tasks)) {\r\n    return [await tasks];\r\n  }\r\n\r\n  const resolvedTasks = await Promise.all(tasks);\r\n  const returnTasks = [];\r\n\r\n  for (const resolvedTask of resolvedTasks) {\r\n    if (Array.isArray(resolvedTask)) {\r\n      returnTasks.push(...resolvedTask);\r\n    } else {\r\n      returnTasks.push(resolvedTask);\r\n    }\r\n  }\r\n\r\n  return returnTasks;\r\n}\r\n\r\nexport function mustGetAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult {\r\n  const found = getAvailableConfigFile(root, params);\r\n\r\n  if (!found) {\r\n    throw new Error('No config file found. Please create a fusionfile.js or fusionfile.ts in the root directory.');\r\n  }\r\n\r\n  return found;\r\n}\r\n\r\nexport function getAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult | null {\r\n  let found = params?.config;\r\n\r\n  if (found) {\r\n    // If is not absolute of system path(consider Windows), prepend root\r\n    if (!isAbsolute(found)) {\r\n      found = resolve(root, found);\r\n    }\r\n\r\n    if (existsSync(found)) {\r\n      return {\r\n        path: found,\r\n        // get filename from file path\r\n        filename: found.split('/').pop() || '',\r\n        type: getConfigModuleType(found),\r\n        ts: isConfigTypeScript(found),\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  return findDefaultConfig(root);\r\n}\r\n\r\nexport function findDefaultConfig(root: string): ConfigResult | null {\r\n  let file = resolve(root, 'fusionfile.js');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'commonjs',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mjs');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.ts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getConfigModuleType(file: string) {\r\n  let type: 'commonjs' | 'module' | 'unknown' = 'unknown';\r\n\r\n  if (file.endsWith('.cjs')) {\r\n    type = 'commonjs';\r\n  } else if (file.endsWith('.mjs')) {\r\n    type = 'module';\r\n  } else if (file.endsWith('.ts') || file.endsWith('.mts')) {\r\n    type = 'module';\r\n  }\r\n\r\n  return type;\r\n}\r\n\r\nfunction isConfigTypeScript(file: string) {\r\n  return file.endsWith('.ts') || file.endsWith('.mts');\r\n}\r\n","import { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { LoadedConfigTask } from '@/types';\r\nimport { forceArray } from '@/utilities/arr.ts';\r\nimport archy, { type Data } from 'archy';\r\nimport chalk from 'chalk';\r\nimport { MaybeArray } from 'rollup';\r\nimport { UserConfig } from 'vite';\r\nimport { resolveTaskOptions } from './config';\r\n\r\nexport async function displayAvailableTasks(tasks: Record<string, LoadedConfigTask>) {\r\n  const keys = Object.keys(tasks);\r\n\r\n  // Sort put default as first if exists\r\n  keys.sort((a, b) => {\r\n    if (a === 'default') {\r\n      return -1;\r\n    }\r\n\r\n    if (b === 'default') {\r\n      return 1;\r\n    }\r\n\r\n    return a.localeCompare(b);\r\n  });\r\n\r\n  const nodes: Array<Data | string> = [];\r\n\r\n  for (const key of keys) {\r\n    const task = tasks[key];\r\n    // const taskOptions = await resolveTaskOptions(task, true);\r\n\r\n    nodes.push(await describeTasks(key, task));\r\n  }\r\n\r\n  const text = archy({\r\n    label: chalk.magenta('Available Tasks'),\r\n    nodes\r\n  });\r\n\r\n  console.log(text);\r\n}\r\n\r\nasync function describeTasks(name: string, tasks: LoadedConfigTask): Promise<Data> {\r\n  const nodes = [];\r\n  tasks = forceArray(await tasks);\r\n\r\n  for (let task of tasks) {\r\n    const processors = await resolveTaskOptions(task, true);\r\n\r\n    for (const processor of processors) {\r\n      if (typeof processor === 'function') {\r\n        nodes.push(\r\n          await describeTasks((processor as Function).name, processor)\r\n        );\r\n      } else {\r\n        nodes.push(...await describeProcessor(processor));\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    label: chalk.cyan(name),\r\n    nodes\r\n  };\r\n}\r\n\r\nasync function describeProcessor(processor: ProcessorInterface): Promise<string[]> {\r\n  const results = await processor.preview();\r\n\r\n  return Promise.all(results.map((result) => describeProcessorPreview(result)));\r\n}\r\n\r\nasync function describeProcessorPreview(preview: ProcessorPreview): Promise<string> {\r\n  const str = [];\r\n\r\n  const { input: entry, output, extra } = preview;\r\n\r\n  // Input\r\n  const inputStr = chalk.yellow(entry);\r\n  // if (typeof entry === 'string') {\r\n  //   inputStr = chalk.yellow(entry);\r\n  // } else if (Array.isArray(entry)) {\r\n  //   inputStr = chalk.yellow(entry.join(', '));\r\n  // } else if (typeof entry === 'object') {\r\n  //   inputStr = chalk.yellow(Object.values(entry).join(', '));\r\n  // }\r\n  str.push(`Input: ${inputStr}`);\r\n\r\n  // Output\r\n  // if (output) {\r\n  //   const outputs = Array.isArray(output) ? output : [output];\r\n  //   outputs.forEach((output, index) => {\r\n  //     let outStr = '';\r\n  //     if (output.file) {\r\n  //       outStr = chalk.green(output.file);\r\n  //     } else if (output.dir) {\r\n  //       outStr = chalk.green(output.dir);\r\n  //     }\r\n  //     str.push(`Output[${index}]: ${outStr}`);\r\n  //   });\r\n  // }\r\n\r\n  const outStr = chalk.green(output);\r\n  str.push(`Output: ${outStr}`);\r\n\r\n  return str.join(\" - \");\r\n}\r\n\r\nfunction countTask(task: MaybeArray<UserConfig>) {\r\n  if (Array.isArray(task)) {\r\n    return task.length;\r\n  }\r\n\r\n  return 1;\r\n}\r\n","import { ProcessorInterface } from '@/processors/ProcessorInterface.ts';\r\nimport chalk from 'chalk';\r\nimport { uniq } from 'lodash-es';\r\nimport { MaybeArray } from 'rollup';\r\nimport { resolveTaskOptions } from '@/runner/config';\r\nimport { LoadedConfigTask, RunningTasks } from '@/types/runner.ts';\r\nimport { UserConfig } from 'vite';\r\n\r\nexport function selectRunningTasks(\r\n  input: string[],\r\n  tasks: Record<string, LoadedConfigTask>\r\n): Record<string, LoadedConfigTask> {\r\n  input = uniq(input);\r\n\r\n  if (input.length === 0) {\r\n    input.push('default');\r\n  }\r\n\r\n  const selected: Record<string, LoadedConfigTask> = {};\r\n\r\n  for (const name of input) {\r\n    if (tasks[name]) {\r\n      selected[name] = tasks[name];\r\n    } else {\r\n      throw new Error(`Task \"${chalk.cyan(name)}\" not found in fusion config.`);\r\n    }\r\n  }\r\n\r\n  return selected;\r\n}\r\n\r\nexport async function resolveAllTasksAsProcessors(tasks: Record<string, LoadedConfigTask>): Promise<RunningTasks> {\r\n  const cache: Record<string, MaybeArray<LoadedConfigTask>> = {};\r\n  const allTasks: RunningTasks = {};\r\n\r\n  for (const name in tasks) {\r\n    const task = tasks[name];\r\n\r\n    allTasks[name] = (await resolveTaskAsFlat(name, task, cache));\r\n  }\r\n\r\n  return allTasks;\r\n}\r\n\r\nexport async function resolveTaskAsFlat(\r\n  name: string,\r\n  task: LoadedConfigTask,\r\n  cache: Record<string, MaybeArray<LoadedConfigTask>>\r\n): Promise<ProcessorInterface[]> {\r\n  const results: ProcessorInterface[] = [];\r\n\r\n  if (Array.isArray(task)) {\r\n    for (const n in task) {\r\n      const t = task[n];\r\n      results.push(...await resolveTaskAsFlat(n, t, cache));\r\n    }\r\n  } else if (typeof task === 'function') {\r\n    name = task.name || name;\r\n\r\n    if (cache[name]) {\r\n      return [];\r\n    }\r\n\r\n    cache[name] = task;\r\n\r\n    const resolved = await resolveTaskOptions(task, true);\r\n\r\n    if (Array.isArray(resolved)) {\r\n      for (const n in resolved) {\r\n        const t = resolved[n];\r\n        results.push(...await resolveTaskAsFlat(n, t, cache));\r\n      }\r\n    }\r\n  } else {\r\n    results.push(await task);\r\n  }\r\n\r\n  return results;\r\n}\r\n","export * from '@/dep';\nimport * as fusion from '@/dep';\nimport ConfigBuilder from '@/builder/ConfigBuilder.ts';\nimport { prepareParams } from '@/params';\nimport { getArgsAfterDoubleDashes, parseArgv } from '@/runner/app';\nimport { expandModules, loadConfigFile, mustGetAvailableConfigFile } from '@/runner/config';\nimport { displayAvailableTasks } from '@/runner/describe.ts';\nimport { resolveAllTasksAsProcessors, selectRunningTasks } from '@/runner/tasks.ts';\nimport { FusionPlugin, FusionVitePluginOptions, FusionVitePluginUnresolved, LoadedConfigTask } from '@/types';\nimport { forceArray } from '@/utilities/arr.ts';\nimport { cleanFiles, copyFilesAndLog, linkFilesAndLog, moveFilesAndLog } from '@/utilities/fs.ts';\nimport { mergeOptions, show } from '@/utilities/utilities.ts';\nimport fs from 'fs';\nimport { uniq } from 'lodash-es';\nimport { existsSync, writeFileSync } from 'node:fs';\nimport { resolve } from 'node:path';\nimport { Logger, mergeConfig, PluginOption, ResolvedConfig, UserConfig } from 'vite';\n\nlet params = parseArgv(getArgsAfterDoubleDashes(process.argv));\nprepareParams(params);\n\nexport let builder: ConfigBuilder;\n\nconst originalTasks = params._;\nconst extraVitePlugins: FusionPlugin[] = [];\n\nexport function useFusion(fusionOptions: FusionVitePluginUnresolved = {}, tasks?: string | string[]): PluginOption {\n  let logger: Logger;\n  let resolvedConfig: ResolvedConfig;\n  let exitHandlersBound = false;\n\n  const resolvedOptions = prepareFusionOptions(fusionOptions);\n\n  if (\n    typeof tasks === 'string'\n    || (Array.isArray(tasks) && tasks.length > 0)\n  ) {\n    params._ = forceArray(tasks);\n  } else {\n    params._ = originalTasks;\n  }\n\n  params = mergeOptions(params, resolvedOptions.cliParams);\n\n  return [\n    {\n      name: 'fusion',\n      configResolved(config) {\n        resolvedConfig = config;\n\n        logger = config.logger;\n\n        // @ts-ignore\n        config.plugins.push(...extraVitePlugins);\n\n        for (const plugin of (config.plugins as FusionPlugin[])) {\n          if ('buildConfig' in plugin) {\n            plugin.buildConfig?.(builder);\n          }\n        }\n      },\n      async config(config, env) {\n        let root: string;\n\n        if (config.root) {\n          root = resolve(config.root);\n        } else {\n          root = params.cwd || process.cwd();\n        }\n\n        delete config.root;\n        // delete builder.config.root;\n\n        process.chdir(root);\n\n        builder = new ConfigBuilder(config, env, resolvedOptions);\n\n        // Retrieve config file\n        let tasks: Record<string, LoadedConfigTask>;\n\n        if (typeof resolvedOptions.fusionfile === 'string' || !resolvedOptions.fusionfile) {\n          params.config ??= resolvedOptions.fusionfile;\n          const configFile = mustGetAvailableConfigFile(root, params);\n\n          // Load config\n          tasks = await loadConfigFile(configFile);\n        } else if (typeof resolvedOptions.fusionfile === 'function') {\n          tasks = expandModules(await resolvedOptions.fusionfile());\n        } else {\n          tasks = expandModules(resolvedOptions.fusionfile);\n        }\n\n        // Describe tasks\n        if (params.list) {\n          await displayAvailableTasks(tasks);\n          return;\n        }\n\n        // Select running tasks\n        const selectedTasks = selectRunningTasks([...params._] as string[], tasks);\n\n        const runningTasks = (await resolveAllTasksAsProcessors(selectedTasks));\n\n        for (const taskName in runningTasks) {\n          const processors = runningTasks[taskName];\n\n          for (const processor of processors) {\n            await processor.config(taskName, builder);\n          }\n        }\n\n        builder.merge(ConfigBuilder.globalOverrideConfig);\n        builder.merge(builder.overrideConfig);\n\n        // for (const plugin of plugins) {\n        //   if (plugin.buildConfig) {\n        //     await plugin.buildConfig(builder, env);\n        //   }\n        // }\n\n        // console.log('plugin bottom', builder.config);\n        //\n        // show(builder.overrideConfig, 15)\n        // show(builder.config, 15)\n\n        return builder.config;\n      },\n      outputOptions(options) {\n        // Protect upload folder\n        if (resolvedConfig.build.emptyOutDir) {\n          const dir = resolvedConfig.build.outDir;\n          const uploadDir = resolve(dir, 'upload');\n\n          if (existsSync(uploadDir)) {\n            throw new Error(\n              `The output directory: \"${dir}\" contains an \"upload\" folder, please move this folder away or set an different fusion outDir.`\n            );\n          }\n        }\n      },\n      async buildStart(options) {\n        if (builder.cleans.length > 0) {\n          await cleanFiles(builder.cleans, resolvedConfig.build.outDir || process.cwd());\n        }\n      },\n\n      // Server\n      configureServer(server) {\n        server.httpServer?.once('listening', () => {\n          const scheme = server.config.server.https ? 'https' : 'http';\n          const address = server.httpServer?.address();\n          const host = address && typeof address !== 'string' ? address.address : 'localhost';\n          const port = address && typeof address !== 'string' ? address.port : 80;\n\n          const url = `${scheme}://${host}:${port}/`;\n          const serverFile = resolve(\n            server.config.root,\n            resolvedOptions.cliParams?.serverFile ?? 'tmp/vite-server'\n          );\n\n          writeFileSync(resolve(server.config.root, serverFile), url);\n\n          if (!exitHandlersBound) {\n            process.on(\"exit\", () => {\n              if (fs.existsSync(serverFile)) {\n                fs.rmSync(serverFile);\n              }\n            });\n            process.on(\"SIGINT\", () => process.exit());\n            process.on(\"SIGTERM\", () => process.exit());\n            process.on(\"SIGHUP\", () => process.exit());\n            exitHandlersBound = true;\n          }\n        });\n      }\n    },\n    {\n      name: 'fusion:pre-handles',\n      enforce: 'pre',\n      async resolveId(source, importer, options) {\n        for (const resolveId of builder.resolveIdCallbacks) {\n          if (typeof resolveId !== 'function') {\n            continue;\n          }\n\n          const result = await resolveId.call(this, source, importer, options);\n\n          if (result) {\n            return result;\n          }\n        }\n\n        if (source.startsWith('hidden:')) {\n          return source;\n        }\n      },\n      async load(source, options) {\n        for (const load of builder.loadCallbacks) {\n          if (typeof load !== 'function') {\n            continue;\n          }\n\n          const result = await load.call(this, source, options);\n\n          if (result) {\n            return result;\n          }\n        }\n\n        if (source.startsWith('hidden:')) {\n          return '';\n        }\n      },\n    },\n    {\n      name: 'fusion:post-handles',\n      generateBundle(options, bundle) {\n        for (const [fileName, chunk] of Object.entries(bundle)) {\n          if (chunk.type === 'chunk' && chunk.facadeModuleId?.startsWith('hidden:')) {\n            delete bundle[fileName];\n          }\n        }\n      },\n      async writeBundle(options, bundle) {\n        const outDir = resolvedConfig.build.outDir || process.cwd();\n\n        // Todo: override logger to replace vite's files logs\n        // @see https://github.com/windwalker-io/core/issues/1355\n        await moveFilesAndLog(builder.moveTasks, outDir, logger);\n        await copyFilesAndLog(builder.copyTasks, outDir, logger);\n        await linkFilesAndLog(builder.linkTasks, outDir, logger);\n\n        for (const callback of builder.postBuildCallbacks) {\n          await callback();\n        }\n\n        for (const [name, task] of builder.tasks) {\n          for (const callback of task.postCallbacks) {\n            await callback();\n          }\n        }\n      },\n    },\n  ];\n}\n\nfunction prepareFusionOptions(options: FusionVitePluginUnresolved): FusionVitePluginOptions {\n  if (typeof options === 'string') {\n    return {\n      fusionfile: options,\n    };\n  }\n\n  if (typeof options === 'function') {\n    return {\n      fusionfile: options,\n    };\n  }\n\n  return options;\n}\n\nexport function configureBuilder(handler: (builder: ConfigBuilder) => void) {\n  handler(builder);\n}\n\nexport function mergeViteConfig(config: UserConfig | null) {\n  // if (config === null) {\n  //   ConfigBuilder.globalOverrideConfig = {};\n  //   return;\n  // }\n  //\n  // ConfigBuilder.globalOverrideConfig = mergeConfig(ConfigBuilder.globalOverrideConfig, config);\n  if (config === null) {\n    builder.overrideConfig = {};\n    return;\n  }\n\n  builder.overrideConfig = mergeConfig(builder.overrideConfig, config);\n}\n\nexport function outDir(outDir: string) {\n  // ConfigBuilder.globalOverrideConfig = mergeConfig<UserConfig, UserConfig>(ConfigBuilder.globalOverrideConfig, {\n  //   build: {\n  //     outDir\n  //   }\n  // });\n  builder.overrideConfig = mergeConfig<UserConfig, UserConfig>(builder.overrideConfig, {\n    build: {\n      outDir\n    }\n  });\n}\n\nexport function chunkDir(dir: string) {\n  builder.fusionOptions.chunkDir = dir;\n}\n\nexport function alias(src: string, dest: string) {\n  builder.overrideConfig = mergeConfig<UserConfig, UserConfig>(builder.overrideConfig, {\n    resolve: {\n      alias: {\n        [src]: dest\n      }\n    }\n  });\n}\n\nexport function external(match: string, varName?: string) {\n  const globals: Record<string, string> = {};\n\n  if (varName) {\n    globals[match] = varName;\n  }\n\n  builder.overrideConfig = mergeConfig<UserConfig, UserConfig>(builder.overrideConfig, {\n    build: {\n      rollupOptions: {\n        external: [match],\n        output: {\n          globals\n        }\n      }\n    }\n  });\n}\n\nexport function plugin(...plugins: FusionPlugin[]) {\n  extraVitePlugins.push(...plugins);\n}\n\nexport function clean(...paths: string[]) {\n  builder.addCleans(...paths);\n\n  builder.cleans = uniq(builder.cleans);\n}\n\nexport default {\n  ...fusion,\n  useFusion,\n  configureBuilder,\n  mergeViteConfig,\n  outDir,\n  chunkDir,\n  alias,\n  external,\n  plugin,\n  clean,\n  params,\n};\n"],"names":["forceArray","item","handleMaybeArray","items","callback","handleForceArray","css","input","output","options","CssProcessor","taskName","builder","task","assetInfo","name","basename","parse","js","JsProcessor","chunkInfo","move","dest","MoveProcessor","copy","CopyProcessor","link","LinkProcessor","handler","CallbackProcessor","callbackAfterBuild","afterBuild","params","prepareParams","p","isVerbose","isProd","isDev","isWindows","shortHash","bufferOrString","short","hash","Crypto","handleFilesOperation","src","promises","normalizeFilePath","base","getGlobBaseFromPattern","sources","isGlob","fg","source","dir","resolvedDest","endsWithSlash","relative","dirname","fs","moveFilesAndLog","tasks","outDir","logger","ps","copyFilesAndLog","linkFilesAndLog","symlink","cleanFiles","patterns","resolve","protectDir","copyGlob","moveGlob","target","force","path","pattern","specialChars","idx","c","isAbsolute","fileToId","group","normalize","randomBytes","BuildTask","ext","mergeOptions","overrides","override","mergeConfig","show","data","depth","inspect","ConfigBuilder","config","env","fusionOptions","entryFileNamesCallback","chunkFileNamesCallback","assetFileNamesCallback","chunkDir","def","get","set","value","inputOptions","paths","to","getArgsAfterDoubleDashes","argv","v","parseArgv","app","yargs","loadConfigFile","configFile","winPath","build","code","writeFileSync","m","Module","expandModules","modules","resolveTaskOptions","resolveSubFunctions","resolvePromisesToFlatArray","resolvedTasks","returnTasks","resolvedTask","mustGetAvailableConfigFile","root","found","getAvailableConfigFile","existsSync","getConfigModuleType","isConfigTypeScript","findDefaultConfig","file","type","displayAvailableTasks","keys","a","b","nodes","key","describeTasks","text","archy","chalk","processors","processor","describeProcessor","results","result","describeProcessorPreview","preview","str","entry","extra","inputStr","outStr","selectRunningTasks","uniq","selected","resolveAllTasksAsProcessors","cache","allTasks","resolveTaskAsFlat","n","t","resolved","originalTasks","extraVitePlugins","useFusion","resolvedConfig","exitHandlersBound","resolvedOptions","prepareFusionOptions","plugin","selectedTasks","runningTasks","uploadDir","server","scheme","address","host","port","url","serverFile","importer","resolveId","load","bundle","fileName","chunk","configureBuilder","mergeViteConfig","alias","external","match","varName","globals","plugins","clean","index","fusion"],"mappings":"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"}