{"version":3,"file":"index.cjs","sources":["../src/utilities/arr.ts","../src/processors/css.ts","../src/processors/js.ts","../src/processors/move.ts","../src/processors/copy.ts","../src/processors/link.ts","../src/params.ts","../src/utilities/env.ts","../src/utilities/crypto.ts","../src/utilities/fs.ts","../src/builder/BuildTask.ts","../src/utilities/utilities.ts","../src/builder/ConfigBuilder.ts","../src/runner/app.ts","../src/runner/config.ts","../src/runner/describe.ts","../src/runner/tasks.ts","../src/index.ts"],"sourcesContent":["import { MaybeArray } from 'rollup';\r\n\r\nexport function forceArray<T>(item: T | T[]): T[] {\r\n  if (Array.isArray(item)) {\r\n    return item;\r\n  } else {\r\n    return [item];\r\n  }\r\n}\r\n\r\n\r\nexport function handleMaybeArray<T, R>(\r\n  items: T | T[],\r\n  callback: (item: T) => R\r\n): T extends any[] ? R[] : R {\r\n  if (Array.isArray(items)) {\r\n    return items.map(callback) as any;\r\n  } else {\r\n    return callback(items as T) as any;\r\n  }\r\n}\r\n\r\nexport function appendToMaybeArray<T>(items: MaybeArray<T>, value: T): T[] {\r\n  if (Array.isArray(items)) {\r\n    items.push(value);\r\n\r\n    return items;\r\n  } else {\r\n    return [items, value];\r\n  }\r\n}\r\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\r\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface';\r\nimport { CssOptions, TaskInput, TaskOutput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr';\r\nimport { basename, parse } from 'node:path';\r\nimport { MaybePromise } from 'rollup';\r\n\r\nexport function css(\r\n  input: TaskInput,\r\n  output?: TaskOutput,\r\n  options: CssOptions = {}\r\n): CssProcessor {\r\n  return new CssProcessor(input, output, options);\r\n}\r\n\r\nexport class CssProcessor implements ProcessorInterface {\r\n  constructor(protected input: TaskInput, protected output?: TaskOutput, protected options: CssOptions = {}) {\r\n  }\r\n\r\n  async config(taskName: string, builder: ConfigBuilder) {\r\n    handleMaybeArray(this.input, (input) => {\r\n      const task = builder.addTask(input, taskName);\r\n\r\n      builder.assetFileNamesCallbacks.push((assetInfo) => {\r\n        const name = assetInfo.names[0];\r\n\r\n        if (!name) {\r\n          return undefined;\r\n        }\r\n\r\n        // Rename only if the asset name matches the task id with .css extension\r\n        if (basename(name, '.css') === task.id) {\r\n          if (!this.output) {\r\n            return parse(input).name + '.css';\r\n          }\r\n\r\n          return task.normalizeOutput(this.output, '.css');\r\n\r\n          // if (!isAbsolute(name)) {\r\n          //   return name;\r\n          // } else {\r\n          //   builder.moveFilesMap[task.id + '.css'] = name;\r\n          // }\r\n        }\r\n      });\r\n    });\r\n\r\n    // show(builder)\r\n  }\r\n\r\n  preview(): MaybePromise<ProcessorPreview[]> {\r\n    return forceArray(this.input).map((input) => {\r\n      return {\r\n        input,\r\n        output: this.output || basename(input),\r\n        extra: {}\r\n      };\r\n    });\r\n  }\r\n}\r\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\r\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { TaskInput, TaskOutput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr';\r\nimport { basename, parse } from 'node:path';\r\nimport { MaybePromise } from 'rollup';\r\n\r\nexport function js(input: TaskInput, output?: TaskOutput): ProcessorInterface {\r\n  return new JsProcessor(input, output);\r\n}\r\n\r\nexport class JsProcessor implements ProcessorInterface {\r\n\r\n  constructor(public input: TaskInput, public output?: TaskOutput) {\r\n  }\r\n\r\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\r\n    handleMaybeArray(this.input, (input) => {\r\n      const task = builder.addTask(input, taskName);\r\n\r\n      builder.entryFileNamesCallbacks.push((chunkInfo) => {\r\n        const name = chunkInfo.name;\r\n\r\n        if (!name) {\r\n          return;\r\n        }\r\n\r\n        // Rename only if the asset name matches the task id with .css extension\r\n        if (name === task.id) {\r\n          if (!this.output) {\r\n            return parse(input).name + '.js';\r\n          }\r\n\r\n          return task.normalizeOutput(this.output);\r\n\r\n          // if (!isAbsolute(name)) {\r\n          //   return name;\r\n          // } else {\r\n          //   builder.moveFilesMap[task.id + '.css'] = name;\r\n          // }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  preview(): MaybePromise<ProcessorPreview[]> {\r\n    return forceArray(this.input).map((input) => {\r\n      return {\r\n        input,\r\n        output: this.output || basename(input),\r\n        extra: {}\r\n      };\r\n    });\r\n  }\r\n}\r\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\r\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { TaskInput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr.ts';\r\nimport { MaybePromise } from 'rollup';\r\nimport { types } from 'sass';\r\n\r\nexport function move(input: TaskInput, dest: string) {\r\n  return new MoveProcessor(input, dest);\r\n}\r\n\r\nexport class MoveProcessor implements ProcessorInterface {\r\n  constructor(public input: TaskInput, public dest: string) {\r\n  }\r\n\r\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\r\n    handleMaybeArray(this.input, (input) => {\r\n      builder.moveTasks.push({ src: input, dest: this.dest, options: {} });\r\n    });\r\n  }\r\n\r\n  preview(): MaybePromise<ProcessorPreview[]> {\r\n    return forceArray(this.input).map((input) => {\r\n      return {\r\n        input,\r\n        output: this.dest,\r\n        extra: {}\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\r\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { TaskInput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr.ts';\r\nimport { MaybePromise } from 'rollup';\r\n\r\nexport function copy(input: TaskInput, dest: string) {\r\n  return new CopyProcessor(input, dest);\r\n}\r\n\r\nexport class CopyProcessor implements ProcessorInterface {\r\n  constructor(public input: TaskInput, public dest: string) {\r\n  }\r\n\r\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\r\n    handleMaybeArray(this.input, (input) => {\r\n      builder.copyTasks.push({ src: input, dest: this.dest, options: {} })\r\n    });\r\n  }\r\n\r\n  preview(): MaybePromise<ProcessorPreview[]> {\r\n    return forceArray(this.input).map((input) => {\r\n      return {\r\n        input,\r\n        output: this.dest,\r\n        extra: {}\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\n","import ConfigBuilder from '@/builder/ConfigBuilder.ts';\r\nimport { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { LinkOptions, TaskInput } from '@/types';\r\nimport { forceArray, handleMaybeArray } from '@/utilities/arr.ts';\r\nimport { MaybePromise } from 'rollup';\r\n\r\nexport function link(input: TaskInput, dest: string, options: LinkOptions = {}) {\r\n  return new LinkProcessor(input, dest, options);\r\n}\r\n\r\nexport class LinkProcessor implements ProcessorInterface {\r\n  constructor(public input: TaskInput, public dest: string, public options: LinkOptions = {}) {\r\n  }\r\n\r\n  config(taskName: string, builder: ConfigBuilder): MaybePromise<void> {\r\n    handleMaybeArray(this.input, (input) => {\r\n      builder.linkTasks.push({ src: input, dest: this.dest, options: this.options });\r\n    });\r\n  }\r\n\r\n  preview(): MaybePromise<ProcessorPreview[]> {\r\n    return forceArray(this.input).map((input) => {\r\n      return {\r\n        input,\r\n        output: this.dest,\r\n        extra: {}\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\n","import { RunnerCliParams } from '@/types';\r\n\r\nlet params: RunnerCliParams | undefined = undefined;\r\n\r\nexport function prepareParams(p: RunnerCliParams): RunnerCliParams {\r\n  params = p;\r\n\r\n  isVerbose = params?.verbose ? params?.verbose > 0 : false;\r\n\r\n  return p;\r\n}\r\n\r\nlet isVerbose = false;\r\nconst isProd = process.env.NODE_ENV === 'production';\r\nconst isDev = !isProd;\r\n\r\nexport { isVerbose, isDev, isProd, params };\r\n","export function isWindows() {\r\n  return process.platform === 'win32';\r\n}\r\n","import Crypto from 'crypto';\r\n\r\nexport function shortHash(bufferOrString: Crypto.BinaryLike, short: number | null = 8): string {\r\n  let hash = Crypto.createHash('sha1')\r\n    .update(bufferOrString)\r\n    .digest('hex');\r\n\r\n  if (short && short > 0) {\r\n    hash = hash.substring(0, short);\r\n  }\r\n\r\n  return hash;\r\n}\r\n\r\n\r\n","import { FileTasks } from '@/types';\r\nimport { isWindows } from '@/utilities/env.ts';\r\nimport fg from 'fast-glob';\r\nimport fs from 'fs-extra';\r\nimport { dirname, isAbsolute, relative, resolve } from 'node:path';\r\nimport { Logger } from 'vite';\r\n\r\nfunction handleFilesOperation(\r\n  src: string,\r\n  dest: string,\r\n  options: {\r\n    outDir: string;\r\n    handler: (src: string, dest: string) => Promise<any>;\r\n    globOptions?: fg.Options;\r\n  }\r\n) {\r\n  const promises = [];\r\n  src = normalizeFilePath(src, options.outDir);\r\n  dest = normalizeFilePath(dest, options.outDir);\r\n\r\n  const base = getBaseFromPattern(src);\r\n  const sources = isGlob(src)\r\n    ? fg.globSync(fg.convertPathToPattern(src), options.globOptions)\r\n    : [src];\r\n\r\n  for (let source of sources) {\r\n    let dir;\r\n    let resolvedDest = dest;\r\n\r\n    if (endsWithSlash(dest)) {\r\n      dir = resolvedDest;\r\n      resolvedDest = resolvedDest + relative(base, source);\r\n    } else {\r\n      dir = dirname(resolvedDest);\r\n    }\r\n\r\n    fs.ensureDirSync(dir);\r\n\r\n    promises.push(options.handler(source, resolvedDest));\r\n  }\r\n\r\n  return promises;\r\n}\r\n\r\nexport function moveFilesAndLog(tasks: FileTasks, outDir: string, logger: Logger) {\r\n  const promises = [];\r\n\r\n  for (const { src, dest, options } of tasks) {\r\n    const ps = handleFilesOperation(\r\n      src,\r\n      dest,\r\n      {\r\n        outDir,\r\n        handler: async (src, dest) => {\r\n          logger.info(`Moving file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\r\n          return fs.move(src, dest, { overwrite: true });\r\n        },\r\n        globOptions: { onlyFiles: true }\r\n      }\r\n    );\r\n\r\n    promises.push(...ps);\r\n  }\r\n\r\n  return Promise.all(promises);\r\n}\r\n\r\nexport function copyFilesAndLog(tasks: FileTasks, outDir: string, logger: Logger) {\r\n  const promises = [];\r\n\r\n  for (const { src, dest, options } of tasks) {\r\n    const ps = handleFilesOperation(\r\n      src,\r\n      dest, {\r\n        outDir,\r\n        handler: async (src, dest) => {\r\n          logger.info(`Copy file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\r\n          return fs.copy(src, dest, { overwrite: true });\r\n        },\r\n        globOptions: { onlyFiles: true }\r\n      }\r\n    );\r\n\r\n    promises.push(...ps);\r\n  }\r\n\r\n  return Promise.all(promises);\r\n}\r\n\r\nexport function linkFilesAndLog(tasks: FileTasks<'link'>, outDir: string, logger: Logger) {\r\n  const promises = [];\r\n\r\n  for (const { src, dest, options } of tasks) {\r\n    const ps = handleFilesOperation(\r\n      src,\r\n      dest, {\r\n        outDir,\r\n        handler: async (src, dest) => {\r\n          logger.info(`Link file from ${relative(outDir, src)} to ${relative(outDir, dest)}`);\r\n          return symlink(src, dest, options?.force ?? false);\r\n        },\r\n        globOptions: { onlyFiles: false }\r\n      }\r\n    );\r\n\r\n    promises.push(...ps);\r\n  }\r\n\r\n  return Promise.all(promises);\r\n}\r\n\r\nexport async function symlink(target: string, link: string, force = false) {\r\n  if (isWindows() && fs.lstatSync(target).isDirectory()) {\r\n    return fs.ensureSymlink(target, link, 'junction');\r\n  }\r\n\r\n  if (isWindows() && fs.lstatSync(target).isFile() && force) {\r\n    return fs.ensureLink(target, link);\r\n  }\r\n\r\n  return fs.ensureSymlink(target, link);\r\n}\r\n\r\nexport function endsWithSlash(path: string): boolean {\r\n  return path.endsWith('/') || path.endsWith('\\\\');\r\n}\r\n\r\nfunction getBaseFromPattern(pattern: string) {\r\n  const specialChars = [\"*\", \"?\", \"[\", \"]\"];\r\n  const idx = [...pattern].findIndex(c => specialChars.includes(c));\r\n\r\n  if (idx === -1) {\r\n    return dirname(pattern);\r\n  }\r\n\r\n  return dirname(pattern.slice(0, idx + 1));\r\n}\r\n\r\nfunction isGlob(pattern: string): boolean {\r\n  const specialChars = [\"*\", \"?\", \"[\", \"]\"];\r\n  return specialChars.some(c => pattern.includes(c));\r\n}\r\n\r\nfunction normalizeFilePath(path: string, outDir: string) {\r\n  if (path.startsWith('.')) {\r\n    path = resolve(path);\r\n  } else if (!isAbsolute(path)) {\r\n    path = outDir + '/' + path;\r\n  }\r\n\r\n  return path;\r\n}\r\n","import { shortHash } from '@/utilities/crypto.ts';\r\nimport { uniqueId } from 'lodash-es';\r\nimport { normalize, basename, resolve, isAbsolute, parse } from 'node:path';\r\nimport { PreRenderedChunk } from 'rollup';\r\n\r\nexport default class BuildTask {\r\n  id: string;\r\n  output?: string | ((chunkInfo: PreRenderedChunk) => any);\r\n  postCallbacks: (() => void)[] = [];\r\n\r\n  constructor(public input: string, public group?: string) {\r\n    this.id = BuildTask.toFileId(input, group);\r\n\r\n    this.input = normalize(input);\r\n  }\r\n\r\n  dest(output?: string | ((chunkInfo: PreRenderedChunk) => any)) {\r\n    if (typeof output === 'string') {\r\n      output = this.normalizeOutput(output);\r\n    }\r\n\r\n    this.output = output;\r\n\r\n    return this;\r\n  }\r\n\r\n  addPostCallback(callback: () => void) {\r\n    this.postCallbacks.push(callback);\r\n    return this;\r\n  }\r\n\r\n  normalizeOutput(output: string, ext = '.js') {\r\n    if (output.endsWith('/') || output.endsWith('\\\\')) {\r\n      output += parse(this.input).name + ext;\r\n    }\r\n\r\n    // if (output.startsWith('.')) {\r\n    //   output = resolve(output);\r\n    // }\r\n\r\n    return output;\r\n  }\r\n\r\n  static toFileId(input: string, group?: string) {\r\n    input = normalize(input);\r\n\r\n    group ||= uniqueId();\r\n\r\n    return group + '-' + shortHash(input);\r\n  }\r\n}\r\n\r\n","import { OverrideOptions } from '@/types';\r\nimport { cloneDeep, merge } from 'lodash-es';\r\nimport { inspect } from 'node:util';\r\nimport { OutputOptions } from 'rollup';\r\nimport { mergeConfig, UserConfig } from 'vite';\r\n\r\nexport function mergeOptions<T extends Record<string, any> = Record<string, any>>(\r\n  base: T,\r\n  ...overrides: (OverrideOptions<T> | undefined)[]\r\n): T {\r\n  if (!overrides.length) {\r\n    return base;\r\n  }\r\n\r\n  for (const override of overrides) {\r\n    if (!override) {\r\n      continue;\r\n    }\r\n\r\n    if (typeof override === 'function') {\r\n      base = override(base) ?? base;\r\n    } else {\r\n      // @ts-ignore\r\n      base = mergeConfig(base, override);\r\n    }\r\n  }\r\n\r\n  return base;\r\n}\r\n\r\nexport function appendMinFileName(output: OutputOptions): OutputOptions {\r\n  output = cloneDeep(output);\r\n\r\n  if (output.file) {\r\n    const parts = output.file.split('.');\r\n    const ext = parts.pop();\r\n    output.file = `${parts.join('.')}.min.${ext}`;\r\n  } else if (output.dir && typeof output.entryFileNames === 'string') {\r\n    const parts = output.entryFileNames.split('.');\r\n    const ext = parts.pop();\r\n    output.entryFileNames = `${parts.join('.')}.min.${ext}`;\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nexport function show(data: any, depth = 10) {\r\n  console.log(inspect(data, { depth, colors: true }));\r\n}\r\n","import BuildTask from '@/builder/BuildTask.ts';\r\nimport { FileTasks, LinkOptions, RunnerCliParams } from '@/types';\r\nimport { show } from '@/utilities/utilities.ts';\r\nimport { get, set } from 'lodash-es';\r\nimport { isAbsolute, relative } from 'node:path';\r\nimport { MaybePromise, PreRenderedAsset, PreRenderedChunk, RollupOptions } from 'rollup';\r\nimport { ConfigEnv, mergeConfig, PluginOption, UserConfig } from 'vite';\r\n\r\nexport default class ConfigBuilder {\r\n  static globalOverrideConfig: UserConfig = {};\r\n  overrideConfig: UserConfig = {};\r\n\r\n  entryFileNamesCallbacks: ((chunkInfo: PreRenderedChunk) => string | undefined | void)[] = [];\r\n  chunkFileNamesCallbacks: ((chunkInfo: PreRenderedChunk) => string | undefined | void)[] = [];\r\n  assetFileNamesCallbacks: ((chunkInfo: PreRenderedAsset) => string | undefined | void)[] = [];\r\n\r\n  moveTasks: FileTasks = [];\r\n  copyTasks: FileTasks = [];\r\n  linkTasks: FileTasks<'link'> = [];\r\n  postBuildCallbacks: (() => MaybePromise<void>)[] = [];\r\n  // fileNameMap: Record<string, string> = {};\r\n\r\n  // externals: ((source: string, importer: string | undefined, isResolved: boolean) => boolean | string | NullValue)[] = [];\r\n  cleans: string[] = [];\r\n\r\n  tasks: Map<string, BuildTask> = new Map();\r\n\r\n  constructor(public config: UserConfig, public env: ConfigEnv, public params: RunnerCliParams) {\r\n    // this.ensurePath('build', {});\r\n    // this.ensurePath('build.rollupOptions', {\r\n    //   input: {},\r\n    //   output: this.getDefaultOutput(),\r\n    // });\r\n    // this.ensurePath('plugins', []);\r\n\r\n    this.config = mergeConfig<UserConfig, UserConfig>(this.config, {\r\n      build: {\r\n        rollupOptions: {\r\n          preserveEntrySignatures: 'strict',\r\n          input: {},\r\n          output: this.getDefaultOutput(),\r\n          // external: (source: string, importer: string | undefined, isResolved: boolean) => {\r\n          //   for (const external of this.externals) {\r\n          //     const result = external(source, importer, isResolved);\r\n          //\r\n          //     if (result) {\r\n          //       return true;\r\n          //     }\r\n          //   }\r\n          // },\r\n        },\r\n        emptyOutDir: false,\r\n        sourcemap: env.mode !== 'production' ? 'inline' : false,\r\n      },\r\n      plugins: [],\r\n      css: {\r\n        devSourcemap: true,\r\n      },\r\n      esbuild: {\r\n        // Todo: Remove if esbuild supports decorators by default\r\n        target: 'es2022',\r\n      }\r\n    });\r\n  }\r\n\r\n  merge(override: UserConfig | ((config: UserConfig) => UserConfig)) {\r\n    if (typeof override === 'function') {\r\n      this.config = override(this.config) ?? this.config;\r\n\r\n      return this;\r\n    }\r\n\r\n    this.config = mergeConfig(this.config, override);\r\n\r\n    return this;\r\n  }\r\n\r\n  private getDefaultOutput(): RollupOptions['output'] {\r\n    return {\r\n      entryFileNames: (chunkInfo) => {\r\n        const name = this.getChunkNameFromTask(chunkInfo);\r\n\r\n        if (name) {\r\n          return name;\r\n        }\r\n\r\n        for (const entryFileNamesCallback of this.entryFileNamesCallbacks) {\r\n          const name = entryFileNamesCallback(chunkInfo);\r\n\r\n          if (name) {\r\n            return name;\r\n          }\r\n        }\r\n\r\n        // console.log(chunkInfo, this.relativePath(chunkInfo.facadeModuleId));\r\n\r\n        return '[name].js';\r\n      },\r\n      chunkFileNames: (chunkInfo) => {\r\n        const name = this.getChunkNameFromTask(chunkInfo);\r\n\r\n        if (name) {\r\n          return name;\r\n        }\r\n\r\n        for (const chunkFileNamesCallback of this.chunkFileNamesCallbacks) {\r\n          const name = chunkFileNamesCallback(chunkInfo);\r\n\r\n          if (name) {\r\n            return name;\r\n          }\r\n        }\r\n\r\n        return 'chunks/[name]-[hash].js';\r\n      },\r\n      assetFileNames: (assetInfo) => {\r\n        // if (this.fileNameMap[assetInfo.name]) {\r\n        //   assetInfo.name = this.fileNameMap[assetInfo.name];\r\n        //   return assetInfo.name;\r\n        // }\r\n\r\n        for (const assetFileNamesCallback of this.assetFileNamesCallbacks) {\r\n          const name = assetFileNamesCallback(assetInfo);\r\n\r\n          if (name) {\r\n            return name;\r\n          }\r\n        }\r\n\r\n        return '[name].[ext]';\r\n      }\r\n    };\r\n  }\r\n\r\n  private getChunkNameFromTask(chunkInfo: PreRenderedChunk) {\r\n    if (this.tasks.has(chunkInfo.name)) {\r\n      const output = this.tasks.get(chunkInfo.name)?.output;\r\n\r\n      if (output) {\r\n        const name = typeof output === 'function' ? output(chunkInfo) : output;\r\n\r\n        if (!isAbsolute(name)) {\r\n          return name;\r\n        }\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  ensurePath(path: string, def: any = {}) {\r\n    if (get(this.config, path) == null) {\r\n      set(this.config, path, def);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  get(path: string) {\r\n    return get(this.config, path);\r\n  }\r\n\r\n  set(path: string, value: any) {\r\n    set(this.config, path, value);\r\n    return this;\r\n  }\r\n\r\n  addTask(input: string, group?: string) {\r\n    const task = new BuildTask(input, group);\r\n\r\n    this.tasks.set(task.id, task);\r\n\r\n    const inputOptions = this.config.build!.rollupOptions!.input! as Record<string, string>;\r\n    inputOptions[task.id] = task.input;\r\n\r\n    return task;\r\n  }\r\n\r\n  // addExternals(externals: Externalize) {\r\n  //   if (Array.isArray(externals)) {\r\n  //     this.externals.push((rollupOptions) => {\r\n  //       rollupOptions.external\r\n  //     })\r\n  //   } else if (typeof externals === 'object') {\r\n  //\r\n  //   } else {\r\n  //\r\n  //   }\r\n  // }\r\n\r\n  addPlugin(plugin: PluginOption) {\r\n    this.config.plugins?.push(plugin);\r\n  }\r\n\r\n  removePlugin(plugin: string | PluginOption) {\r\n    this.config.plugins = this.config.plugins?.filter((p) => {\r\n      if (!p) {\r\n        return true;\r\n      }\r\n\r\n      if (typeof plugin === 'string' && typeof p === 'object' && 'name' in p) {\r\n        return p.name !== plugin;\r\n      } else if (typeof plugin === 'object' && typeof p === 'object') {\r\n        return p !== plugin;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  relativePath(to: string) {\r\n    return relative(process.cwd(), to);\r\n  }\r\n\r\n  debug() {\r\n    show(this.config);\r\n  }\r\n}\r\n","import { RunnerCliParams } from '@/types/runner';\r\nimport yargs from 'yargs';\r\n\r\nexport function getArgsAfterDoubleDashes(argv?: string[]): string[] {\r\n  argv ??= process.argv;\r\n\r\n  return argv.slice(2).join(' ')\r\n    // Split by -- and remove the first part\r\n    .split(' -- ').slice(1)\r\n    // Join back and split by space\r\n    .join(' -- ').trim()\r\n    // Split back to array and remove empty values\r\n    .split(' ').filter(v => v !== '');\r\n}\r\n\r\nexport function parseArgv(argv: string[]): RunnerCliParams {\r\n  const app = yargs();\r\n\r\n  // app.option('watch', {\r\n  //   alias: 'w',\r\n  //   type: 'boolean',\r\n  //   description: 'Watch files for changes and re-run the tasks',\r\n  // });\r\n\r\n  app.option('cwd', {\r\n    type: 'string',\r\n    description: 'Current working directory',\r\n  });\r\n\r\n  app.option('list', {\r\n    alias: 'l',\r\n    type: 'boolean',\r\n    description: 'List all available tasks',\r\n  });\r\n\r\n  app.option('config', {\r\n    alias: 'c',\r\n    type: 'string',\r\n    description: 'Path to config file',\r\n  });\r\n\r\n  // app.option('series', {\r\n  //   alias: 's',\r\n  //   type: 'boolean',\r\n  //   description: 'Run tasks in series instead of parallel',\r\n  // });\r\n\r\n  app.option('verbose', {\r\n    alias: 'v',\r\n    type: 'count',\r\n    description: 'Increase verbosity of output. Use multiple times for more verbosity.',\r\n  });\r\n\r\n  return app.parseSync(argv);\r\n}\r\n","import { ProcessorInterface } from '@/processors/ProcessorInterface.ts';\r\nimport { forceArray } from '@/utilities/arr.ts';\r\nimport { build } from 'esbuild';\r\nimport Module from 'module';\r\nimport { existsSync, writeFileSync } from 'node:fs';\r\nimport { dirname, isAbsolute, resolve } from 'node:path';\r\nimport { MaybeArray, MaybePromise } from 'rollup';\r\nimport { ConfigResult, LoadedConfigTask, RunnerCliParams } from '@/types';\r\n\r\nexport async function loadConfigFile(configFile: ConfigResult): Promise<Record<string, LoadedConfigTask>> {\r\n  let path = configFile.path;\r\n\r\n  // If is Windows, Add \"file://\" prefix to path\r\n  if (process.platform === 'win32') {\r\n    // todo: try use pathToFileURL(): import { pathToFileURL } from 'url';\r\n    // Replace backslash to slash\r\n    const winPath = path.replace(/\\\\/g, '/');\r\n    // Add file:// prefix if not exists\r\n    if (!winPath.startsWith('file://')) {\r\n      // Add extra slash to make it absolute path\r\n      // e.g. C:/path/to/file\r\n      // becomes file:///C:/path/to/file\r\n      path = `file:///${winPath}`;\r\n    }\r\n  }\r\n\r\n  if (configFile.ts) {\r\n    const buildResult = await build({\r\n      entryPoints: [configFile.path],\r\n      bundle: true,\r\n      write: false,\r\n      outdir: 'dist',\r\n      platform: 'node',\r\n      format: 'cjs',\r\n      target: 'esnext',\r\n      external: ['../dist', '../dist/*'],\r\n      packages: 'external',\r\n      sourcemap: 'inline',\r\n    });\r\n    \r\n    const output = buildResult.outputFiles[0];\r\n\r\n    const code = Buffer.from(output.contents).toString('utf8');\r\n    writeFileSync(output.path, code);\r\n    const m = new Module(output.path, undefined);\r\n    m.filename = output.path;\r\n    m.paths = Module._nodeModulePaths(dirname(output.path));\r\n    m._compile(code, output.path);\r\n\r\n    return expandModules(m.exports);\r\n  } else {\r\n    const modules = await import(path);\r\n\r\n    return expandModules(modules);\r\n  }\r\n}\r\n\r\nexport function expandModules(modules: Record<string, any>) {\r\n  modules = { ...modules };\r\n\r\n  if (modules.__esModule) {\r\n    delete modules.__esModule;\r\n  }\r\n\r\n  return modules;\r\n}\r\n\r\nexport async function resolveTaskResults(task: LoadedConfigTask) {\r\n  task = await task;\r\n\r\n  return Promise.all(forceArray(task));\r\n}\r\n\r\nexport async function resolveTaskOptions(task: LoadedConfigTask, resolveSubFunctions = false): Promise<ProcessorInterface[]> {\r\n  task = await task;\r\n\r\n  if (!resolveSubFunctions && Array.isArray(task)) {\r\n    const results = await Promise.all(task.map((task) => resolveTaskOptions(task, true)));\r\n    return results.flat();\r\n  }\r\n\r\n  if (typeof task === 'function') {\r\n    return resolvePromisesToFlatArray(await task(), task?.name);\r\n  }\r\n\r\n  return resolvePromisesToFlatArray((await task) as MaybeArray<ProcessorInterface>, task?.name);\r\n}\r\n\r\nasync function resolvePromisesToFlatArray(tasks: MaybeArray<MaybePromise<ProcessorInterface>>, name?: string) {\r\n  if (!Array.isArray(tasks)) {\r\n    return [await tasks];\r\n  }\r\n\r\n  const resolvedTasks = await Promise.all(tasks);\r\n  const returnTasks = [];\r\n\r\n  for (const resolvedTask of resolvedTasks) {\r\n    if (Array.isArray(resolvedTask)) {\r\n      returnTasks.push(...resolvedTask);\r\n    } else {\r\n      returnTasks.push(resolvedTask);\r\n    }\r\n  }\r\n\r\n  return returnTasks;\r\n}\r\n\r\nexport function mustGetAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult {\r\n  const found = getAvailableConfigFile(root, params);\r\n\r\n  if (!found) {\r\n    throw new Error('No config file found. Please create a fusionfile.js or fusionfile.ts in the root directory.');\r\n  }\r\n\r\n  return found;\r\n}\r\n\r\nexport function getAvailableConfigFile(root: string, params: RunnerCliParams): ConfigResult | null {\r\n  let found = params?.config;\r\n\r\n  if (found) {\r\n    // If is not absolute of system path(consider Windows), prepend root\r\n    if (!isAbsolute(found)) {\r\n      found = resolve(root, found);\r\n    }\r\n\r\n    if (existsSync(found)) {\r\n      return {\r\n        path: found,\r\n        // get filename from file path\r\n        filename: found.split('/').pop() || '',\r\n        type: getConfigModuleType(found),\r\n        ts: isConfigTypeScript(found),\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  return findDefaultConfig(root);\r\n}\r\n\r\nexport function findDefaultConfig(root: string): ConfigResult | null {\r\n  let file = resolve(root, 'fusionfile.js');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'commonjs',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mjs');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: false,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.ts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  file = resolve(root, 'fusionfile.mts');\r\n\r\n  if (existsSync(file)) {\r\n    return {\r\n      path: file,\r\n      // get filename from file path\r\n      filename: file.split('/').pop() || '',\r\n      type: 'module',\r\n      ts: true,\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getConfigModuleType(file: string) {\r\n  let type: 'commonjs' | 'module' | 'unknown' = 'unknown';\r\n\r\n  if (file.endsWith('.cjs')) {\r\n    type = 'commonjs';\r\n  } else if (file.endsWith('.mjs')) {\r\n    type = 'module';\r\n  } else if (file.endsWith('.ts') || file.endsWith('.mts')) {\r\n    type = 'module';\r\n  }\r\n\r\n  return type;\r\n}\r\n\r\nfunction isConfigTypeScript(file: string) {\r\n  return file.endsWith('.ts') || file.endsWith('.mts');\r\n}\r\n","import { ProcessorInterface, ProcessorPreview } from '@/processors/ProcessorInterface.ts';\r\nimport { LoadedConfigTask } from '@/types';\r\nimport { forceArray } from '@/utilities/arr.ts';\r\nimport archy, { type Data } from 'archy';\r\nimport chalk from 'chalk';\r\nimport { MaybeArray } from 'rollup';\r\nimport { UserConfig } from 'vite';\r\nimport { resolveTaskOptions } from './config';\r\n\r\nexport async function displayAvailableTasks(tasks: Record<string, LoadedConfigTask>) {\r\n  const keys = Object.keys(tasks);\r\n\r\n  // Sort put default as first if exists\r\n  keys.sort((a, b) => {\r\n    if (a === 'default') {\r\n      return -1;\r\n    }\r\n\r\n    if (b === 'default') {\r\n      return 1;\r\n    }\r\n\r\n    return a.localeCompare(b);\r\n  });\r\n\r\n  const nodes: Array<Data | string> = [];\r\n\r\n  for (const key of keys) {\r\n    const task = tasks[key];\r\n    // const taskOptions = await resolveTaskOptions(task, true);\r\n\r\n    nodes.push(await describeTasks(key, task));\r\n  }\r\n\r\n  const text = archy({\r\n    label: chalk.magenta('Available Tasks'),\r\n    nodes\r\n  });\r\n\r\n  console.log(text);\r\n}\r\n\r\nasync function describeTasks(name: string, tasks: LoadedConfigTask): Promise<Data> {\r\n  const nodes = [];\r\n  tasks = forceArray(await tasks);\r\n\r\n  for (let task of tasks) {\r\n    const processors = await resolveTaskOptions(task, true);\r\n\r\n    for (const processor of processors) {\r\n      if (typeof processor === 'function') {\r\n        nodes.push(\r\n          await describeTasks((processor as Function).name, processor)\r\n        );\r\n      } else {\r\n        nodes.push(...await describeProcessor(processor));\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    label: chalk.cyan(name),\r\n    nodes\r\n  };\r\n}\r\n\r\nasync function describeProcessor(processor: ProcessorInterface): Promise<string[]> {\r\n  const results = await processor.preview();\r\n\r\n  return Promise.all(results.map((result) => describeProcessorPreview(result)));\r\n}\r\n\r\nasync function describeProcessorPreview(preview: ProcessorPreview): Promise<string> {\r\n  const str = [];\r\n\r\n  const { input: entry, output, extra } = preview;\r\n\r\n  // Input\r\n  const inputStr = chalk.yellow(entry);\r\n  // if (typeof entry === 'string') {\r\n  //   inputStr = chalk.yellow(entry);\r\n  // } else if (Array.isArray(entry)) {\r\n  //   inputStr = chalk.yellow(entry.join(', '));\r\n  // } else if (typeof entry === 'object') {\r\n  //   inputStr = chalk.yellow(Object.values(entry).join(', '));\r\n  // }\r\n  str.push(`Input: ${inputStr}`);\r\n\r\n  // Output\r\n  // if (output) {\r\n  //   const outputs = Array.isArray(output) ? output : [output];\r\n  //   outputs.forEach((output, index) => {\r\n  //     let outStr = '';\r\n  //     if (output.file) {\r\n  //       outStr = chalk.green(output.file);\r\n  //     } else if (output.dir) {\r\n  //       outStr = chalk.green(output.dir);\r\n  //     }\r\n  //     str.push(`Output[${index}]: ${outStr}`);\r\n  //   });\r\n  // }\r\n\r\n  const outStr = chalk.green(output);\r\n  str.push(`Output: ${outStr}`);\r\n\r\n  return str.join(\" - \");\r\n}\r\n\r\nfunction countTask(task: MaybeArray<UserConfig>) {\r\n  if (Array.isArray(task)) {\r\n    return task.length;\r\n  }\r\n\r\n  return 1;\r\n}\r\n","import { ProcessorInterface } from '@/processors/ProcessorInterface.ts';\r\nimport chalk from 'chalk';\r\nimport { uniq } from 'lodash-es';\r\nimport { MaybeArray } from 'rollup';\r\nimport { resolveTaskOptions } from '@/runner/config';\r\nimport { LoadedConfigTask, RunningTasks } from '@/types/runner';\r\nimport { UserConfig } from 'vite';\r\n\r\nexport function selectRunningTasks(\r\n  input: string[],\r\n  tasks: Record<string, LoadedConfigTask>\r\n): Record<string, LoadedConfigTask> {\r\n  input = uniq(input);\r\n\r\n  if (input.length === 0) {\r\n    input.push('default');\r\n  }\r\n\r\n  const selected: Record<string, LoadedConfigTask> = {};\r\n\r\n  for (const name of input) {\r\n    if (tasks[name]) {\r\n      selected[name] = tasks[name];\r\n    } else {\r\n      throw new Error(`Task \"${chalk.cyan(name)}\" not found in fusion config.`);\r\n    }\r\n  }\r\n\r\n  return selected;\r\n}\r\n\r\nexport async function resolveAllTasksAsProcessors(tasks: Record<string, LoadedConfigTask>): Promise<RunningTasks> {\r\n  const cache: Record<string, MaybeArray<LoadedConfigTask>> = {};\r\n  const allTasks: RunningTasks = {};\r\n\r\n  for (const name in tasks) {\r\n    const task = tasks[name];\r\n\r\n    allTasks[name] = (await resolveTaskAsFlat(name, task, cache));\r\n  }\r\n\r\n  return allTasks;\r\n}\r\n\r\nexport async function resolveTaskAsFlat(\r\n  name: string,\r\n  task: LoadedConfigTask,\r\n  cache: Record<string, MaybeArray<LoadedConfigTask>>\r\n): Promise<ProcessorInterface[]> {\r\n  const results: ProcessorInterface[] = [];\r\n\r\n  if (Array.isArray(task)) {\r\n    for (const n in task) {\r\n      const t = task[n];\r\n      results.push(...await resolveTaskAsFlat(n, t, cache));\r\n    }\r\n  } else if (typeof task === 'function') {\r\n    name = task.name || name;\r\n\r\n    if (cache[name]) {\r\n      return [];\r\n    }\r\n\r\n    cache[name] = task;\r\n\r\n    const resolved = await resolveTaskOptions(task, true);\r\n\r\n    if (Array.isArray(resolved)) {\r\n      for (const n in resolved) {\r\n        const t = resolved[n];\r\n        results.push(...await resolveTaskAsFlat(n, t, cache));\r\n      }\r\n    }\r\n  } else {\r\n    results.push(await task);\r\n  }\r\n\r\n  return results;\r\n}\r\n","export * from '@/dep';\r\nimport ConfigBuilder from '@/builder/ConfigBuilder.ts';\r\nimport { prepareParams } from '@/params';\r\nimport { getArgsAfterDoubleDashes, parseArgv } from '@/runner/app';\r\nimport { expandModules, loadConfigFile, mustGetAvailableConfigFile } from '@/runner/config';\r\nimport { displayAvailableTasks } from '@/runner/describe.ts';\r\nimport { resolveAllTasksAsProcessors, selectRunningTasks } from '@/runner/tasks.ts';\r\nimport { FusionVitePluginOptions, FusionVitePluginUnresolved, LoadedConfigTask } from '@/types';\r\nimport { forceArray } from '@/utilities/arr.ts';\r\nimport { copyFilesAndLog, linkFilesAndLog, moveFilesAndLog } from '@/utilities/fs.ts';\r\nimport { resolve } from 'node:path';\r\nimport { Logger, mergeConfig, PluginOption, UserConfig } from 'vite';\r\n\r\nconst params = parseArgv(getArgsAfterDoubleDashes(process.argv));\r\nprepareParams(params);\r\n\r\nexport let builder: ConfigBuilder;\r\n\r\nconst originalTasks = params._;\r\n\r\nexport function useFusion(fusionOptions: FusionVitePluginUnresolved = {}, tasks?: string | string[]): PluginOption {\r\n  let logger: Logger;\r\n\r\n  const options = prepareFusionOptions(fusionOptions);\r\n\r\n  if (tasks !== undefined || (Array.isArray(tasks) && tasks.length > 0)) {\r\n    params._ = forceArray(tasks);\r\n  } else {\r\n    params._ = originalTasks;\r\n  }\r\n\r\n  if (options.cwd !== undefined) {\r\n    params.cwd = options.cwd;\r\n  }\r\n\r\n  return [\r\n    {\r\n      name: 'fusion',\r\n      configResolved(config) {\r\n        logger = config.logger;\r\n      },\r\n      async config(config, env) {\r\n        let root: string;\r\n\r\n        if (config.root) {\r\n          root = resolve(config.root);\r\n        } else {\r\n          root = params.cwd || process.cwd();\r\n        }\r\n\r\n        delete config.root;\r\n        // delete builder.config.root;\r\n\r\n        process.chdir(root);\r\n\r\n        builder = new ConfigBuilder(config, env, params);\r\n\r\n        // Retrieve config file\r\n        let tasks: Record<string, LoadedConfigTask>;\r\n\r\n        if (typeof options.fusionfile === 'string' || !options.fusionfile) {\r\n          params.config ??= options.fusionfile;\r\n          const configFile = mustGetAvailableConfigFile(root, params);\r\n\r\n          // Load config\r\n          tasks = await loadConfigFile(configFile);\r\n        } else if (typeof options.fusionfile === 'function') {\r\n          tasks = expandModules(await options.fusionfile());\r\n        } else {\r\n          tasks = expandModules(options.fusionfile);\r\n        }\r\n\r\n        // Describe tasks\r\n        if (params.list) {\r\n          await displayAvailableTasks(tasks);\r\n          return;\r\n        }\r\n\r\n        // Select running tasks\r\n        const selectedTasks = selectRunningTasks([...params._] as string[], tasks);\r\n\r\n        const runningTasks = (await resolveAllTasksAsProcessors(selectedTasks));\r\n\r\n        for (const taskName in runningTasks) {\r\n          const processors = runningTasks[taskName];\r\n\r\n          for (const processor of processors) {\r\n            await processor.config(taskName, builder);\r\n          }\r\n        }\r\n\r\n        builder.merge(ConfigBuilder.globalOverrideConfig);\r\n        builder.merge(builder.overrideConfig);\r\n\r\n        // If no input, delete it.\r\n        if (Object.keys(builder.config.build!.rollupOptions!.input!)?.length === 0) {\r\n          delete builder.config.build!.rollupOptions!.input;\r\n        }\r\n\r\n        // console.log('plugin bottom', builder.config);\r\n        //\r\n        // show(builder.overrideConfig, 15)\r\n        // show(builder.config, 15)\r\n\r\n        return builder.config;\r\n      },\r\n    },\r\n    {\r\n      name: 'fusion:post-handles',\r\n      async writeBundle(options, bundle) {\r\n        // Todo: override logger to replace vite's files logs\r\n        // @see https://github.com/windwalker-io/core/issues/1355\r\n        await moveFilesAndLog(builder.moveTasks, options.dir ?? process.cwd(), logger);\r\n        await copyFilesAndLog(builder.copyTasks, options.dir ?? process.cwd(), logger);\r\n        await linkFilesAndLog(builder.linkTasks, options.dir ?? process.cwd(), logger);\r\n\r\n        for (const callback of builder.postBuildCallbacks) {\r\n          await callback();\r\n        }\r\n      },\r\n    },\r\n  ];\r\n}\r\n\r\nfunction prepareFusionOptions(options: FusionVitePluginUnresolved): FusionVitePluginOptions {\r\n  if (typeof options === 'string') {\r\n    return {\r\n      fusionfile: options,\r\n    };\r\n  }\r\n\r\n  if (typeof options === 'function') {\r\n    return {\r\n      fusionfile: options,\r\n    };\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\nexport function mergeViteConfig(config: UserConfig | null) {\r\n  // if (config === null) {\r\n  //   ConfigBuilder.globalOverrideConfig = {};\r\n  //   return;\r\n  // }\r\n  //\r\n  // ConfigBuilder.globalOverrideConfig = mergeConfig(ConfigBuilder.globalOverrideConfig, config);\r\n  if (config === null) {\r\n    builder.overrideConfig = {};\r\n    return;\r\n  }\r\n\r\n  builder.overrideConfig = mergeConfig(ConfigBuilder.globalOverrideConfig, config);\r\n}\r\n\r\nexport function outDir(outDir: string) {\r\n  // ConfigBuilder.globalOverrideConfig = mergeConfig<UserConfig, UserConfig>(ConfigBuilder.globalOverrideConfig, {\r\n  //   build: {\r\n  //     outDir\r\n  //   }\r\n  // });\r\n  builder.overrideConfig = mergeConfig<UserConfig, UserConfig>(builder.overrideConfig, {\r\n    build: {\r\n      outDir\r\n    }\r\n  });\r\n}\r\n\r\nexport function alias(src: string, dest: string) {\r\n  builder.overrideConfig = mergeConfig<UserConfig, UserConfig>(builder.overrideConfig, {\r\n    resolve: {\r\n      alias: {\r\n        [src]: dest\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport function external(match: string, varName?: string) {\r\n  const globals: Record<string, string> = {};\r\n\r\n  if (varName) {\r\n    globals[match] = varName;\r\n  }\r\n\r\n  builder.overrideConfig = mergeConfig<UserConfig, UserConfig>(builder.overrideConfig, {\r\n    build: {\r\n      rollupOptions: {\r\n        external: [match],\r\n        output: {\r\n          globals\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n"],"names":["forceArray","item","handleMaybeArray","items","callback","css","input","output","options","CssProcessor","taskName","builder","task","assetInfo","name","basename","parse","js","JsProcessor","chunkInfo","move","dest","MoveProcessor","copy","CopyProcessor","link","LinkProcessor","params","prepareParams","p","isVerbose","isProd","isDev","isWindows","shortHash","bufferOrString","short","hash","Crypto","handleFilesOperation","src","promises","normalizeFilePath","base","getBaseFromPattern","sources","isGlob","fg","source","dir","resolvedDest","endsWithSlash","relative","dirname","fs","moveFilesAndLog","tasks","outDir","logger","ps","copyFilesAndLog","linkFilesAndLog","symlink","target","force","path","pattern","specialChars","idx","c","resolve","isAbsolute","BuildTask","group","normalize","ext","uniqueId","show","data","depth","inspect","ConfigBuilder","config","env","mergeConfig","override","entryFileNamesCallback","chunkFileNamesCallback","assetFileNamesCallback","def","get","set","value","inputOptions","plugin","to","getArgsAfterDoubleDashes","argv","v","parseArgv","app","yargs","loadConfigFile","configFile","winPath","build","code","writeFileSync","m","Module","expandModules","modules","resolveTaskOptions","resolveSubFunctions","resolvePromisesToFlatArray","resolvedTasks","returnTasks","resolvedTask","mustGetAvailableConfigFile","root","found","getAvailableConfigFile","existsSync","getConfigModuleType","isConfigTypeScript","findDefaultConfig","file","type","displayAvailableTasks","keys","a","b","nodes","key","describeTasks","text","archy","chalk","processors","processor","describeProcessor","results","result","describeProcessorPreview","preview","str","entry","extra","inputStr","outStr","selectRunningTasks","uniq","selected","resolveAllTasksAsProcessors","cache","allTasks","resolveTaskAsFlat","t","resolved","n","originalTasks","useFusion","fusionOptions","prepareFusionOptions","selectedTasks","runningTasks","bundle","mergeViteConfig","alias","external","match","varName","globals"],"mappings":"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"}